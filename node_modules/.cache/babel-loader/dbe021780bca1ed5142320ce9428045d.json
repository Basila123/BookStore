{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst error = {\n  message: \"property name must be valid\",\n  params: _ref => {\n    let {\n      params\n    } = _ref;\n    return (0, codegen_1._)`{propertyName: ${params.propertyName}}`;\n  }\n};\nconst def = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      data,\n      it\n    } = cxt;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    const valid = gen.name(\"valid\");\n    gen.forIn(\"key\", data, key => {\n      cxt.setParams({\n        propertyName: key\n      });\n      cxt.subschema({\n        keyword: \"propertyNames\",\n        data: key,\n        dataTypes: [\"string\"],\n        propertyName: key,\n        compositeRule: true\n      }, valid);\n      gen.if((0, codegen_1.not)(valid), () => {\n        cxt.error(true);\n        if (!it.allErrors) gen.break();\n      });\n    });\n    cxt.ok(valid);\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAOA;;AACA;;AAIA,MAAMA,KAAK,GAA2B;AACpCC,SAAO,EAAE,6BAD2B;AAEpCC,QAAM,EAAE;AAAA,QAAC;AAACA;AAAD,KAAD;AAAA,WAAc,gBAAC,kBAAkBA,MAAM,CAACC,YAAY,GAApD;AAAA;AAF4B,CAAtC;AAKA,MAAMC,GAAG,GAA0B;AACjCC,SAAO,EAAE,eADwB;AAEjCC,MAAI,EAAE,QAF2B;AAGjCC,YAAU,EAAE,CAAC,QAAD,EAAW,SAAX,CAHqB;AAIjCP,OAJiC;;AAKjCQ,MAAI,CAACC,GAAD,EAAgB;AAClB,UAAM;AAACC,SAAD;AAAMC,YAAN;AAAcC,UAAd;AAAoBC;AAApB,QAA0BJ,GAAhC;AACA,QAAI,8BAAkBI,EAAlB,EAAsBF,MAAtB,CAAJ,EAAmC;AACnC,UAAMG,KAAK,GAAGJ,GAAG,CAACK,IAAJ,CAAS,OAAT,CAAd;AAEAL,OAAG,CAACM,KAAJ,CAAU,KAAV,EAAiBJ,IAAjB,EAAwBK,GAAD,IAAQ;AAC7BR,SAAG,CAACS,SAAJ,CAAc;AAACf,oBAAY,EAAEc;AAAf,OAAd;AACAR,SAAG,CAACU,SAAJ,CACE;AACEd,eAAO,EAAE,eADX;AAEEO,YAAI,EAAEK,GAFR;AAGEG,iBAAS,EAAE,CAAC,QAAD,CAHb;AAIEjB,oBAAY,EAAEc,GAJhB;AAKEI,qBAAa,EAAE;AALjB,OADF,EAQEP,KARF;AAUAJ,SAAG,CAACY,EAAJ,CAAO,mBAAIR,KAAJ,CAAP,EAAmB,MAAK;AACtBL,WAAG,CAACT,KAAJ,CAAU,IAAV;AACA,YAAI,CAACa,EAAE,CAACU,SAAR,EAAmBb,GAAG,CAACc,KAAJ;AACpB,OAHD;AAID,KAhBD;AAkBAf,OAAG,CAACgB,EAAJ,CAAOX,KAAP;AACD;;AA7BgC,CAAnC;AAgCAY,kBAAetB,GAAf","names":["error","message","params","propertyName","def","keyword","type","schemaType","code","cxt","gen","schema","data","it","valid","name","forIn","key","setParams","subschema","dataTypes","compositeRule","if","allErrors","break","ok","exports"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/ajv/lib/vocabularies/applicator/propertyNames.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordErrorDefinition,\n  AnySchema,\n} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, not} from \"../../compile/codegen\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nexport type PropertyNamesError = ErrorObject<\"propertyNames\", {propertyName: string}, AnySchema>\n\nconst error: KeywordErrorDefinition = {\n  message: \"property name must be valid\",\n  params: ({params}) => _`{propertyName: ${params.propertyName}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, schema, data, it} = cxt\n    if (alwaysValidSchema(it, schema)) return\n    const valid = gen.name(\"valid\")\n\n    gen.forIn(\"key\", data, (key) => {\n      cxt.setParams({propertyName: key})\n      cxt.subschema(\n        {\n          keyword: \"propertyNames\",\n          data: key,\n          dataTypes: [\"string\"],\n          propertyName: key,\n          compositeRule: true,\n        },\n        valid\n      )\n      gen.if(not(valid), () => {\n        cxt.error(true)\n        if (!it.allErrors) gen.break()\n      })\n    })\n\n    cxt.ok(valid)\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}