{"ast":null,"code":"var everyValuesPair = require('./every-values-pair');\n\nvar hasInherit = require('./has-inherit');\n\nvar hasSameValues = require('./has-same-values');\n\nvar populateComponents = require('./populate-components');\n\nvar configuration = require('../../configuration');\n\nvar deepClone = require('../../clone').deep;\n\nvar restoreWithComponents = require('../restore-with-components');\n\nvar restoreFromOptimizing = require('../../restore-from-optimizing');\n\nvar wrapSingle = require('../../wrap-for-optimizing').single;\n\nvar serializeBody = require('../../../writer/one-time').body;\n\nvar Token = require('../../../tokenizer/token');\n\nfunction mergeIntoShorthands(properties, validator) {\n  var candidates = {};\n  var descriptor;\n  var componentOf;\n  var property;\n  var i, l;\n  var j, m; // there is no shorthand property made up of less than 3 longhands\n\n  if (properties.length < 3) {\n    return;\n  }\n\n  for (i = 0, l = properties.length; i < l; i++) {\n    property = properties[i];\n    descriptor = configuration[property.name];\n\n    if (property.dynamic) {\n      continue;\n    }\n\n    if (property.unused) {\n      continue;\n    }\n\n    if (property.hack) {\n      continue;\n    }\n\n    if (property.block) {\n      continue;\n    }\n\n    if (descriptor && descriptor.singleTypeComponents && !hasSameValues(property)) {\n      continue;\n    }\n\n    invalidateOrCompact(properties, i, candidates, validator);\n\n    if (descriptor && descriptor.componentOf) {\n      for (j = 0, m = descriptor.componentOf.length; j < m; j++) {\n        componentOf = descriptor.componentOf[j];\n        candidates[componentOf] = candidates[componentOf] || {};\n        candidates[componentOf][property.name] = property;\n      }\n    }\n  }\n\n  invalidateOrCompact(properties, i, candidates, validator);\n}\n\nfunction invalidateOrCompact(properties, position, candidates, validator) {\n  var invalidatedBy = properties[position];\n  var shorthandName;\n  var shorthandDescriptor;\n  var candidateComponents;\n  var replacedCandidates = [];\n  var i;\n\n  for (shorthandName in candidates) {\n    if (undefined !== invalidatedBy && shorthandName == invalidatedBy.name) {\n      continue;\n    }\n\n    shorthandDescriptor = configuration[shorthandName];\n    candidateComponents = candidates[shorthandName];\n\n    if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {\n      delete candidates[shorthandName];\n      continue;\n    }\n\n    if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {\n      continue;\n    }\n\n    if (mixedImportance(candidateComponents)) {\n      continue;\n    }\n\n    if (!overridable(candidateComponents, shorthandName, validator)) {\n      continue;\n    }\n\n    if (!mergeable(candidateComponents)) {\n      continue;\n    }\n\n    if (mixedInherit(candidateComponents)) {\n      replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);\n    } else {\n      replaceWithShorthand(properties, candidateComponents, shorthandName, validator);\n    }\n\n    replacedCandidates.push(shorthandName);\n  }\n\n  for (i = replacedCandidates.length - 1; i >= 0; i--) {\n    delete candidates[replacedCandidates[i]];\n  }\n}\n\nfunction invalidates(candidates, shorthandName, invalidatedBy) {\n  var shorthandDescriptor = configuration[shorthandName];\n  var invalidatedByDescriptor = configuration[invalidatedBy.name];\n  var componentName;\n\n  if ('overridesShorthands' in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {\n    return true;\n  }\n\n  if (invalidatedByDescriptor && 'componentOf' in invalidatedByDescriptor) {\n    for (componentName in candidates[shorthandName]) {\n      if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction mixedImportance(components) {\n  var important;\n  var componentName;\n\n  for (componentName in components) {\n    if (undefined !== important && components[componentName].important != important) {\n      return true;\n    }\n\n    important = components[componentName].important;\n  }\n\n  return false;\n}\n\nfunction overridable(components, shorthandName, validator) {\n  var descriptor = configuration[shorthandName];\n  var newValuePlaceholder = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var newProperty = wrapSingle(newValuePlaceholder);\n  var component;\n  var mayOverride;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n    mayOverride = configuration[component.name].canOverride || sameValue;\n\n    if (!everyValuesPair(mayOverride.bind(null, validator), newProperty.components[i], component)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction sameValue(_validator, value1, value2) {\n  return value1 === value2;\n}\n\nfunction mergeable(components) {\n  var lastCount = null;\n  var currentCount;\n  var componentName;\n  var component;\n  var descriptor;\n  var values;\n\n  for (componentName in components) {\n    component = components[componentName];\n    descriptor = configuration[componentName];\n\n    if (!('restore' in descriptor)) {\n      continue;\n    }\n\n    restoreFromOptimizing([component.all[component.position]], restoreWithComponents);\n    values = descriptor.restore(component, configuration);\n    currentCount = values.length;\n\n    if (lastCount !== null && currentCount !== lastCount) {\n      return false;\n    }\n\n    lastCount = currentCount;\n  }\n\n  return true;\n}\n\nfunction mixedInherit(components) {\n  var componentName;\n  var lastValue = null;\n  var currentValue;\n\n  for (componentName in components) {\n    currentValue = hasInherit(components[componentName]);\n\n    if (lastValue !== null && lastValue !== currentValue) {\n      return true;\n    }\n\n    lastValue = currentValue;\n  }\n\n  return false;\n}\n\nfunction replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {\n  var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);\n  var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);\n  var longhandTokensSequence = viaLonghands[0];\n  var shorthandTokensSequence = viaShorthand[0];\n  var isLonghandsShorter = serializeBody(longhandTokensSequence).length < serializeBody(shorthandTokensSequence).length;\n  var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;\n  var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];\n  var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];\n  var lastComponent = candidateComponents[Object.keys(candidateComponents).pop()];\n  var all = lastComponent.all;\n  var insertAt = lastComponent.position;\n  var componentName;\n  var oldComponent;\n  var newComponent;\n  var newToken;\n  newProperty.position = insertAt;\n  newProperty.shorthand = true;\n  newProperty.important = lastComponent.important;\n  newProperty.multiplex = false;\n  newProperty.dirty = true;\n  newProperty.all = all;\n  newProperty.all[insertAt] = newTokensSequence[0];\n  properties.splice(insertAt, 1, newProperty);\n\n  for (componentName in candidateComponents) {\n    oldComponent = candidateComponents[componentName];\n    oldComponent.unused = true;\n    newProperty.multiplex = newProperty.multiplex || oldComponent.multiplex;\n\n    if (oldComponent.name in newComponents) {\n      newComponent = newComponents[oldComponent.name];\n      newToken = findTokenIn(newTokensSequence, componentName);\n      newComponent.position = all.length;\n      newComponent.all = all;\n      newComponent.all.push(newToken);\n      properties.push(newComponent);\n    }\n  }\n}\n\nfunction buildSequenceWithInheritLonghands(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = configuration[shorthandName];\n  var shorthandToken = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var newComponent;\n  var nameMetadata;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n      newComponent = deepClone(component);\n      newComponent.value = inferComponentValue(components, newComponent.name);\n      newProperty.components[i] = newComponent;\n      inheritComponents[component.name] = deepClone(component);\n    } else {\n      newComponent = deepClone(component);\n      newComponent.all = component.all;\n      newProperty.components[i] = newComponent;\n      nonInheritComponents[component.name] = component;\n    }\n  }\n\n  newProperty.important = components[Object.keys(components).pop()].important;\n  nameMetadata = joinMetadata(nonInheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n  restoreFromOptimizing([newProperty], restoreWithComponents);\n  shorthandToken = shorthandToken.slice(0, 2);\n  Array.prototype.push.apply(shorthandToken, newProperty.value);\n  tokensSequence.unshift(shorthandToken);\n  return [tokensSequence, newProperty, inheritComponents];\n}\n\nfunction inferComponentValue(components, propertyName) {\n  var descriptor = configuration[propertyName];\n\n  if ('oppositeTo' in descriptor) {\n    return components[descriptor.oppositeTo].value;\n  } else {\n    return [[Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  }\n}\n\nfunction joinMetadata(components, at) {\n  var metadata = [];\n  var component;\n  var originalValue;\n  var componentMetadata;\n  var componentName;\n\n  for (componentName in components) {\n    component = components[componentName];\n    originalValue = component.all[component.position];\n    componentMetadata = originalValue[at][originalValue[at].length - 1];\n    Array.prototype.push.apply(metadata, componentMetadata);\n  }\n\n  return metadata.sort(metadataSorter);\n}\n\nfunction metadataSorter(metadata1, metadata2) {\n  var line1 = metadata1[0];\n  var line2 = metadata2[0];\n  var column1 = metadata1[1];\n  var column2 = metadata2[1];\n\n  if (line1 < line2) {\n    return -1;\n  } else if (line1 === line2) {\n    return column1 < column2 ? -1 : 1;\n  } else {\n    return 1;\n  }\n}\n\nfunction buildSequenceWithInheritShorthand(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = configuration[shorthandName];\n  var shorthandToken = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, 'inherit']];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var nameMetadata;\n  var valueMetadata;\n  var i, l;\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      inheritComponents[component.name] = component;\n    } else {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n      nonInheritComponents[component.name] = deepClone(component);\n    }\n  }\n\n  nameMetadata = joinMetadata(inheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n  valueMetadata = joinMetadata(inheritComponents, 2);\n  shorthandToken[2].push(valueMetadata);\n  tokensSequence.unshift(shorthandToken);\n  return [tokensSequence, newProperty, nonInheritComponents];\n}\n\nfunction findTokenIn(tokens, componentName) {\n  var i, l;\n\n  for (i = 0, l = tokens.length; i < l; i++) {\n    if (tokens[i][1][1] == componentName) {\n      return tokens[i];\n    }\n  }\n}\n\nfunction replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {\n  var descriptor = configuration[shorthandName];\n  var nameMetadata;\n  var valueMetadata;\n  var newValuePlaceholder = [Token.PROPERTY, [Token.PROPERTY_NAME, shorthandName], [Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  var all;\n  var insertAt = inferInsertAtFrom(properties, candidateComponents, shorthandName);\n  var newProperty = wrapSingle(newValuePlaceholder);\n  newProperty.shorthand = true;\n  newProperty.dirty = true;\n  newProperty.multiplex = false;\n  populateComponents([newProperty], validator, []);\n\n  for (var i = 0, l = descriptor.components.length; i < l; i++) {\n    var component = candidateComponents[descriptor.components[i]];\n    newProperty.components[i] = deepClone(component);\n    newProperty.important = component.important;\n    newProperty.multiplex = newProperty.multiplex || component.multiplex;\n    all = component.all;\n  }\n\n  for (var componentName in candidateComponents) {\n    candidateComponents[componentName].unused = true;\n  }\n\n  nameMetadata = joinMetadata(candidateComponents, 1);\n  newValuePlaceholder[1].push(nameMetadata);\n  valueMetadata = joinMetadata(candidateComponents, 2);\n  newValuePlaceholder[2].push(valueMetadata);\n  newProperty.position = insertAt;\n  newProperty.all = all;\n  newProperty.all[insertAt] = newValuePlaceholder;\n  properties.splice(insertAt, 1, newProperty);\n}\n\nfunction inferInsertAtFrom(properties, candidateComponents, shorthandName) {\n  var candidateComponentNames = Object.keys(candidateComponents);\n  var firstCandidatePosition = candidateComponents[candidateComponentNames[0]].position;\n  var lastCandidatePosition = candidateComponents[candidateComponentNames[candidateComponentNames.length - 1]].position;\n\n  if (shorthandName == 'border' && traversesVia(properties.slice(firstCandidatePosition, lastCandidatePosition), 'border-image')) {\n    return firstCandidatePosition;\n  } else {\n    return lastCandidatePosition;\n  }\n}\n\nfunction traversesVia(properties, propertyName) {\n  for (var i = properties.length - 1; i >= 0; i--) {\n    if (properties[i].name == propertyName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = mergeIntoShorthands;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/clean-css/lib/optimizer/level-2/properties/merge-into-shorthands.js"],"names":["everyValuesPair","require","hasInherit","hasSameValues","populateComponents","configuration","deepClone","deep","restoreWithComponents","restoreFromOptimizing","wrapSingle","single","serializeBody","body","Token","mergeIntoShorthands","properties","validator","candidates","descriptor","componentOf","property","i","l","j","m","length","name","dynamic","unused","hack","block","singleTypeComponents","invalidateOrCompact","position","invalidatedBy","shorthandName","shorthandDescriptor","candidateComponents","replacedCandidates","undefined","invalidates","components","Object","keys","mixedImportance","overridable","mergeable","mixedInherit","replaceWithInheritBestFit","replaceWithShorthand","push","invalidatedByDescriptor","componentName","overridesShorthands","indexOf","important","newValuePlaceholder","PROPERTY","PROPERTY_NAME","PROPERTY_VALUE","defaultValue","newProperty","component","mayOverride","canOverride","sameValue","bind","_validator","value1","value2","lastCount","currentCount","values","all","restore","lastValue","currentValue","viaLonghands","buildSequenceWithInheritLonghands","viaShorthand","buildSequenceWithInheritShorthand","longhandTokensSequence","shorthandTokensSequence","isLonghandsShorter","newTokensSequence","newComponents","lastComponent","pop","insertAt","oldComponent","newComponent","newToken","shorthand","multiplex","dirty","splice","findTokenIn","tokensSequence","inheritComponents","nonInheritComponents","shorthandToken","longhandToken","nameMetadata","slice","Array","prototype","apply","value","inferComponentValue","joinMetadata","unshift","propertyName","oppositeTo","at","metadata","originalValue","componentMetadata","sort","metadataSorter","metadata1","metadata2","line1","line2","column1","column2","valueMetadata","tokens","inferInsertAtFrom","candidateComponentNames","firstCandidatePosition","lastCandidatePosition","traversesVia","module","exports"],"mappings":"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","sourcesContent":["var everyValuesPair = require('./every-values-pair');\nvar hasInherit = require('./has-inherit');\nvar hasSameValues = require('./has-same-values');\nvar populateComponents = require('./populate-components');\n\nvar configuration = require('../../configuration');\nvar deepClone = require('../../clone').deep;\nvar restoreWithComponents = require('../restore-with-components');\n\nvar restoreFromOptimizing = require('../../restore-from-optimizing');\nvar wrapSingle = require('../../wrap-for-optimizing').single;\n\nvar serializeBody = require('../../../writer/one-time').body;\nvar Token = require('../../../tokenizer/token');\n\nfunction mergeIntoShorthands(properties, validator) {\n  var candidates = {};\n  var descriptor;\n  var componentOf;\n  var property;\n  var i, l;\n  var j, m;\n\n  // there is no shorthand property made up of less than 3 longhands\n  if (properties.length < 3) {\n    return;\n  }\n\n  for (i = 0, l = properties.length; i < l; i++) {\n    property = properties[i];\n    descriptor = configuration[property.name];\n\n    if (property.dynamic) {\n      continue;\n    }\n\n    if (property.unused) {\n      continue;\n    }\n\n    if (property.hack) {\n      continue;\n    }\n\n    if (property.block) {\n      continue;\n    }\n\n    if (descriptor && descriptor.singleTypeComponents && !hasSameValues(property)) {\n      continue;\n    }\n\n    invalidateOrCompact(properties, i, candidates, validator);\n\n    if (descriptor && descriptor.componentOf) {\n      for (j = 0, m = descriptor.componentOf.length; j < m; j++) {\n        componentOf = descriptor.componentOf[j];\n\n        candidates[componentOf] = candidates[componentOf] || {};\n        candidates[componentOf][property.name] = property;\n      }\n    }\n  }\n\n  invalidateOrCompact(properties, i, candidates, validator);\n}\n\nfunction invalidateOrCompact(properties, position, candidates, validator) {\n  var invalidatedBy = properties[position];\n  var shorthandName;\n  var shorthandDescriptor;\n  var candidateComponents;\n  var replacedCandidates = [];\n  var i;\n\n  for (shorthandName in candidates) {\n    if (undefined !== invalidatedBy && shorthandName == invalidatedBy.name) {\n      continue;\n    }\n\n    shorthandDescriptor = configuration[shorthandName];\n    candidateComponents = candidates[shorthandName];\n    if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {\n      delete candidates[shorthandName];\n      continue;\n    }\n\n    if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {\n      continue;\n    }\n\n    if (mixedImportance(candidateComponents)) {\n      continue;\n    }\n\n    if (!overridable(candidateComponents, shorthandName, validator)) {\n      continue;\n    }\n\n    if (!mergeable(candidateComponents)) {\n      continue;\n    }\n\n    if (mixedInherit(candidateComponents)) {\n      replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);\n    } else {\n      replaceWithShorthand(properties, candidateComponents, shorthandName, validator);\n    }\n\n    replacedCandidates.push(shorthandName);\n  }\n\n  for (i = replacedCandidates.length - 1; i >= 0; i--) {\n    delete candidates[replacedCandidates[i]];\n  }\n}\n\nfunction invalidates(candidates, shorthandName, invalidatedBy) {\n  var shorthandDescriptor = configuration[shorthandName];\n  var invalidatedByDescriptor = configuration[invalidatedBy.name];\n  var componentName;\n\n  if ('overridesShorthands' in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {\n    return true;\n  }\n\n  if (invalidatedByDescriptor && 'componentOf' in invalidatedByDescriptor) {\n    for (componentName in candidates[shorthandName]) {\n      if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction mixedImportance(components) {\n  var important;\n  var componentName;\n\n  for (componentName in components) {\n    if (undefined !== important && components[componentName].important != important) {\n      return true;\n    }\n\n    important = components[componentName].important;\n  }\n\n  return false;\n}\n\nfunction overridable(components, shorthandName, validator) {\n  var descriptor = configuration[shorthandName];\n  var newValuePlaceholder = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var newProperty = wrapSingle(newValuePlaceholder);\n  var component;\n  var mayOverride;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n    mayOverride = configuration[component.name].canOverride || sameValue;\n\n    if (!everyValuesPair(mayOverride.bind(null, validator), newProperty.components[i], component)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction sameValue(_validator, value1, value2) {\n  return value1 === value2;\n}\n\nfunction mergeable(components) {\n  var lastCount = null;\n  var currentCount;\n  var componentName;\n  var component;\n  var descriptor;\n  var values;\n\n  for (componentName in components) {\n    component = components[componentName];\n    descriptor = configuration[componentName];\n\n    if (!('restore' in descriptor)) {\n      continue;\n    }\n\n    restoreFromOptimizing([component.all[component.position]], restoreWithComponents);\n    values = descriptor.restore(component, configuration);\n\n    currentCount = values.length;\n\n    if (lastCount !== null && currentCount !== lastCount) {\n      return false;\n    }\n\n    lastCount = currentCount;\n  }\n\n  return true;\n}\n\nfunction mixedInherit(components) {\n  var componentName;\n  var lastValue = null;\n  var currentValue;\n\n  for (componentName in components) {\n    currentValue = hasInherit(components[componentName]);\n\n    if (lastValue !== null && lastValue !== currentValue) {\n      return true;\n    }\n\n    lastValue = currentValue;\n  }\n\n  return false;\n}\n\nfunction replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {\n  var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);\n  var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);\n  var longhandTokensSequence = viaLonghands[0];\n  var shorthandTokensSequence = viaShorthand[0];\n  var isLonghandsShorter = serializeBody(longhandTokensSequence).length < serializeBody(shorthandTokensSequence).length;\n  var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;\n  var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];\n  var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];\n  var lastComponent = candidateComponents[Object.keys(candidateComponents).pop()];\n  var all = lastComponent.all;\n  var insertAt = lastComponent.position;\n  var componentName;\n  var oldComponent;\n  var newComponent;\n  var newToken;\n\n  newProperty.position = insertAt;\n  newProperty.shorthand = true;\n  newProperty.important = lastComponent.important;\n  newProperty.multiplex = false;\n  newProperty.dirty = true;\n  newProperty.all = all;\n  newProperty.all[insertAt] = newTokensSequence[0];\n\n  properties.splice(insertAt, 1, newProperty);\n\n  for (componentName in candidateComponents) {\n    oldComponent = candidateComponents[componentName];\n    oldComponent.unused = true;\n\n    newProperty.multiplex = newProperty.multiplex || oldComponent.multiplex;\n\n    if (oldComponent.name in newComponents) {\n      newComponent = newComponents[oldComponent.name];\n      newToken = findTokenIn(newTokensSequence, componentName);\n\n      newComponent.position = all.length;\n      newComponent.all = all;\n      newComponent.all.push(newToken);\n\n      properties.push(newComponent);\n    }\n  }\n}\n\nfunction buildSequenceWithInheritLonghands(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = configuration[shorthandName];\n  var shorthandToken = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var newComponent;\n  var nameMetadata;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n\n      newComponent = deepClone(component);\n      newComponent.value = inferComponentValue(components, newComponent.name);\n\n      newProperty.components[i] = newComponent;\n      inheritComponents[component.name] = deepClone(component);\n    } else {\n      newComponent = deepClone(component);\n      newComponent.all = component.all;\n      newProperty.components[i] = newComponent;\n\n      nonInheritComponents[component.name] = component;\n    }\n  }\n\n  newProperty.important = components[Object.keys(components).pop()].important;\n\n  nameMetadata = joinMetadata(nonInheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n\n  restoreFromOptimizing([newProperty], restoreWithComponents);\n\n  shorthandToken = shorthandToken.slice(0, 2);\n  Array.prototype.push.apply(shorthandToken, newProperty.value);\n\n  tokensSequence.unshift(shorthandToken);\n\n  return [tokensSequence, newProperty, inheritComponents];\n}\n\nfunction inferComponentValue(components, propertyName) {\n  var descriptor = configuration[propertyName];\n\n  if ('oppositeTo' in descriptor) {\n    return components[descriptor.oppositeTo].value;\n  } else {\n    return [[Token.PROPERTY_VALUE, descriptor.defaultValue]];\n  }\n}\n\nfunction joinMetadata(components, at) {\n  var metadata = [];\n  var component;\n  var originalValue;\n  var componentMetadata;\n  var componentName;\n\n  for (componentName in components) {\n    component = components[componentName];\n    originalValue = component.all[component.position];\n    componentMetadata = originalValue[at][originalValue[at].length - 1];\n\n    Array.prototype.push.apply(metadata, componentMetadata);\n  }\n\n  return metadata.sort(metadataSorter);\n}\n\nfunction metadataSorter(metadata1, metadata2) {\n  var line1 = metadata1[0];\n  var line2 = metadata2[0];\n  var column1 = metadata1[1];\n  var column2 = metadata2[1];\n\n  if (line1 < line2) {\n    return -1;\n  } else if (line1 === line2) {\n    return column1 < column2 ? -1 : 1;\n  } else {\n    return 1;\n  }\n}\n\nfunction buildSequenceWithInheritShorthand(components, shorthandName, validator) {\n  var tokensSequence = [];\n  var inheritComponents = {};\n  var nonInheritComponents = {};\n  var descriptor = configuration[shorthandName];\n  var shorthandToken = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, 'inherit']\n  ];\n  var newProperty = wrapSingle(shorthandToken);\n  var component;\n  var longhandToken;\n  var nameMetadata;\n  var valueMetadata;\n  var i, l;\n\n  populateComponents([newProperty], validator, []);\n\n  for (i = 0, l = descriptor.components.length; i < l; i++) {\n    component = components[descriptor.components[i]];\n\n    if (hasInherit(component)) {\n      inheritComponents[component.name] = component;\n    } else {\n      longhandToken = component.all[component.position].slice(0, 2);\n      Array.prototype.push.apply(longhandToken, component.value);\n      tokensSequence.push(longhandToken);\n\n      nonInheritComponents[component.name] = deepClone(component);\n    }\n  }\n\n  nameMetadata = joinMetadata(inheritComponents, 1);\n  shorthandToken[1].push(nameMetadata);\n\n  valueMetadata = joinMetadata(inheritComponents, 2);\n  shorthandToken[2].push(valueMetadata);\n\n  tokensSequence.unshift(shorthandToken);\n\n  return [tokensSequence, newProperty, nonInheritComponents];\n}\n\nfunction findTokenIn(tokens, componentName) {\n  var i, l;\n\n  for (i = 0, l = tokens.length; i < l; i++) {\n    if (tokens[i][1][1] == componentName) {\n      return tokens[i];\n    }\n  }\n}\n\nfunction replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {\n  var descriptor = configuration[shorthandName];\n  var nameMetadata;\n  var valueMetadata;\n  var newValuePlaceholder = [\n    Token.PROPERTY,\n    [Token.PROPERTY_NAME, shorthandName],\n    [Token.PROPERTY_VALUE, descriptor.defaultValue]\n  ];\n  var all;\n  var insertAt = inferInsertAtFrom(properties, candidateComponents, shorthandName);\n\n  var newProperty = wrapSingle(newValuePlaceholder);\n  newProperty.shorthand = true;\n  newProperty.dirty = true;\n  newProperty.multiplex = false;\n\n  populateComponents([newProperty], validator, []);\n\n  for (var i = 0, l = descriptor.components.length; i < l; i++) {\n    var component = candidateComponents[descriptor.components[i]];\n\n    newProperty.components[i] = deepClone(component);\n    newProperty.important = component.important;\n    newProperty.multiplex = newProperty.multiplex || component.multiplex;\n\n    all = component.all;\n  }\n\n  for (var componentName in candidateComponents) {\n    candidateComponents[componentName].unused = true;\n  }\n\n  nameMetadata = joinMetadata(candidateComponents, 1);\n  newValuePlaceholder[1].push(nameMetadata);\n\n  valueMetadata = joinMetadata(candidateComponents, 2);\n  newValuePlaceholder[2].push(valueMetadata);\n\n  newProperty.position = insertAt;\n  newProperty.all = all;\n  newProperty.all[insertAt] = newValuePlaceholder;\n\n  properties.splice(insertAt, 1, newProperty);\n}\n\nfunction inferInsertAtFrom(properties, candidateComponents, shorthandName) {\n  var candidateComponentNames = Object.keys(candidateComponents);\n  var firstCandidatePosition = candidateComponents[candidateComponentNames[0]].position;\n  var lastCandidatePosition = candidateComponents[candidateComponentNames[candidateComponentNames.length - 1]].position;\n\n  if (shorthandName == 'border' && traversesVia(properties.slice(firstCandidatePosition, lastCandidatePosition), 'border-image')) {\n    return firstCandidatePosition;\n  } else {\n    return lastCandidatePosition;\n  }\n}\n\nfunction traversesVia(properties, propertyName) {\n  for (var i = properties.length - 1; i >= 0; i--) {\n    if (properties[i].name == propertyName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = mergeIntoShorthands;\n"]},"metadata":{},"sourceType":"script"}