{"ast":null,"code":"'use strict';\n\nconst {\n  visit,\n  visitSkip,\n  detachNodeFromParent\n} = require('../lib/xast.js');\n\nconst {\n  collectStylesheet,\n  computeStyle\n} = require('../lib/style.js');\n\nconst {\n  elemsGroups\n} = require('./_collections.js');\n\nexports.type = 'visitor';\nexports.name = 'removeUselessStrokeAndFill';\nexports.active = true;\nexports.description = 'removes useless stroke and fill attributes';\n/**\n * Remove useless stroke and fill attrs.\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<{\n *  stroke?: boolean,\n *  fill?: boolean,\n *  removeNone?: boolean\n * }>}\n */\n\nexports.fn = (root, params) => {\n  const {\n    stroke: removeStroke = true,\n    fill: removeFill = true,\n    removeNone = false\n  } = params; // style and script elements deoptimise this plugin\n\n  let hasStyleOrScript = false;\n  visit(root, {\n    element: {\n      enter: node => {\n        if (node.name === 'style' || node.name === 'script') {\n          hasStyleOrScript = true;\n        }\n      }\n    }\n  });\n\n  if (hasStyleOrScript) {\n    return null;\n  }\n\n  const stylesheet = collectStylesheet(root);\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // id attribute deoptimise the whole subtree\n        if (node.attributes.id != null) {\n          return visitSkip;\n        }\n\n        if (elemsGroups.shape.includes(node.name) == false) {\n          return;\n        }\n\n        const computedStyle = computeStyle(stylesheet, node);\n        const stroke = computedStyle.stroke;\n        const strokeOpacity = computedStyle['stroke-opacity'];\n        const strokeWidth = computedStyle['stroke-width'];\n        const markerEnd = computedStyle['marker-end'];\n        const fill = computedStyle.fill;\n        const fillOpacity = computedStyle['fill-opacity'];\n        const computedParentStyle = parentNode.type === 'element' ? computeStyle(stylesheet, parentNode) : null;\n        const parentStroke = computedParentStyle == null ? null : computedParentStyle.stroke; // remove stroke*\n\n        if (removeStroke) {\n          if (stroke == null || stroke.type === 'static' && stroke.value == 'none' || strokeOpacity != null && strokeOpacity.type === 'static' && strokeOpacity.value === '0' || strokeWidth != null && strokeWidth.type === 'static' && strokeWidth.value === '0') {\n            // stroke-width may affect the size of marker-end\n            // marker is not visible when stroke-width is 0\n            if (strokeWidth != null && strokeWidth.type === 'static' && strokeWidth.value === '0' || markerEnd == null) {\n              for (const name of Object.keys(node.attributes)) {\n                if (name.startsWith('stroke')) {\n                  delete node.attributes[name];\n                }\n              } // set explicit none to not inherit from parent\n\n\n              if (parentStroke != null && parentStroke.type === 'static' && parentStroke.value !== 'none') {\n                node.attributes.stroke = 'none';\n              }\n            }\n          }\n        } // remove fill*\n\n\n        if (removeFill) {\n          if (fill != null && fill.type === 'static' && fill.value === 'none' || fillOpacity != null && fillOpacity.type === 'static' && fillOpacity.value === '0') {\n            for (const name of Object.keys(node.attributes)) {\n              if (name.startsWith('fill-')) {\n                delete node.attributes[name];\n              }\n            }\n\n            if (fill == null || fill.type === 'static' && fill.value !== 'none') {\n              node.attributes.fill = 'none';\n            }\n          }\n        }\n\n        if (removeNone) {\n          if ((stroke == null || node.attributes.stroke === 'none') && (fill != null && fill.type === 'static' && fill.value === 'none' || node.attributes.fill === 'none')) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/plugins/removeUselessStrokeAndFill.js"],"names":["visit","visitSkip","detachNodeFromParent","require","collectStylesheet","computeStyle","elemsGroups","exports","type","name","active","description","fn","root","params","stroke","removeStroke","fill","removeFill","removeNone","hasStyleOrScript","element","enter","node","stylesheet","parentNode","attributes","id","shape","includes","computedStyle","strokeOpacity","strokeWidth","markerEnd","fillOpacity","computedParentStyle","parentStroke","value","Object","keys","startsWith"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { visit, visitSkip, detachNodeFromParent } = require('../lib/xast.js');\nconst { collectStylesheet, computeStyle } = require('../lib/style.js');\nconst { elemsGroups } = require('./_collections.js');\n\nexports.type = 'visitor';\nexports.name = 'removeUselessStrokeAndFill';\nexports.active = true;\nexports.description = 'removes useless stroke and fill attributes';\n\n/**\n * Remove useless stroke and fill attrs.\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<{\n *  stroke?: boolean,\n *  fill?: boolean,\n *  removeNone?: boolean\n * }>}\n */\nexports.fn = (root, params) => {\n  const {\n    stroke: removeStroke = true,\n    fill: removeFill = true,\n    removeNone = false,\n  } = params;\n\n  // style and script elements deoptimise this plugin\n  let hasStyleOrScript = false;\n  visit(root, {\n    element: {\n      enter: (node) => {\n        if (node.name === 'style' || node.name === 'script') {\n          hasStyleOrScript = true;\n        }\n      },\n    },\n  });\n  if (hasStyleOrScript) {\n    return null;\n  }\n\n  const stylesheet = collectStylesheet(root);\n\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // id attribute deoptimise the whole subtree\n        if (node.attributes.id != null) {\n          return visitSkip;\n        }\n        if (elemsGroups.shape.includes(node.name) == false) {\n          return;\n        }\n        const computedStyle = computeStyle(stylesheet, node);\n        const stroke = computedStyle.stroke;\n        const strokeOpacity = computedStyle['stroke-opacity'];\n        const strokeWidth = computedStyle['stroke-width'];\n        const markerEnd = computedStyle['marker-end'];\n        const fill = computedStyle.fill;\n        const fillOpacity = computedStyle['fill-opacity'];\n        const computedParentStyle =\n          parentNode.type === 'element'\n            ? computeStyle(stylesheet, parentNode)\n            : null;\n        const parentStroke =\n          computedParentStyle == null ? null : computedParentStyle.stroke;\n\n        // remove stroke*\n        if (removeStroke) {\n          if (\n            stroke == null ||\n            (stroke.type === 'static' && stroke.value == 'none') ||\n            (strokeOpacity != null &&\n              strokeOpacity.type === 'static' &&\n              strokeOpacity.value === '0') ||\n            (strokeWidth != null &&\n              strokeWidth.type === 'static' &&\n              strokeWidth.value === '0')\n          ) {\n            // stroke-width may affect the size of marker-end\n            // marker is not visible when stroke-width is 0\n            if (\n              (strokeWidth != null &&\n                strokeWidth.type === 'static' &&\n                strokeWidth.value === '0') ||\n              markerEnd == null\n            ) {\n              for (const name of Object.keys(node.attributes)) {\n                if (name.startsWith('stroke')) {\n                  delete node.attributes[name];\n                }\n              }\n              // set explicit none to not inherit from parent\n              if (\n                parentStroke != null &&\n                parentStroke.type === 'static' &&\n                parentStroke.value !== 'none'\n              ) {\n                node.attributes.stroke = 'none';\n              }\n            }\n          }\n        }\n\n        // remove fill*\n        if (removeFill) {\n          if (\n            (fill != null && fill.type === 'static' && fill.value === 'none') ||\n            (fillOpacity != null &&\n              fillOpacity.type === 'static' &&\n              fillOpacity.value === '0')\n          ) {\n            for (const name of Object.keys(node.attributes)) {\n              if (name.startsWith('fill-')) {\n                delete node.attributes[name];\n              }\n            }\n            if (\n              fill == null ||\n              (fill.type === 'static' && fill.value !== 'none')\n            ) {\n              node.attributes.fill = 'none';\n            }\n          }\n        }\n\n        if (removeNone) {\n          if (\n            (stroke == null || node.attributes.stroke === 'none') &&\n            ((fill != null &&\n              fill.type === 'static' &&\n              fill.value === 'none') ||\n              node.attributes.fill === 'none')\n          ) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}