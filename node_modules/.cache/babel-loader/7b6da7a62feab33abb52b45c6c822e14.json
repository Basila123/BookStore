{"ast":null,"code":";\n\n(function (sax) {\n  // wrapper for non-node envs\n  sax.parser = function (strict, opt) {\n    return new SAXParser(strict, opt);\n  };\n\n  sax.SAXParser = SAXParser; // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n\n  sax.MAX_BUFFER_LENGTH = 64 * 1024;\n  var buffers = ['comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype', 'procInstName', 'procInstBody', 'entity', 'attribName', 'attribValue', 'cdata', 'script'];\n  sax.EVENTS = ['text', 'processinginstruction', 'sgmldeclaration', 'doctype', 'comment', 'opentagstart', 'attribute', 'opentag', 'closetag', 'opencdata', 'cdata', 'closecdata', 'error', 'end', 'ready', 'script', 'opennamespace', 'closenamespace'];\n\n  function SAXParser(strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt);\n    }\n\n    var parser = this;\n    clearBuffers(parser);\n    parser.q = parser.c = '';\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n    parser.opt = opt || {};\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';\n    parser.tags = [];\n    parser.closed = parser.closedRoot = parser.sawRoot = false;\n    parser.tag = parser.error = null;\n    parser.strict = !!strict;\n    parser.noscript = !!(strict || parser.opt.noscript);\n    parser.state = S.BEGIN;\n    parser.strictEntities = parser.opt.strictEntities;\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n    parser.attribList = []; // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS);\n    } // mostly just for error reporting\n\n\n    parser.trackPosition = parser.opt.position !== false;\n\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0;\n    }\n\n    emit(parser, 'onready');\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F() {}\n\n      F.prototype = o;\n      var newf = new F();\n      return newf;\n    };\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = [];\n\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);\n\n      return a;\n    };\n  }\n\n  function checkBufferLength(parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n    var maxActual = 0;\n\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length;\n\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser);\n            break;\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata);\n            parser.cdata = '';\n            break;\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script);\n            parser.script = '';\n            break;\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i]);\n        }\n      }\n\n      maxActual = Math.max(maxActual, len);\n    } // schedule the next check for the earliest possible buffer overrun.\n\n\n    var m = sax.MAX_BUFFER_LENGTH - maxActual;\n    parser.bufferCheckPosition = m + parser.position;\n  }\n\n  function clearBuffers(parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = '';\n    }\n  }\n\n  function flushBuffers(parser) {\n    closeText(parser);\n\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata);\n      parser.cdata = '';\n    }\n\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script);\n      parser.script = '';\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () {\n      end(this);\n    },\n    write: write,\n    resume: function () {\n      this.error = null;\n      return this;\n    },\n    close: function () {\n      return this.write(null);\n    },\n    flush: function () {\n      flushBuffers(this);\n    }\n  }; // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n\n  var CDATA = '[CDATA[';\n  var DOCTYPE = 'DOCTYPE';\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';\n  var rootNS = {\n    xml: XML_NAMESPACE,\n    xmlns: XMLNS_NAMESPACE\n  }; // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n\n  function isWhitespace(c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t';\n  }\n\n  function isQuote(c) {\n    return c === '\"' || c === '\\'';\n  }\n\n  function isAttribEnd(c) {\n    return c === '>' || isWhitespace(c);\n  }\n\n  function isMatch(regex, c) {\n    return regex.test(c);\n  }\n\n  function notMatch(regex, c) {\n    return !isMatch(regex, c);\n  }\n\n  var S = 0;\n  sax.STATE = {\n    BEGIN: S++,\n    // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++,\n    // leading whitespace\n    TEXT: S++,\n    // general stuff\n    TEXT_ENTITY: S++,\n    // &amp and such.\n    OPEN_WAKA: S++,\n    // <\n    SGML_DECL: S++,\n    // <!BLARG\n    SGML_DECL_QUOTED: S++,\n    // <!BLARG foo \"bar\n    DOCTYPE: S++,\n    // <!DOCTYPE\n    DOCTYPE_QUOTED: S++,\n    // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++,\n    // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++,\n    // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++,\n    // <!-\n    COMMENT: S++,\n    // <!--\n    COMMENT_ENDING: S++,\n    // <!-- blah -\n    COMMENT_ENDED: S++,\n    // <!-- blah --\n    CDATA: S++,\n    // <![CDATA[ something\n    CDATA_ENDING: S++,\n    // ]\n    CDATA_ENDING_2: S++,\n    // ]]\n    PROC_INST: S++,\n    // <?hi\n    PROC_INST_BODY: S++,\n    // <?hi there\n    PROC_INST_ENDING: S++,\n    // <?hi \"there\" ?\n    OPEN_TAG: S++,\n    // <strong\n    OPEN_TAG_SLASH: S++,\n    // <strong /\n    ATTRIB: S++,\n    // <a\n    ATTRIB_NAME: S++,\n    // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++,\n    // <a foo _\n    ATTRIB_VALUE: S++,\n    // <a foo=\n    ATTRIB_VALUE_QUOTED: S++,\n    // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++,\n    // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++,\n    // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++,\n    // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++,\n    // <foo bar=&quot\n    CLOSE_TAG: S++,\n    // </a\n    CLOSE_TAG_SAW_WHITE: S++,\n    // </a   >\n    SCRIPT: S++,\n    // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n\n  };\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  };\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  };\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key];\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e;\n    sax.ENTITIES[key] = s;\n  });\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s;\n  } // shorthand\n\n\n  S = sax.STATE;\n\n  function emit(parser, event, data) {\n    parser[event] && parser[event](data);\n  }\n\n  function emitNode(parser, nodeType, data) {\n    if (parser.textNode) closeText(parser);\n    emit(parser, nodeType, data);\n  }\n\n  function closeText(parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode);\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode);\n    parser.textNode = '';\n  }\n\n  function textopts(opt, text) {\n    if (opt.trim) text = text.trim();\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ');\n    return text;\n  }\n\n  function error(parser, reason) {\n    closeText(parser);\n    const message = reason + '\\nLine: ' + parser.line + '\\nColumn: ' + parser.column + '\\nChar: ' + parser.c;\n    const error = new Error(message);\n    error.reason = reason;\n    error.line = parser.line;\n    error.column = parser.column;\n    parser.error = error;\n    emit(parser, 'onerror', error);\n    return parser;\n  }\n\n  function end(parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');\n\n    if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n      error(parser, 'Unexpected end');\n    }\n\n    closeText(parser);\n    parser.c = '';\n    parser.closed = true;\n    emit(parser, 'onend');\n    SAXParser.call(parser, parser.strict, parser.opt);\n    return parser;\n  }\n\n  function strictFail(parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail');\n    }\n\n    if (parser.strict) {\n      error(parser, message);\n    }\n  }\n\n  function newTag(parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n    var parent = parser.tags[parser.tags.length - 1] || parser;\n    var tag = parser.tag = {\n      name: parser.tagName,\n      attributes: {}\n    }; // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns;\n    }\n\n    parser.attribList.length = 0;\n    emitNode(parser, 'onopentagstart', tag);\n  }\n\n  function qname(name, attribute) {\n    var i = name.indexOf(':');\n    var qualName = i < 0 ? ['', name] : name.split(':');\n    var prefix = qualName[0];\n    var local = qualName[1]; // <x \"xmlns\"=\"http://foo\">\n\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns';\n      local = '';\n    }\n\n    return {\n      prefix: prefix,\n      local: local\n    };\n  }\n\n  function attrib(parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]();\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = '';\n      return;\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true);\n      var prefix = qn.prefix;\n      var local = qn.local;\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser, 'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' + 'Actual: ' + parser.attribValue);\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser, 'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' + 'Actual: ' + parser.attribValue);\n        } else {\n          var tag = parser.tag;\n          var parent = parser.tags[parser.tags.length - 1] || parser;\n\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns);\n          }\n\n          tag.ns[local] = parser.attribValue;\n        }\n      } // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n\n\n      parser.attribList.push([parser.attribName, parser.attribValue]);\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue;\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      });\n    }\n\n    parser.attribName = parser.attribValue = '';\n  }\n\n  function openTag(parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag; // add namespace info to tag\n\n      var qn = qname(parser.tagName);\n      tag.prefix = qn.prefix;\n      tag.local = qn.local;\n      tag.uri = tag.ns[qn.prefix] || '';\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(parser.tagName));\n        tag.uri = qn.prefix;\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          });\n        });\n      } // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n\n\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i];\n        var name = nv[0];\n        var value = nv[1];\n        var qualName = qname(name, true);\n        var prefix = qualName.prefix;\n        var local = qualName.local;\n        var uri = prefix === '' ? '' : tag.ns[prefix] || '';\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }; // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(prefix));\n          a.uri = prefix;\n        }\n\n        parser.tag.attributes[name] = a;\n        emitNode(parser, 'onattribute', a);\n      }\n\n      parser.attribList.length = 0;\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing; // process the tag\n\n    parser.sawRoot = true;\n    parser.tags.push(parser.tag);\n    emitNode(parser, 'onopentag', parser.tag);\n\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT;\n      } else {\n        parser.state = S.TEXT;\n      }\n\n      parser.tag = null;\n      parser.tagName = '';\n    }\n\n    parser.attribName = parser.attribValue = '';\n    parser.attribList.length = 0;\n  }\n\n  function closeTag(parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.');\n      parser.textNode += '</>';\n      parser.state = S.TEXT;\n      return;\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>';\n        parser.tagName = '';\n        parser.state = S.SCRIPT;\n        return;\n      }\n\n      emitNode(parser, 'onscript', parser.script);\n      parser.script = '';\n    } // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n\n\n    var t = parser.tags.length;\n    var tagName = parser.tagName;\n\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]();\n    }\n\n    var closeTo = tagName;\n\n    while (t--) {\n      var close = parser.tags[t];\n\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag');\n      } else {\n        break;\n      }\n    } // didn't find it.  we already failed for strict, so just abort.\n\n\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);\n      parser.textNode += '</' + parser.tagName + '>';\n      parser.state = S.TEXT;\n      return;\n    }\n\n    parser.tagName = tagName;\n    var s = parser.tags.length;\n\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop();\n      parser.tagName = parser.tag.name;\n      emitNode(parser, 'onclosetag', parser.tagName);\n      var x = {};\n\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i];\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p];\n          emitNode(parser, 'onclosenamespace', {\n            prefix: p,\n            uri: n\n          });\n        });\n      }\n    }\n\n    if (t === 0) parser.closedRoot = true;\n    parser.tagName = parser.attribValue = parser.attribName = '';\n    parser.attribList.length = 0;\n    parser.state = S.TEXT;\n  }\n\n  function parseEntity(parser) {\n    var entity = parser.entity;\n    var entityLC = entity.toLowerCase();\n    var num;\n    var numStr = '';\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity];\n    }\n\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC];\n    }\n\n    entity = entityLC;\n\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2);\n        num = parseInt(entity, 16);\n        numStr = num.toString(16);\n      } else {\n        entity = entity.slice(1);\n        num = parseInt(entity, 10);\n        numStr = num.toString(10);\n      }\n    }\n\n    entity = entity.replace(/^0+/, '');\n\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity');\n      return '&' + parser.entity + ';';\n    }\n\n    return String.fromCodePoint(num);\n  }\n\n  function beginWhiteSpace(parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA;\n      parser.startTagPosition = parser.position;\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.');\n      parser.textNode = c;\n      parser.state = S.TEXT;\n    }\n  }\n\n  function charAt(chunk, i) {\n    var result = '';\n\n    if (i < chunk.length) {\n      result = chunk.charAt(i);\n    }\n\n    return result;\n  }\n\n  function write(chunk) {\n    var parser = this;\n\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (parser.closed) {\n      return error(parser, 'Cannot write after close. Assign an onready handler.');\n    }\n\n    if (chunk === null) {\n      return end(parser);\n    }\n\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString();\n    }\n\n    var i = 0;\n    var c = '';\n\n    while (true) {\n      c = charAt(chunk, i++);\n      parser.c = c;\n\n      if (!c) {\n        break;\n      }\n\n      if (parser.trackPosition) {\n        parser.position++;\n\n        if (c === '\\n') {\n          parser.line++;\n          parser.column = 0;\n        } else {\n          parser.column++;\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE;\n\n          if (c === '\\uFEFF') {\n            continue;\n          }\n\n          beginWhiteSpace(parser, c);\n          continue;\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c);\n          continue;\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1;\n\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++);\n\n              if (c && parser.trackPosition) {\n                parser.position++;\n\n                if (c === '\\n') {\n                  parser.line++;\n                  parser.column = 0;\n                } else {\n                  parser.column++;\n                }\n              }\n            }\n\n            parser.textNode += chunk.substring(starti, i - 1);\n          }\n\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.');\n            }\n\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY;\n            } else {\n              parser.textNode += c;\n            }\n          }\n\n          continue;\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING;\n          } else {\n            parser.script += c;\n          }\n\n          continue;\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG;\n          } else {\n            parser.script += '<' + c;\n            parser.state = S.SCRIPT;\n          }\n\n          continue;\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL;\n            parser.sgmlDecl = '';\n          } else if (isWhitespace(c)) {// wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG;\n            parser.tagName = c;\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG;\n            parser.tagName = '';\n          } else if (c === '?') {\n            parser.state = S.PROC_INST;\n            parser.procInstName = parser.procInstBody = '';\n          } else {\n            strictFail(parser, 'Unencoded <'); // if there was some whitespace, then add that in.\n\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition;\n              c = new Array(pad).join(' ') + c;\n            }\n\n            parser.textNode += '<' + c;\n            parser.state = S.TEXT;\n          }\n\n          continue;\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata');\n            parser.state = S.CDATA;\n            parser.sgmlDecl = '';\n            parser.cdata = '';\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT;\n            parser.comment = '';\n            parser.sgmlDecl = '';\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE;\n\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser, 'Inappropriately located doctype declaration');\n            }\n\n            parser.doctype = '';\n            parser.sgmlDecl = '';\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);\n            parser.sgmlDecl = '';\n            parser.state = S.TEXT;\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED;\n            parser.sgmlDecl += c;\n          } else {\n            parser.sgmlDecl += c;\n          }\n\n          continue;\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL;\n            parser.q = '';\n          }\n\n          parser.sgmlDecl += c;\n          continue;\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT;\n            emitNode(parser, 'ondoctype', parser.doctype);\n            parser.doctype = true; // just remember that we saw it.\n          } else {\n            parser.doctype += c;\n\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD;\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED;\n              parser.q = c;\n            }\n          }\n\n          continue;\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c;\n\n          if (c === parser.q) {\n            parser.q = '';\n            parser.state = S.DOCTYPE;\n          }\n\n          continue;\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c;\n\n          if (c === ']') {\n            parser.state = S.DOCTYPE;\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED;\n            parser.q = c;\n          }\n\n          continue;\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c;\n\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD;\n            parser.q = '';\n          }\n\n          continue;\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING;\n          } else {\n            parser.comment += c;\n          }\n\n          continue;\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED;\n            parser.comment = textopts(parser.opt, parser.comment);\n\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment);\n            }\n\n            parser.comment = '';\n          } else {\n            parser.comment += '-' + c;\n            parser.state = S.COMMENT;\n          }\n\n          continue;\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment'); // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n\n            parser.comment += '--' + c;\n            parser.state = S.COMMENT;\n          } else {\n            parser.state = S.TEXT;\n          }\n\n          continue;\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING;\n          } else {\n            parser.cdata += c;\n          }\n\n          continue;\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2;\n          } else {\n            parser.cdata += ']' + c;\n            parser.state = S.CDATA;\n          }\n\n          continue;\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata);\n            }\n\n            emitNode(parser, 'onclosecdata');\n            parser.cdata = '';\n            parser.state = S.TEXT;\n          } else if (c === ']') {\n            parser.cdata += ']';\n          } else {\n            parser.cdata += ']]' + c;\n            parser.state = S.CDATA;\n          }\n\n          continue;\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING;\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY;\n          } else {\n            parser.procInstName += c;\n          }\n\n          continue;\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue;\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING;\n          } else {\n            parser.procInstBody += c;\n          }\n\n          continue;\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            });\n            parser.procInstName = parser.procInstBody = '';\n            parser.state = S.TEXT;\n          } else {\n            parser.procInstBody += '?' + c;\n            parser.state = S.PROC_INST_BODY;\n          }\n\n          continue;\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c;\n          } else {\n            newTag(parser);\n\n            if (c === '>') {\n              openTag(parser);\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH;\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name');\n              }\n\n              parser.state = S.ATTRIB;\n            }\n          }\n\n          continue;\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true);\n            closeTag(parser);\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >');\n            parser.state = S.ATTRIB;\n          }\n\n          continue;\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue;\n          } else if (c === '>') {\n            openTag(parser);\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH;\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c;\n            parser.attribValue = '';\n            parser.state = S.ATTRIB_NAME;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n\n          continue;\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE;\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value');\n            parser.attribValue = parser.attribName;\n            attrib(parser);\n            openTag(parser);\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE;\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n\n          continue;\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE;\n          } else if (isWhitespace(c)) {\n            continue;\n          } else {\n            strictFail(parser, 'Attribute without value');\n            parser.tag.attributes[parser.attribName] = '';\n            parser.attribValue = '';\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            });\n            parser.attribName = '';\n\n            if (c === '>') {\n              openTag(parser);\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c;\n              parser.state = S.ATTRIB_NAME;\n            } else {\n              strictFail(parser, 'Invalid attribute name');\n              parser.state = S.ATTRIB;\n            }\n          }\n\n          continue;\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue;\n          } else if (isQuote(c)) {\n            parser.q = c;\n            parser.state = S.ATTRIB_VALUE_QUOTED;\n          } else {\n            strictFail(parser, 'Unquoted attribute value');\n            parser.state = S.ATTRIB_VALUE_UNQUOTED;\n            parser.attribValue = c;\n          }\n\n          continue;\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n            } else {\n              parser.attribValue += c;\n            }\n\n            continue;\n          }\n\n          attrib(parser);\n          parser.q = '';\n          parser.state = S.ATTRIB_VALUE_CLOSED;\n          continue;\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB;\n          } else if (c === '>') {\n            openTag(parser);\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH;\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes');\n            parser.attribName = c;\n            parser.attribValue = '';\n            parser.state = S.ATTRIB_NAME;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n\n          continue;\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U;\n            } else {\n              parser.attribValue += c;\n            }\n\n            continue;\n          }\n\n          attrib(parser);\n\n          if (c === '>') {\n            openTag(parser);\n          } else {\n            parser.state = S.ATTRIB;\n          }\n\n          continue;\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue;\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c;\n                parser.state = S.SCRIPT;\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.');\n              }\n            } else {\n              parser.tagName = c;\n            }\n          } else if (c === '>') {\n            closeTag(parser);\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c;\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName;\n            parser.tagName = '';\n            parser.state = S.SCRIPT;\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag');\n            }\n\n            parser.state = S.CLOSE_TAG_SAW_WHITE;\n          }\n\n          continue;\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue;\n          }\n\n          if (c === '>') {\n            closeTag(parser);\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag');\n          }\n\n          continue;\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState;\n          var buffer;\n\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT;\n              buffer = 'textNode';\n              break;\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED;\n              buffer = 'attribValue';\n              break;\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED;\n              buffer = 'attribValue';\n              break;\n          }\n\n          if (c === ';') {\n            var parsedEntity = parseEntity(parser); // Custom entities can contain tags, so we potentially need to parse the result\n\n            if (parser.state === S.TEXT_ENTITY && !sax.ENTITIES[parser.entity] && parsedEntity !== '&' + parser.entity + ';') {\n              chunk = chunk.slice(0, i) + parsedEntity + chunk.slice(i);\n            } else {\n              parser[buffer] += parsedEntity;\n            }\n\n            parser.entity = '';\n            parser.state = returnState;\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c;\n          } else {\n            strictFail(parser, 'Invalid character in entity name');\n            parser[buffer] += '&' + parser.entity + c;\n            parser.entity = '';\n            parser.state = returnState;\n          }\n\n          continue;\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state);\n      }\n    } // while\n\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser);\n    }\n\n    return parser;\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports);","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/@trysound/sax/lib/sax.js"],"names":["sax","parser","strict","opt","SAXParser","MAX_BUFFER_LENGTH","buffers","EVENTS","clearBuffers","q","c","bufferCheckPosition","lowercase","lowercasetags","looseCase","tags","closed","closedRoot","sawRoot","tag","error","noscript","state","S","BEGIN","strictEntities","ENTITIES","Object","create","XML_ENTITIES","attribList","xmlns","ns","rootNS","trackPosition","position","line","column","emit","o","F","prototype","newf","keys","a","i","hasOwnProperty","push","checkBufferLength","maxAllowed","Math","max","maxActual","l","length","len","closeText","emitNode","cdata","script","m","flushBuffers","end","write","resume","close","flush","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","xml","nameStart","nameBody","entityStart","entityBody","isWhitespace","isQuote","isAttribEnd","isMatch","regex","test","notMatch","STATE","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","forEach","key","e","s","String","fromCharCode","event","data","nodeType","textNode","textopts","text","trim","normalize","replace","reason","message","Error","strictFail","call","newTag","tagName","parent","name","attributes","qname","attribute","indexOf","qualName","split","prefix","local","attrib","attribName","attribValue","qn","value","openTag","selfClosing","uri","JSON","stringify","p","nv","isSelfClosing","toLowerCase","closeTag","t","closeTo","pop","x","n","parseEntity","entity","entityLC","num","numStr","charAt","slice","parseInt","toString","isNaN","fromCodePoint","beginWhiteSpace","startTagPosition","chunk","result","starti","substring","sgmlDecl","procInstName","procInstBody","pad","Array","join","toUpperCase","comment","doctype","body","returnState","buffer","parsedEntity","exports"],"mappings":"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","sourcesContent":[";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, reason) {\n    closeText(parser)\n    const message = reason +\n      '\\nLine: ' + parser.line +\n      '\\nColumn: ' + parser.column +\n      '\\nChar: ' + parser.c\n    const error = new Error(message)\n    error.reason = reason\n    error.line = parser.line\n    error.column = parser.column\n    parser.error = error\n    emit(parser, 'onerror', error)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (isQuote(c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            var parsedEntity = parseEntity(parser)\n\n            // Custom entities can contain tags, so we potentially need to parse the result\n            if (parser.state === S.TEXT_ENTITY && !sax.ENTITIES[parser.entity] && parsedEntity !== '&' + parser.entity + ';') {\n              chunk = chunk.slice(0, i) + parsedEntity + chunk.slice(i)\n            } else {\n              parser[buffer] += parsedEntity\n            }\n\n            parser.entity = ''\n            parser.state = returnState\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n"]},"metadata":{},"sourceType":"script"}