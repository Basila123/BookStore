{"ast":null,"code":"'use strict';\n\nconst OVERRIDABLE_RULES = new Set(['keyframes', 'counter-style']);\nconst SCOPE_RULES = new Set(['media', 'supports']);\n\nfunction vendorUnprefixed(prop) {\n  return prop.replace(/^-\\w+-/, '');\n}\n\nfunction isOverridable(name) {\n  return OVERRIDABLE_RULES.has(vendorUnprefixed(name.toLowerCase()));\n}\n\nfunction isScope(name) {\n  return SCOPE_RULES.has(vendorUnprefixed(name.toLowerCase()));\n}\n\nfunction getScope(node) {\n  let current = node.parent;\n  const chain = [node.name.toLowerCase(), node.params];\n\n  do {\n    if (current.type === 'atrule' && isScope(current.name)) {\n      chain.unshift(current.name + ' ' + current.params);\n    }\n\n    current = current.parent;\n  } while (current);\n\n  return chain.join('|');\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-discard-overridden',\n\n    prepare() {\n      const cache = new Map();\n      const rules = [];\n      return {\n        OnceExit(css) {\n          css.walkAtRules(node => {\n            if (isOverridable(node.name)) {\n              const scope = getScope(node);\n              cache.set(scope, node);\n              rules.push({\n                node,\n                scope\n              });\n            }\n          });\n          rules.forEach(rule => {\n            if (cache.get(rule.scope) !== rule.node) {\n              rule.node.remove();\n            }\n          });\n        }\n\n      };\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-discard-overridden/src/index.js"],"names":["OVERRIDABLE_RULES","Set","SCOPE_RULES","vendorUnprefixed","prop","replace","isOverridable","name","has","toLowerCase","isScope","getScope","node","current","parent","chain","params","type","unshift","join","pluginCreator","postcssPlugin","prepare","cache","Map","rules","OnceExit","css","walkAtRules","scope","set","push","forEach","rule","get","remove","postcss","module","exports"],"mappings":"AAAA;;AACA,MAAMA,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,WAAD,EAAc,eAAd,CAAR,CAA1B;AACA,MAAMC,WAAW,GAAG,IAAID,GAAJ,CAAQ,CAAC,OAAD,EAAU,UAAV,CAAR,CAApB;;AAEA,SAASE,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAOA,IAAI,CAACC,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAP;AACD;;AAED,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAOP,iBAAiB,CAACQ,GAAlB,CAAsBL,gBAAgB,CAACI,IAAI,CAACE,WAAL,EAAD,CAAtC,CAAP;AACD;;AAED,SAASC,OAAT,CAAiBH,IAAjB,EAAuB;AACrB,SAAOL,WAAW,CAACM,GAAZ,CAAgBL,gBAAgB,CAACI,IAAI,CAACE,WAAL,EAAD,CAAhC,CAAP;AACD;;AAED,SAASE,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAIC,OAAO,GAAGD,IAAI,CAACE,MAAnB;AAEA,QAAMC,KAAK,GAAG,CAACH,IAAI,CAACL,IAAL,CAAUE,WAAV,EAAD,EAA0BG,IAAI,CAACI,MAA/B,CAAd;;AAEA,KAAG;AACD,QAAIH,OAAO,CAACI,IAAR,KAAiB,QAAjB,IAA6BP,OAAO,CAACG,OAAO,CAACN,IAAT,CAAxC,EAAwD;AACtDQ,MAAAA,KAAK,CAACG,OAAN,CAAcL,OAAO,CAACN,IAAR,GAAe,GAAf,GAAqBM,OAAO,CAACG,MAA3C;AACD;;AACDH,IAAAA,OAAO,GAAGA,OAAO,CAACC,MAAlB;AACD,GALD,QAKSD,OALT;;AAOA,SAAOE,KAAK,CAACI,IAAN,CAAW,GAAX,CAAP;AACD;;AAED,SAASC,aAAT,GAAyB;AACvB,SAAO;AACLC,IAAAA,aAAa,EAAE,4BADV;;AAELC,IAAAA,OAAO,GAAG;AACR,YAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,YAAMC,KAAK,GAAG,EAAd;AAEA,aAAO;AACLC,QAAAA,QAAQ,CAACC,GAAD,EAAM;AACZA,UAAAA,GAAG,CAACC,WAAJ,CAAiBhB,IAAD,IAAU;AACxB,gBAAIN,aAAa,CAACM,IAAI,CAACL,IAAN,CAAjB,EAA8B;AAC5B,oBAAMsB,KAAK,GAAGlB,QAAQ,CAACC,IAAD,CAAtB;AAEAW,cAAAA,KAAK,CAACO,GAAN,CAAUD,KAAV,EAAiBjB,IAAjB;AACAa,cAAAA,KAAK,CAACM,IAAN,CAAW;AACTnB,gBAAAA,IADS;AAETiB,gBAAAA;AAFS,eAAX;AAID;AACF,WAVD;AAYAJ,UAAAA,KAAK,CAACO,OAAN,CAAeC,IAAD,IAAU;AACtB,gBAAIV,KAAK,CAACW,GAAN,CAAUD,IAAI,CAACJ,KAAf,MAA0BI,IAAI,CAACrB,IAAnC,EAAyC;AACvCqB,cAAAA,IAAI,CAACrB,IAAL,CAAUuB,MAAV;AACD;AACF,WAJD;AAKD;;AAnBI,OAAP;AAqBD;;AA3BI,GAAP;AA6BD;;AAEDf,aAAa,CAACgB,OAAd,GAAwB,IAAxB;AACAC,MAAM,CAACC,OAAP,GAAiBlB,aAAjB","sourcesContent":["'use strict';\nconst OVERRIDABLE_RULES = new Set(['keyframes', 'counter-style']);\nconst SCOPE_RULES = new Set(['media', 'supports']);\n\nfunction vendorUnprefixed(prop) {\n  return prop.replace(/^-\\w+-/, '');\n}\n\nfunction isOverridable(name) {\n  return OVERRIDABLE_RULES.has(vendorUnprefixed(name.toLowerCase()));\n}\n\nfunction isScope(name) {\n  return SCOPE_RULES.has(vendorUnprefixed(name.toLowerCase()));\n}\n\nfunction getScope(node) {\n  let current = node.parent;\n\n  const chain = [node.name.toLowerCase(), node.params];\n\n  do {\n    if (current.type === 'atrule' && isScope(current.name)) {\n      chain.unshift(current.name + ' ' + current.params);\n    }\n    current = current.parent;\n  } while (current);\n\n  return chain.join('|');\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-discard-overridden',\n    prepare() {\n      const cache = new Map();\n      const rules = [];\n\n      return {\n        OnceExit(css) {\n          css.walkAtRules((node) => {\n            if (isOverridable(node.name)) {\n              const scope = getScope(node);\n\n              cache.set(scope, node);\n              rules.push({\n                node,\n                scope,\n              });\n            }\n          });\n\n          rules.forEach((rule) => {\n            if (cache.get(rule.scope) !== rule.node) {\n              rule.node.remove();\n            }\n          });\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}