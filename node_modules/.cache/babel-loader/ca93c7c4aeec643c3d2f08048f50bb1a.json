{"ast":null,"code":"var Marker = require('../tokenizer/marker');\n\nfunction is(value, separator, isSeparatorRegex) {\n  return isSeparatorRegex ? separator.test(value) : value === separator;\n}\n\nfunction split(value, separator) {\n  var openLevel = Marker.OPEN_ROUND_BRACKET;\n  var closeLevel = Marker.CLOSE_ROUND_BRACKET;\n  var level = 0;\n  var cursor = 0;\n  var lastStart = 0;\n  var lastValue;\n  var lastCharacter;\n  var len = value.length;\n  var parts = [];\n  var isSeparatorRegex = typeof separator == 'object' && 'exec' in separator;\n\n  if (!isSeparatorRegex && value.indexOf(separator) == -1) {\n    return [value];\n  }\n\n  if (value.indexOf(openLevel) == -1) {\n    return value.split(separator);\n  }\n\n  while (cursor < len) {\n    if (value[cursor] == openLevel) {\n      level++;\n    } else if (value[cursor] == closeLevel) {\n      level--;\n    }\n\n    if (level === 0 && cursor > 0 && cursor + 1 < len && is(value[cursor], separator, isSeparatorRegex)) {\n      parts.push(value.substring(lastStart, cursor));\n\n      if (isSeparatorRegex && separator.exec(value[cursor]).length > 1) {\n        parts.push(value[cursor]);\n      }\n\n      lastStart = cursor + 1;\n    }\n\n    cursor++;\n  }\n\n  if (lastStart < cursor + 1) {\n    lastValue = value.substring(lastStart);\n    lastCharacter = lastValue[lastValue.length - 1];\n\n    if (is(lastCharacter, separator, isSeparatorRegex)) {\n      lastValue = lastValue.substring(0, lastValue.length - 1);\n    }\n\n    parts.push(lastValue);\n  }\n\n  return parts;\n}\n\nmodule.exports = split;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/clean-css/lib/utils/split.js"],"names":["Marker","require","is","value","separator","isSeparatorRegex","test","split","openLevel","OPEN_ROUND_BRACKET","closeLevel","CLOSE_ROUND_BRACKET","level","cursor","lastStart","lastValue","lastCharacter","len","length","parts","indexOf","push","substring","exec","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AAEA,SAASC,EAAT,CAAYC,KAAZ,EAAmBC,SAAnB,EAA8BC,gBAA9B,EAAgD;AAC9C,SAAOA,gBAAgB,GACrBD,SAAS,CAACE,IAAV,CAAeH,KAAf,CADqB,GAErBA,KAAK,KAAKC,SAFZ;AAGD;;AAED,SAASG,KAAT,CAAeJ,KAAf,EAAsBC,SAAtB,EAAiC;AAC/B,MAAII,SAAS,GAAGR,MAAM,CAACS,kBAAvB;AACA,MAAIC,UAAU,GAAGV,MAAM,CAACW,mBAAxB;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,GAAG,GAAGd,KAAK,CAACe,MAAhB;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAId,gBAAgB,GAAG,OAAOD,SAAP,IAAqB,QAArB,IAAiC,UAAUA,SAAlE;;AAEA,MAAI,CAACC,gBAAD,IAAqBF,KAAK,CAACiB,OAAN,CAAchB,SAAd,KAA4B,CAAC,CAAtD,EAAyD;AACvD,WAAO,CAACD,KAAD,CAAP;AACD;;AAED,MAAIA,KAAK,CAACiB,OAAN,CAAcZ,SAAd,KAA4B,CAAC,CAAjC,EAAoC;AAClC,WAAOL,KAAK,CAACI,KAAN,CAAYH,SAAZ,CAAP;AACD;;AAED,SAAOS,MAAM,GAAGI,GAAhB,EAAqB;AACnB,QAAId,KAAK,CAACU,MAAD,CAAL,IAAiBL,SAArB,EAAgC;AAC9BI,MAAAA,KAAK;AACN,KAFD,MAEO,IAAIT,KAAK,CAACU,MAAD,CAAL,IAAiBH,UAArB,EAAiC;AACtCE,MAAAA,KAAK;AACN;;AAED,QAAIA,KAAK,KAAK,CAAV,IAAeC,MAAM,GAAG,CAAxB,IAA6BA,MAAM,GAAG,CAAT,GAAaI,GAA1C,IAAiDf,EAAE,CAACC,KAAK,CAACU,MAAD,CAAN,EAAgBT,SAAhB,EAA2BC,gBAA3B,CAAvD,EAAqG;AACnGc,MAAAA,KAAK,CAACE,IAAN,CAAWlB,KAAK,CAACmB,SAAN,CAAgBR,SAAhB,EAA2BD,MAA3B,CAAX;;AAEA,UAAIR,gBAAgB,IAAID,SAAS,CAACmB,IAAV,CAAepB,KAAK,CAACU,MAAD,CAApB,EAA8BK,MAA9B,GAAuC,CAA/D,EAAkE;AAChEC,QAAAA,KAAK,CAACE,IAAN,CAAWlB,KAAK,CAACU,MAAD,CAAhB;AACD;;AAEDC,MAAAA,SAAS,GAAGD,MAAM,GAAG,CAArB;AACD;;AAEDA,IAAAA,MAAM;AACP;;AAED,MAAIC,SAAS,GAAGD,MAAM,GAAG,CAAzB,EAA4B;AAC1BE,IAAAA,SAAS,GAAGZ,KAAK,CAACmB,SAAN,CAAgBR,SAAhB,CAAZ;AACAE,IAAAA,aAAa,GAAGD,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAAzB;;AACA,QAAIhB,EAAE,CAACc,aAAD,EAAgBZ,SAAhB,EAA2BC,gBAA3B,CAAN,EAAoD;AAClDU,MAAAA,SAAS,GAAGA,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBP,SAAS,CAACG,MAAV,GAAmB,CAA1C,CAAZ;AACD;;AAEDC,IAAAA,KAAK,CAACE,IAAN,CAAWN,SAAX;AACD;;AAED,SAAOI,KAAP;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBlB,KAAjB","sourcesContent":["var Marker = require('../tokenizer/marker');\n\nfunction is(value, separator, isSeparatorRegex) {\n  return isSeparatorRegex ?\n    separator.test(value) :\n    value === separator;\n}\n\nfunction split(value, separator) {\n  var openLevel = Marker.OPEN_ROUND_BRACKET;\n  var closeLevel = Marker.CLOSE_ROUND_BRACKET;\n  var level = 0;\n  var cursor = 0;\n  var lastStart = 0;\n  var lastValue;\n  var lastCharacter;\n  var len = value.length;\n  var parts = [];\n  var isSeparatorRegex = typeof(separator) == 'object' && 'exec' in separator;\n\n  if (!isSeparatorRegex && value.indexOf(separator) == -1) {\n    return [value];\n  }\n\n  if (value.indexOf(openLevel) == -1) {\n    return value.split(separator);\n  }\n\n  while (cursor < len) {\n    if (value[cursor] == openLevel) {\n      level++;\n    } else if (value[cursor] == closeLevel) {\n      level--;\n    }\n\n    if (level === 0 && cursor > 0 && cursor + 1 < len && is(value[cursor], separator, isSeparatorRegex)) {\n      parts.push(value.substring(lastStart, cursor));\n\n      if (isSeparatorRegex && separator.exec(value[cursor]).length > 1) {\n        parts.push(value[cursor]);\n      }\n\n      lastStart = cursor + 1;\n    }\n\n    cursor++;\n  }\n\n  if (lastStart < cursor + 1) {\n    lastValue = value.substring(lastStart);\n    lastCharacter = lastValue[lastValue.length - 1];\n    if (is(lastCharacter, separator, isSeparatorRegex)) {\n      lastValue = lastValue.substring(0, lastValue.length - 1);\n    }\n\n    parts.push(lastValue);\n  }\n\n  return parts;\n}\n\nmodule.exports = split;\n"]},"metadata":{},"sourceType":"script"}