{"ast":null,"code":"'use strict';\n\nconst isCustomProp = require('./isCustomProp');\n\nconst important = node => node.important;\n\nconst unimportant = node => !node.important;\n/* Cannot be combined with other values in shorthand \n  https://www.w3.org/TR/css-cascade-5/#shorthand */\n\n\nconst cssWideKeywords = ['inherit', 'initial', 'unset', 'revert'];\n\nmodule.exports = function (props) {\n  let includeCustomProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const uniqueProps = new Set(props.map(node => node.value.toLowerCase()));\n\n  if (uniqueProps.size > 1) {\n    for (const unmergeable of cssWideKeywords) {\n      if (uniqueProps.has(unmergeable)) {\n        return false;\n      }\n    }\n  }\n\n  if (includeCustomProps && props.some(isCustomProp) && !props.every(isCustomProp)) {\n    return false;\n  }\n\n  return props.every(unimportant) || props.every(important);\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-merge-longhand/src/lib/canMerge.js"],"names":["isCustomProp","require","important","node","unimportant","cssWideKeywords","module","exports","props","includeCustomProps","uniqueProps","Set","map","value","toLowerCase","size","unmergeable","has","some","every"],"mappings":"AAAA;;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AAEA,MAAMC,SAAS,GAAIC,IAAD,IAAUA,IAAI,CAACD,SAAjC;;AACA,MAAME,WAAW,GAAID,IAAD,IAAU,CAACA,IAAI,CAACD,SAApC;AAEA;AACA;;;AACA,MAAMG,eAAe,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,QAAhC,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAsC;AAAA,MAA9BC,kBAA8B,uEAAT,IAAS;AACrD,QAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQH,KAAK,CAACI,GAAN,CAAWT,IAAD,IAAUA,IAAI,CAACU,KAAL,CAAWC,WAAX,EAApB,CAAR,CAApB;;AAEA,MAAIJ,WAAW,CAACK,IAAZ,GAAmB,CAAvB,EAA0B;AACxB,SAAK,MAAMC,WAAX,IAA0BX,eAA1B,EAA2C;AACzC,UAAIK,WAAW,CAACO,GAAZ,CAAgBD,WAAhB,CAAJ,EAAkC;AAChC,eAAO,KAAP;AACD;AACF;AACF;;AAED,MACEP,kBAAkB,IAClBD,KAAK,CAACU,IAAN,CAAWlB,YAAX,CADA,IAEA,CAACQ,KAAK,CAACW,KAAN,CAAYnB,YAAZ,CAHH,EAIE;AACA,WAAO,KAAP;AACD;;AAED,SAAOQ,KAAK,CAACW,KAAN,CAAYf,WAAZ,KAA4BI,KAAK,CAACW,KAAN,CAAYjB,SAAZ,CAAnC;AACD,CApBD","sourcesContent":["'use strict';\nconst isCustomProp = require('./isCustomProp');\n\nconst important = (node) => node.important;\nconst unimportant = (node) => !node.important;\n\n/* Cannot be combined with other values in shorthand \n  https://www.w3.org/TR/css-cascade-5/#shorthand */\nconst cssWideKeywords = ['inherit', 'initial', 'unset', 'revert'];\n\nmodule.exports = (props, includeCustomProps = true) => {\n  const uniqueProps = new Set(props.map((node) => node.value.toLowerCase()));\n\n  if (uniqueProps.size > 1) {\n    for (const unmergeable of cssWideKeywords) {\n      if (uniqueProps.has(unmergeable)) {\n        return false;\n      }\n    }\n  }\n\n  if (\n    includeCustomProps &&\n    props.some(isCustomProp) &&\n    !props.every(isCustomProp)\n  ) {\n    return false;\n  }\n\n  return props.every(unimportant) || props.every(important);\n};\n"]},"metadata":{},"sourceType":"script"}