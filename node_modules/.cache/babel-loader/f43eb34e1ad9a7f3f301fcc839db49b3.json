{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nconst _util_1 = require(\"./_util\");\n\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        missingPattern\n      }\n    } = _ref;\n    return (0, codegen_1.str)`should have property matching pattern '${missingPattern}'`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        missingPattern\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{missingPattern: ${missingPattern}}`;\n  }\n};\n\nfunction getDef() {\n  return {\n    keyword: \"patternRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    error,\n\n    code(cxt) {\n      const {\n        gen,\n        schema,\n        data\n      } = cxt;\n      if (schema.length === 0) return;\n      const valid = gen.let(\"valid\", true);\n\n      for (const pat of schema) validateProperties(pat);\n\n      function validateProperties(pattern) {\n        const matched = gen.let(\"matched\", false);\n        gen.forIn(\"key\", data, key => {\n          gen.assign(matched, (0, codegen_1._)`${(0, _util_1.usePattern)(cxt, pattern)}.test(${key})`);\n          gen.if(matched, () => gen.break());\n        });\n        cxt.setParams({\n          missingPattern: pattern\n        });\n        gen.assign(valid, (0, codegen_1.and)(valid, matched));\n        cxt.pass(valid);\n      }\n    },\n\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\",\n        format: \"regex\"\n      },\n      uniqueItems: true\n    }\n  };\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":{"version":3,"mappings":";;;;;;AACA;;AACA;;AAIA,MAAMA,KAAK,GAA2B;AACpCC,SAAO,EAAE;AAAA,QAAC;AAACC,YAAM,EAAE;AAACC;AAAD;AAAT,KAAD;AAAA,WACP,kBAAG,0CAA0CA,cAAc,GADpD;AAAA,GAD2B;AAGpCD,QAAM,EAAE;AAAA,QAAC;AAACA,YAAM,EAAE;AAACC;AAAD;AAAT,KAAD;AAAA,WAAgC,gBAAC,oBAAoBA,cAAc,GAAnE;AAAA;AAH4B,CAAtC;;AAMA,SAAwBC,MAAxB,GAA8B;AAC5B,SAAO;AACLC,WAAO,EAAE,iBADJ;AAELC,QAAI,EAAE,QAFD;AAGLC,cAAU,EAAE,OAHP;AAILP,SAJK;;AAKLQ,QAAI,CAACC,GAAD,EAAgB;AAClB,YAAM;AAACC,WAAD;AAAMC,cAAN;AAAcC;AAAd,UAAsBH,GAA5B;AACA,UAAIE,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;AACzB,YAAMC,KAAK,GAAGJ,GAAG,CAACK,GAAJ,CAAQ,OAAR,EAAiB,IAAjB,CAAd;;AACA,WAAK,MAAMC,GAAX,IAAkBL,MAAlB,EAA0BM,kBAAkB,CAACD,GAAD,CAAlB;;AAE1B,eAASC,kBAAT,CAA4BC,OAA5B,EAA2C;AACzC,cAAMC,OAAO,GAAGT,GAAG,CAACK,GAAJ,CAAQ,SAAR,EAAmB,KAAnB,CAAhB;AAEAL,WAAG,CAACU,KAAJ,CAAU,KAAV,EAAiBR,IAAjB,EAAwBS,GAAD,IAAQ;AAC7BX,aAAG,CAACY,MAAJ,CAAWH,OAAX,EAAoB,gBAAC,GAAG,wBAAWV,GAAX,EAAgBS,OAAhB,CAAwB,SAASG,GAAG,GAA5D;AACAX,aAAG,CAACa,EAAJ,CAAOJ,OAAP,EAAgB,MAAMT,GAAG,CAACc,KAAJ,EAAtB;AACD,SAHD;AAKAf,WAAG,CAACgB,SAAJ,CAAc;AAACtB,wBAAc,EAAEe;AAAjB,SAAd;AACAR,WAAG,CAACY,MAAJ,CAAWR,KAAX,EAAkB,mBAAIA,KAAJ,EAAWK,OAAX,CAAlB;AACAV,WAAG,CAACiB,IAAJ,CAASZ,KAAT;AACD;AACF,KAvBI;;AAwBLa,cAAU,EAAE;AACVrB,UAAI,EAAE,OADI;AAEVsB,WAAK,EAAE;AAACtB,YAAI,EAAE,QAAP;AAAiBuB,cAAM,EAAE;AAAzB,OAFG;AAGVC,iBAAW,EAAE;AAHH;AAxBP,GAAP;AA8BD;;AA/BDC;AAiCAC,MAAM,CAACD,OAAP,GAAiB3B,MAAjB","names":["error","message","params","missingPattern","getDef","keyword","type","schemaType","code","cxt","gen","schema","data","length","valid","let","pat","validateProperties","pattern","matched","forIn","key","assign","if","break","setParams","pass","metaSchema","items","format","uniqueItems","exports","module"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/ajv-keywords/src/definitions/patternRequired.ts"],"sourcesContent":["import type {CodeKeywordDefinition, KeywordCxt, KeywordErrorDefinition, ErrorObject} from \"ajv\"\nimport {_, str, and} from \"ajv/dist/compile/codegen\"\nimport {usePattern} from \"./_util\"\n\nexport type PatternRequiredError = ErrorObject<\"patternRequired\", {missingPattern: string}>\n\nconst error: KeywordErrorDefinition = {\n  message: ({params: {missingPattern}}) =>\n    str`should have property matching pattern '${missingPattern}'`,\n  params: ({params: {missingPattern}}) => _`{missingPattern: ${missingPattern}}`,\n}\n\nexport default function getDef(): CodeKeywordDefinition {\n  return {\n    keyword: \"patternRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    error,\n    code(cxt: KeywordCxt) {\n      const {gen, schema, data} = cxt\n      if (schema.length === 0) return\n      const valid = gen.let(\"valid\", true)\n      for (const pat of schema) validateProperties(pat)\n\n      function validateProperties(pattern: string): void {\n        const matched = gen.let(\"matched\", false)\n\n        gen.forIn(\"key\", data, (key) => {\n          gen.assign(matched, _`${usePattern(cxt, pattern)}.test(${key})`)\n          gen.if(matched, () => gen.break())\n        })\n\n        cxt.setParams({missingPattern: pattern})\n        gen.assign(valid, and(valid, matched))\n        cxt.pass(valid)\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {type: \"string\", format: \"regex\"},\n      uniqueItems: true,\n    },\n  }\n}\n\nmodule.exports = getDef\n"]},"metadata":{},"sourceType":"script"}