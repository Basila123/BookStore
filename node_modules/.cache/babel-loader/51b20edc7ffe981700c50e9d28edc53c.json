{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst directionKeywords = new Set(['top', 'right', 'bottom', 'left', 'center']);\nconst center = '50%';\nconst horizontal = new Map([['right', '100%'], ['left', '0']]);\nconst verticalValue = new Map([['bottom', '100%'], ['top', '0']]);\nconst mathFunctions = new Set(['calc', 'min', 'max', 'clamp']);\n\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return ['var', 'env'].includes(node.value.toLowerCase());\n}\n\nfunction isMathFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return mathFunctions.has(node.value.toLowerCase());\n}\n\nfunction isNumberNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const value = parseFloat(node.value);\n  return !isNaN(value);\n}\n\nfunction isDimensionNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const parsed = valueParser.unit(node.value);\n\n  if (!parsed) {\n    return false;\n  }\n\n  return parsed.unit !== '';\n}\n\nfunction transform(value) {\n  const parsed = valueParser(value);\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    } // After separator (`/`) follows `background-size` values\n    // Avoid them\n\n\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null\n      };\n    } // Do not try to be processed `var and `env` function inside background\n\n\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n      return;\n    }\n\n    const isPositionKeyword = node.type === 'word' && directionKeywords.has(node.value.toLowerCase()) || isDimensionNode(node) || isNumberNode(node) || isMathFunctionNode(node);\n\n    if (ranges[rangeIndex].start === null && isPositionKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isPositionKeyword) {\n        ranges[rangeIndex].end = index;\n        return;\n      }\n\n      return;\n    }\n  });\n  ranges.forEach(range => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(range.start, range.end + 1);\n\n    if (nodes.length > 3) {\n      return;\n    }\n\n    const firstNode = nodes[0].value.toLowerCase();\n    const secondNode = nodes[2] && nodes[2].value ? nodes[2].value.toLowerCase() : null;\n\n    if (nodes.length === 1 || secondNode === 'center') {\n      if (secondNode) {\n        nodes[2].value = nodes[1].value = '';\n      }\n\n      const map = new Map([...horizontal, ['center', center]]);\n\n      if (map.has(firstNode)) {\n        nodes[0].value = map.get(firstNode);\n      }\n\n      return;\n    }\n\n    if (firstNode === 'center' && directionKeywords.has(secondNode)) {\n      nodes[0].value = nodes[1].value = '';\n\n      if (horizontal.has(secondNode)) {\n        nodes[2].value = horizontal.get(secondNode);\n      }\n\n      return;\n    }\n\n    if (horizontal.has(firstNode) && verticalValue.has(secondNode)) {\n      nodes[0].value = horizontal.get(firstNode);\n      nodes[2].value = verticalValue.get(secondNode);\n      return;\n    } else if (verticalValue.has(firstNode) && horizontal.has(secondNode)) {\n      nodes[0].value = horizontal.get(secondNode);\n      nodes[2].value = verticalValue.get(firstNode);\n      return;\n    }\n  });\n  return parsed.toString();\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-positions',\n\n    OnceExit(css) {\n      const cache = new Map();\n      css.walkDecls(/^(background(-position)?|(-\\w+-)?perspective-origin)$/i, decl => {\n        const value = decl.value;\n\n        if (!value) {\n          return;\n        }\n\n        if (cache.has(value)) {\n          decl.value = cache.get(value);\n          return;\n        }\n\n        const result = transform(value);\n        decl.value = result;\n        cache.set(value, result);\n      });\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-normalize-positions/src/index.js"],"names":["valueParser","require","directionKeywords","Set","center","horizontal","Map","verticalValue","mathFunctions","isCommaNode","node","type","value","isVariableFunctionNode","includes","toLowerCase","isMathFunctionNode","has","isNumberNode","parseFloat","isNaN","isDimensionNode","parsed","unit","transform","ranges","rangeIndex","shouldContinue","nodes","forEach","index","start","end","isPositionKeyword","range","slice","length","firstNode","secondNode","map","get","toString","pluginCreator","postcssPlugin","OnceExit","css","cache","walkDecls","decl","result","set","postcss","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\n\nconst directionKeywords = new Set(['top', 'right', 'bottom', 'left', 'center']);\n\nconst center = '50%';\nconst horizontal = new Map([\n  ['right', '100%'],\n  ['left', '0'],\n]);\nconst verticalValue = new Map([\n  ['bottom', '100%'],\n  ['top', '0'],\n]);\nconst mathFunctions = new Set(['calc', 'min', 'max', 'clamp']);\n\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return ['var', 'env'].includes(node.value.toLowerCase());\n}\n\nfunction isMathFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n  return mathFunctions.has(node.value.toLowerCase());\n}\n\nfunction isNumberNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const value = parseFloat(node.value);\n\n  return !isNaN(value);\n}\n\nfunction isDimensionNode(node) {\n  if (node.type !== 'word') {\n    return false;\n  }\n\n  const parsed = valueParser.unit(node.value);\n\n  if (!parsed) {\n    return false;\n  }\n\n  return parsed.unit !== '';\n}\n\nfunction transform(value) {\n  const parsed = valueParser(value);\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    }\n\n    // After separator (`/`) follows `background-size` values\n    // Avoid them\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null,\n      };\n    }\n\n    // Do not try to be processed `var and `env` function inside background\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n\n      return;\n    }\n\n    const isPositionKeyword =\n      (node.type === 'word' &&\n        directionKeywords.has(node.value.toLowerCase())) ||\n      isDimensionNode(node) ||\n      isNumberNode(node) ||\n      isMathFunctionNode(node);\n\n    if (ranges[rangeIndex].start === null && isPositionKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isPositionKeyword) {\n        ranges[rangeIndex].end = index;\n\n        return;\n      }\n\n      return;\n    }\n  });\n\n  ranges.forEach((range) => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(range.start, range.end + 1);\n\n    if (nodes.length > 3) {\n      return;\n    }\n\n    const firstNode = nodes[0].value.toLowerCase();\n    const secondNode =\n      nodes[2] && nodes[2].value ? nodes[2].value.toLowerCase() : null;\n\n    if (nodes.length === 1 || secondNode === 'center') {\n      if (secondNode) {\n        nodes[2].value = nodes[1].value = '';\n      }\n\n      const map = new Map([...horizontal, ['center', center]]);\n\n      if (map.has(firstNode)) {\n        nodes[0].value = map.get(firstNode);\n      }\n\n      return;\n    }\n\n    if (firstNode === 'center' && directionKeywords.has(secondNode)) {\n      nodes[0].value = nodes[1].value = '';\n\n      if (horizontal.has(secondNode)) {\n        nodes[2].value = horizontal.get(secondNode);\n      }\n      return;\n    }\n\n    if (horizontal.has(firstNode) && verticalValue.has(secondNode)) {\n      nodes[0].value = horizontal.get(firstNode);\n      nodes[2].value = verticalValue.get(secondNode);\n\n      return;\n    } else if (verticalValue.has(firstNode) && horizontal.has(secondNode)) {\n      nodes[0].value = horizontal.get(secondNode);\n      nodes[2].value = verticalValue.get(firstNode);\n\n      return;\n    }\n  });\n\n  return parsed.toString();\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-positions',\n\n    OnceExit(css) {\n      const cache = new Map();\n\n      css.walkDecls(\n        /^(background(-position)?|(-\\w+-)?perspective-origin)$/i,\n        (decl) => {\n          const value = decl.value;\n\n          if (!value) {\n            return;\n          }\n\n          if (cache.has(value)) {\n            decl.value = cache.get(value);\n\n            return;\n          }\n\n          const result = transform(value);\n\n          decl.value = result;\n          cache.set(value, result);\n        }\n      );\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}