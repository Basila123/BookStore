{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getRangeDef(keyword) {\n  return () => ({\n    keyword,\n    type: \"number\",\n    schemaType: \"array\",\n    macro: function (_ref) {\n      let [min, max] = _ref;\n      validateRangeSchema(min, max);\n      return keyword === \"range\" ? {\n        minimum: min,\n        maximum: max\n      } : {\n        exclusiveMinimum: min,\n        exclusiveMaximum: max\n      };\n    },\n    metaSchema: {\n      type: \"array\",\n      minItems: 2,\n      maxItems: 2,\n      items: {\n        type: \"number\"\n      }\n    }\n  });\n\n  function validateRangeSchema(min, max) {\n    if (min > max || keyword === \"exclusiveRange\" && min === max) {\n      throw new Error(\"There are no numbers in range\");\n    }\n  }\n}\n\nexports.default = getRangeDef;","map":{"version":3,"mappings":";;;;;;AAKA,SAAwBA,WAAxB,CAAoCC,OAApC,EAAqD;AACnD,SAAO,OAAO;AACZA,WADY;AAEZC,QAAI,EAAE,QAFM;AAGZC,cAAU,EAAE,OAHA;AAIZC,SAAK,EAAE,gBAAsC;AAAA,UAA5B,CAACC,GAAD,EAAMC,GAAN,CAA4B;AAC3CC,yBAAmB,CAACF,GAAD,EAAMC,GAAN,CAAnB;AACA,aAAOL,OAAO,KAAK,OAAZ,GACH;AAACO,eAAO,EAAEH,GAAV;AAAeI,eAAO,EAAEH;AAAxB,OADG,GAEH;AAACI,wBAAgB,EAAEL,GAAnB;AAAwBM,wBAAgB,EAAEL;AAA1C,OAFJ;AAGD,KATW;AAUZM,cAAU,EAAE;AACVV,UAAI,EAAE,OADI;AAEVW,cAAQ,EAAE,CAFA;AAGVC,cAAQ,EAAE,CAHA;AAIVC,WAAK,EAAE;AAACb,YAAI,EAAE;AAAP;AAJG;AAVA,GAAP,CAAP;;AAkBA,WAASK,mBAAT,CAA6BF,GAA7B,EAA0CC,GAA1C,EAAqD;AACnD,QAAID,GAAG,GAAGC,GAAN,IAAcL,OAAO,KAAK,gBAAZ,IAAgCI,GAAG,KAAKC,GAA1D,EAAgE;AAC9D,YAAM,IAAIU,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF;AACF;;AAxBDC","names":["getRangeDef","keyword","type","schemaType","macro","min","max","validateRangeSchema","minimum","maximum","exclusiveMinimum","exclusiveMaximum","metaSchema","minItems","maxItems","items","Error","exports"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/ajv-keywords/src/definitions/_range.ts"],"sourcesContent":["import type {MacroKeywordDefinition} from \"ajv\"\nimport type {GetDefinition} from \"./_types\"\n\ntype RangeKwd = \"range\" | \"exclusiveRange\"\n\nexport default function getRangeDef(keyword: RangeKwd): GetDefinition<MacroKeywordDefinition> {\n  return () => ({\n    keyword,\n    type: \"number\",\n    schemaType: \"array\",\n    macro: function ([min, max]: [number, number]) {\n      validateRangeSchema(min, max)\n      return keyword === \"range\"\n        ? {minimum: min, maximum: max}\n        : {exclusiveMinimum: min, exclusiveMaximum: max}\n    },\n    metaSchema: {\n      type: \"array\",\n      minItems: 2,\n      maxItems: 2,\n      items: {type: \"number\"},\n    },\n  })\n\n  function validateRangeSchema(min: number, max: number): void {\n    if (min > max || (keyword === \"exclusiveRange\" && min === max)) {\n      throw new Error(\"There are no numbers in range\")\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}