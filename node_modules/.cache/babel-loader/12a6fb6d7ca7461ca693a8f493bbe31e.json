{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst mappings = require('./lib/map');\n\nfunction evenValues(list, index) {\n  return index % 2 === 0;\n}\n\nconst repeatKeywords = new Set(mappings.values());\n\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return ['var', 'env'].includes(node.value.toLowerCase());\n}\n\nfunction transform(value) {\n  const parsed = valueParser(value);\n\n  if (parsed.nodes.length === 1) {\n    return value;\n  }\n\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    } // After separator (`/`) follows `background-size` values\n    // Avoid them\n\n\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null\n      };\n    } // Do not try to be processed `var and `env` function inside background\n\n\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n      return;\n    }\n\n    const isRepeatKeyword = node.type === 'word' && repeatKeywords.has(node.value.toLowerCase());\n\n    if (ranges[rangeIndex].start === null && isRepeatKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isRepeatKeyword) {\n        ranges[rangeIndex].end = index;\n        return;\n      }\n\n      return;\n    }\n  });\n  ranges.forEach(range => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(range.start, range.end + 1);\n\n    if (nodes.length !== 3) {\n      return;\n    }\n\n    const key = nodes.filter(evenValues).map(n => n.value.toLowerCase()).toString();\n    const match = mappings.get(key);\n\n    if (match) {\n      nodes[0].value = match;\n      nodes[1].value = nodes[2].value = '';\n    }\n  });\n  return parsed.toString();\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-repeat-style',\n\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/^(background(-repeat)?|(-\\w+-)?mask-repeat)$/i, decl => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            if (cache.has(value)) {\n              decl.value = cache.get(value);\n              return;\n            }\n\n            const result = transform(value);\n            decl.value = result;\n            cache.set(value, result);\n          });\n        }\n\n      };\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-normalize-repeat-style/src/index.js"],"names":["valueParser","require","mappings","evenValues","list","index","repeatKeywords","Set","values","isCommaNode","node","type","value","isVariableFunctionNode","includes","toLowerCase","transform","parsed","nodes","length","ranges","rangeIndex","shouldContinue","forEach","start","end","isRepeatKeyword","has","range","slice","key","filter","map","n","toString","match","get","pluginCreator","postcssPlugin","prepare","cache","Map","OnceExit","css","walkDecls","decl","result","set","postcss","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst mappings = require('./lib/map');\n\nfunction evenValues(list, index) {\n  return index % 2 === 0;\n}\n\nconst repeatKeywords = new Set(mappings.values());\n\nfunction isCommaNode(node) {\n  return node.type === 'div' && node.value === ',';\n}\n\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return ['var', 'env'].includes(node.value.toLowerCase());\n}\n\nfunction transform(value) {\n  const parsed = valueParser(value);\n\n  if (parsed.nodes.length === 1) {\n    return value;\n  }\n\n  const ranges = [];\n  let rangeIndex = 0;\n  let shouldContinue = true;\n\n  parsed.nodes.forEach((node, index) => {\n    // After comma (`,`) follows next background\n    if (isCommaNode(node)) {\n      rangeIndex += 1;\n      shouldContinue = true;\n\n      return;\n    }\n\n    if (!shouldContinue) {\n      return;\n    }\n\n    // After separator (`/`) follows `background-size` values\n    // Avoid them\n    if (node.type === 'div' && node.value === '/') {\n      shouldContinue = false;\n\n      return;\n    }\n\n    if (!ranges[rangeIndex]) {\n      ranges[rangeIndex] = {\n        start: null,\n        end: null,\n      };\n    }\n\n    // Do not try to be processed `var and `env` function inside background\n    if (isVariableFunctionNode(node)) {\n      shouldContinue = false;\n      ranges[rangeIndex].start = null;\n      ranges[rangeIndex].end = null;\n\n      return;\n    }\n\n    const isRepeatKeyword =\n      node.type === 'word' && repeatKeywords.has(node.value.toLowerCase());\n\n    if (ranges[rangeIndex].start === null && isRepeatKeyword) {\n      ranges[rangeIndex].start = index;\n      ranges[rangeIndex].end = index;\n\n      return;\n    }\n\n    if (ranges[rangeIndex].start !== null) {\n      if (node.type === 'space') {\n        return;\n      } else if (isRepeatKeyword) {\n        ranges[rangeIndex].end = index;\n\n        return;\n      }\n\n      return;\n    }\n  });\n\n  ranges.forEach((range) => {\n    if (range.start === null) {\n      return;\n    }\n\n    const nodes = parsed.nodes.slice(range.start, range.end + 1);\n\n    if (nodes.length !== 3) {\n      return;\n    }\n    const key = nodes\n      .filter(evenValues)\n      .map((n) => n.value.toLowerCase())\n      .toString();\n\n    const match = mappings.get(key);\n\n    if (match) {\n      nodes[0].value = match;\n      nodes[1].value = nodes[2].value = '';\n    }\n  });\n\n  return parsed.toString();\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-repeat-style',\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(\n            /^(background(-repeat)?|(-\\w+-)?mask-repeat)$/i,\n            (decl) => {\n              const value = decl.value;\n\n              if (!value) {\n                return;\n              }\n\n              if (cache.has(value)) {\n                decl.value = cache.get(value);\n\n                return;\n              }\n\n              const result = transform(value);\n\n              decl.value = result;\n              cache.set(value, result);\n            }\n          );\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}