{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRules = exports.isJSONType = void 0;\nconst _jsonTypes = [\"string\", \"number\", \"integer\", \"boolean\", \"null\", \"object\", \"array\"];\nconst jsonTypes = new Set(_jsonTypes);\n\nfunction isJSONType(x) {\n  return typeof x == \"string\" && jsonTypes.has(x);\n}\n\nexports.isJSONType = isJSONType;\n\nfunction getRules() {\n  const groups = {\n    number: {\n      type: \"number\",\n      rules: []\n    },\n    string: {\n      type: \"string\",\n      rules: []\n    },\n    array: {\n      type: \"array\",\n      rules: []\n    },\n    object: {\n      type: \"object\",\n      rules: []\n    }\n  };\n  return {\n    types: { ...groups,\n      integer: true,\n      boolean: true,\n      null: true\n    },\n    rules: [{\n      rules: []\n    }, groups.number, groups.string, groups.array, groups.object],\n    post: {\n      rules: []\n    },\n    all: {},\n    keywords: {}\n  };\n}\n\nexports.getRules = getRules;","map":{"version":3,"mappings":";;;;;;AAEA,MAAMA,UAAU,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,SAAhC,EAA2C,MAA3C,EAAmD,QAAnD,EAA6D,OAA7D,CAAnB;AAIA,MAAMC,SAAS,GAAgB,IAAIC,GAAJ,CAAQF,UAAR,CAA/B;;AAEA,SAAgBG,UAAhB,CAA2BC,CAA3B,EAAqC;AACnC,SAAO,OAAOA,CAAP,IAAY,QAAZ,IAAwBH,SAAS,CAACI,GAAV,CAAcD,CAAd,CAA/B;AACD;;AAFDE;;AA2BA,SAAgBC,QAAhB,GAAwB;AACtB,QAAMC,MAAM,GAAgE;AAC1EC,UAAM,EAAE;AAACC,UAAI,EAAE,QAAP;AAAiBC,WAAK,EAAE;AAAxB,KADkE;AAE1EC,UAAM,EAAE;AAACF,UAAI,EAAE,QAAP;AAAiBC,WAAK,EAAE;AAAxB,KAFkE;AAG1EE,SAAK,EAAE;AAACH,UAAI,EAAE,OAAP;AAAgBC,WAAK,EAAE;AAAvB,KAHmE;AAI1EG,UAAM,EAAE;AAACJ,UAAI,EAAE,QAAP;AAAiBC,WAAK,EAAE;AAAxB;AAJkE,GAA5E;AAMA,SAAO;AACLI,SAAK,EAAE,EAAC,GAAGP,MAAJ;AAAYQ,aAAO,EAAE,IAArB;AAA2BC,aAAO,EAAE,IAApC;AAA0CC,UAAI,EAAE;AAAhD,KADF;AAELP,SAAK,EAAE,CAAC;AAACA,WAAK,EAAE;AAAR,KAAD,EAAcH,MAAM,CAACC,MAArB,EAA6BD,MAAM,CAACI,MAApC,EAA4CJ,MAAM,CAACK,KAAnD,EAA0DL,MAAM,CAACM,MAAjE,CAFF;AAGLK,QAAI,EAAE;AAACR,WAAK,EAAE;AAAR,KAHD;AAILS,OAAG,EAAE,EAJA;AAKLC,YAAQ,EAAE;AALL,GAAP;AAOD;;AAdDf","names":["_jsonTypes","jsonTypes","Set","isJSONType","x","has","exports","getRules","groups","number","type","rules","string","array","object","types","integer","boolean","null","post","all","keywords"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/ajv-formats/node_modules/ajv/lib/compile/rules.ts"],"sourcesContent":["import type {AddedKeywordDefinition} from \"../types\"\n\nconst _jsonTypes = [\"string\", \"number\", \"integer\", \"boolean\", \"null\", \"object\", \"array\"] as const\n\nexport type JSONType = typeof _jsonTypes[number]\n\nconst jsonTypes: Set<string> = new Set(_jsonTypes)\n\nexport function isJSONType(x: unknown): x is JSONType {\n  return typeof x == \"string\" && jsonTypes.has(x)\n}\n\ntype ValidationTypes = {\n  [K in JSONType]: boolean | RuleGroup | undefined\n}\n\nexport interface ValidationRules {\n  rules: RuleGroup[]\n  post: RuleGroup\n  all: {[Key in string]?: boolean | Rule} // rules that have to be validated\n  keywords: {[Key in string]?: boolean} // all known keywords (superset of \"all\")\n  types: ValidationTypes\n}\n\nexport interface RuleGroup {\n  type?: JSONType\n  rules: Rule[]\n}\n\n// This interface wraps KeywordDefinition because definition can have multiple keywords\nexport interface Rule {\n  keyword: string\n  definition: AddedKeywordDefinition\n}\n\nexport function getRules(): ValidationRules {\n  const groups: Record<\"number\" | \"string\" | \"array\" | \"object\", RuleGroup> = {\n    number: {type: \"number\", rules: []},\n    string: {type: \"string\", rules: []},\n    array: {type: \"array\", rules: []},\n    object: {type: \"object\", rules: []},\n  }\n  return {\n    types: {...groups, integer: true, boolean: true, null: true},\n    rules: [{rules: []}, groups.number, groups.string, groups.array, groups.object],\n    post: {rules: []},\n    all: {},\n    keywords: {},\n  }\n}\n"]},"metadata":{},"sourceType":"script"}