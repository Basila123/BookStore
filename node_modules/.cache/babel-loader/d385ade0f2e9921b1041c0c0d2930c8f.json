{"ast":null,"code":"'use strict';\n\nconst {\n  unit\n} = require('postcss-value-parser');\n\nconst keywords = require('./keywords');\n\nconst minifyFamily = require('./minify-family');\n\nconst minifyWeight = require('./minify-weight');\n\nmodule.exports = function (nodes, opts) {\n  let i, max, node, familyStart, family;\n  let hasSize = false;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n\n    if (node.type === 'word') {\n      if (hasSize) {\n        continue;\n      }\n\n      const value = node.value.toLowerCase();\n\n      if (value === 'normal' || value === 'inherit' || value === 'initial' || value === 'unset') {\n        familyStart = i;\n      } else if (keywords.style.has(value) || unit(value)) {\n        familyStart = i;\n      } else if (keywords.variant.has(value)) {\n        familyStart = i;\n      } else if (keywords.weight.has(value)) {\n        node.value = minifyWeight(value);\n        familyStart = i;\n      } else if (keywords.stretch.has(value)) {\n        familyStart = i;\n      } else if (keywords.size.has(value) || unit(value)) {\n        familyStart = i;\n        hasSize = true;\n      }\n    } else if (node.type === 'function' && nodes[i + 1] && nodes[i + 1].type === 'space') {\n      familyStart = i;\n    } else if (node.type === 'div' && node.value === '/') {\n      familyStart = i + 1;\n      break;\n    }\n  }\n\n  familyStart += 2;\n  family = minifyFamily(nodes.slice(familyStart), opts);\n  return nodes.slice(0, familyStart).concat(family);\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-minify-font-values/src/lib/minify-font.js"],"names":["unit","require","keywords","minifyFamily","minifyWeight","module","exports","nodes","opts","i","max","node","familyStart","family","hasSize","length","type","value","toLowerCase","style","has","variant","weight","stretch","size","slice","concat"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAWC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,iBAAD,CAA5B;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACtC,MAAIC,CAAJ,EAAOC,GAAP,EAAYC,IAAZ,EAAkBC,WAAlB,EAA+BC,MAA/B;AACA,MAAIC,OAAO,GAAG,KAAd;;AAEA,OAAKL,CAAC,GAAG,CAAJ,EAAOC,GAAG,GAAGH,KAAK,CAACQ,MAAxB,EAAgCN,CAAC,GAAGC,GAApC,EAAyCD,CAAC,IAAI,CAA9C,EAAiD;AAC/CE,IAAAA,IAAI,GAAGJ,KAAK,CAACE,CAAD,CAAZ;;AAEA,QAAIE,IAAI,CAACK,IAAL,KAAc,MAAlB,EAA0B;AACxB,UAAIF,OAAJ,EAAa;AACX;AACD;;AAED,YAAMG,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWC,WAAX,EAAd;;AAEA,UACED,KAAK,KAAK,QAAV,IACAA,KAAK,KAAK,SADV,IAEAA,KAAK,KAAK,SAFV,IAGAA,KAAK,KAAK,OAJZ,EAKE;AACAL,QAAAA,WAAW,GAAGH,CAAd;AACD,OAPD,MAOO,IAAIP,QAAQ,CAACiB,KAAT,CAAeC,GAAf,CAAmBH,KAAnB,KAA6BjB,IAAI,CAACiB,KAAD,CAArC,EAA8C;AACnDL,QAAAA,WAAW,GAAGH,CAAd;AACD,OAFM,MAEA,IAAIP,QAAQ,CAACmB,OAAT,CAAiBD,GAAjB,CAAqBH,KAArB,CAAJ,EAAiC;AACtCL,QAAAA,WAAW,GAAGH,CAAd;AACD,OAFM,MAEA,IAAIP,QAAQ,CAACoB,MAAT,CAAgBF,GAAhB,CAAoBH,KAApB,CAAJ,EAAgC;AACrCN,QAAAA,IAAI,CAACM,KAAL,GAAab,YAAY,CAACa,KAAD,CAAzB;AACAL,QAAAA,WAAW,GAAGH,CAAd;AACD,OAHM,MAGA,IAAIP,QAAQ,CAACqB,OAAT,CAAiBH,GAAjB,CAAqBH,KAArB,CAAJ,EAAiC;AACtCL,QAAAA,WAAW,GAAGH,CAAd;AACD,OAFM,MAEA,IAAIP,QAAQ,CAACsB,IAAT,CAAcJ,GAAd,CAAkBH,KAAlB,KAA4BjB,IAAI,CAACiB,KAAD,CAApC,EAA6C;AAClDL,QAAAA,WAAW,GAAGH,CAAd;AACAK,QAAAA,OAAO,GAAG,IAAV;AACD;AACF,KA3BD,MA2BO,IACLH,IAAI,CAACK,IAAL,KAAc,UAAd,IACAT,KAAK,CAACE,CAAC,GAAG,CAAL,CADL,IAEAF,KAAK,CAACE,CAAC,GAAG,CAAL,CAAL,CAAaO,IAAb,KAAsB,OAHjB,EAIL;AACAJ,MAAAA,WAAW,GAAGH,CAAd;AACD,KANM,MAMA,IAAIE,IAAI,CAACK,IAAL,KAAc,KAAd,IAAuBL,IAAI,CAACM,KAAL,KAAe,GAA1C,EAA+C;AACpDL,MAAAA,WAAW,GAAGH,CAAC,GAAG,CAAlB;AACA;AACD;AACF;;AAEDG,EAAAA,WAAW,IAAI,CAAf;AAEAC,EAAAA,MAAM,GAAGV,YAAY,CAACI,KAAK,CAACkB,KAAN,CAAYb,WAAZ,CAAD,EAA2BJ,IAA3B,CAArB;AAEA,SAAOD,KAAK,CAACkB,KAAN,CAAY,CAAZ,EAAeb,WAAf,EAA4Bc,MAA5B,CAAmCb,MAAnC,CAAP;AACD,CAnDD","sourcesContent":["'use strict';\nconst { unit } = require('postcss-value-parser');\nconst keywords = require('./keywords');\nconst minifyFamily = require('./minify-family');\nconst minifyWeight = require('./minify-weight');\n\nmodule.exports = function (nodes, opts) {\n  let i, max, node, familyStart, family;\n  let hasSize = false;\n\n  for (i = 0, max = nodes.length; i < max; i += 1) {\n    node = nodes[i];\n\n    if (node.type === 'word') {\n      if (hasSize) {\n        continue;\n      }\n\n      const value = node.value.toLowerCase();\n\n      if (\n        value === 'normal' ||\n        value === 'inherit' ||\n        value === 'initial' ||\n        value === 'unset'\n      ) {\n        familyStart = i;\n      } else if (keywords.style.has(value) || unit(value)) {\n        familyStart = i;\n      } else if (keywords.variant.has(value)) {\n        familyStart = i;\n      } else if (keywords.weight.has(value)) {\n        node.value = minifyWeight(value);\n        familyStart = i;\n      } else if (keywords.stretch.has(value)) {\n        familyStart = i;\n      } else if (keywords.size.has(value) || unit(value)) {\n        familyStart = i;\n        hasSize = true;\n      }\n    } else if (\n      node.type === 'function' &&\n      nodes[i + 1] &&\n      nodes[i + 1].type === 'space'\n    ) {\n      familyStart = i;\n    } else if (node.type === 'div' && node.value === '/') {\n      familyStart = i + 1;\n      break;\n    }\n  }\n\n  familyStart += 2;\n\n  family = minifyFamily(nodes.slice(familyStart), opts);\n\n  return nodes.slice(0, familyStart).concat(family);\n};\n"]},"metadata":{},"sourceType":"script"}