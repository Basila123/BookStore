{"ast":null,"code":"'use strict';\n\nexports.name = 'addClassesToSVGElement';\nexports.type = 'visitor';\nexports.active = false;\nexports.description = 'adds classnames to an outer <svg> element';\nvar ENOCLS = `Error in plugin \"addClassesToSVGElement\": absent parameters.\nIt should have a list of classes in \"classNames\" or one \"className\".\nConfig example:\n\nplugins: [\n  {\n    name: \"addClassesToSVGElement\",\n    params: {\n      className: \"mySvg\"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: \"addClassesToSVGElement\",\n    params: {\n      classNames: [\"mySvg\", \"size-big\"]\n    }\n  }\n]\n`;\n/**\n * Add classnames to an outer <svg> element. Example config:\n *\n * plugins: [\n *   {\n *     name: \"addClassesToSVGElement\",\n *     params: {\n *       className: \"mySvg\"\n *     }\n *   }\n * ]\n *\n * plugins: [\n *   {\n *     name: \"addClassesToSVGElement\",\n *     params: {\n *       classNames: [\"mySvg\", \"size-big\"]\n *     }\n *   }\n * ]\n *\n * @author April Arcus\n *\n * @type {import('../lib/types').Plugin<{\n *   className?: string,\n *   classNames?: Array<string>\n * }>}\n */\n\nexports.fn = (root, params) => {\n  if (!(Array.isArray(params.classNames) && params.classNames.some(String)) && !params.className) {\n    console.error(ENOCLS);\n    return null;\n  }\n\n  const classNames = params.classNames || [params.className];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          const classList = new Set(node.attributes.class == null ? null : node.attributes.class.split(' '));\n\n          for (const className of classNames) {\n            if (className != null) {\n              classList.add(className);\n            }\n          }\n\n          node.attributes.class = Array.from(classList).join(' ');\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/plugins/addClassesToSVGElement.js"],"names":["exports","name","type","active","description","ENOCLS","fn","root","params","Array","isArray","classNames","some","String","className","console","error","element","enter","node","parentNode","classList","Set","attributes","class","split","add","from","join"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,IAAR,GAAe,wBAAf;AACAD,OAAO,CAACE,IAAR,GAAe,SAAf;AACAF,OAAO,CAACG,MAAR,GAAiB,KAAjB;AACAH,OAAO,CAACI,WAAR,GAAsB,2CAAtB;AAEA,IAAIC,MAAM,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,OAAO,CAACM,EAAR,GAAa,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC7B,MACE,EAAEC,KAAK,CAACC,OAAN,CAAcF,MAAM,CAACG,UAArB,KAAoCH,MAAM,CAACG,UAAP,CAAkBC,IAAlB,CAAuBC,MAAvB,CAAtC,KACA,CAACL,MAAM,CAACM,SAFV,EAGE;AACAC,IAAAA,OAAO,CAACC,KAAR,CAAcX,MAAd;AACA,WAAO,IAAP;AACD;;AACD,QAAMM,UAAU,GAAGH,MAAM,CAACG,UAAP,IAAqB,CAACH,MAAM,CAACM,SAAR,CAAxC;AACA,SAAO;AACLG,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,UAAP,KAAsB;AAC3B,YAAID,IAAI,CAAClB,IAAL,KAAc,KAAd,IAAuBmB,UAAU,CAAClB,IAAX,KAAoB,MAA/C,EAAuD;AACrD,gBAAMmB,SAAS,GAAG,IAAIC,GAAJ,CAChBH,IAAI,CAACI,UAAL,CAAgBC,KAAhB,IAAyB,IAAzB,GACI,IADJ,GAEIL,IAAI,CAACI,UAAL,CAAgBC,KAAhB,CAAsBC,KAAtB,CAA4B,GAA5B,CAHY,CAAlB;;AAKA,eAAK,MAAMX,SAAX,IAAwBH,UAAxB,EAAoC;AAClC,gBAAIG,SAAS,IAAI,IAAjB,EAAuB;AACrBO,cAAAA,SAAS,CAACK,GAAV,CAAcZ,SAAd;AACD;AACF;;AACDK,UAAAA,IAAI,CAACI,UAAL,CAAgBC,KAAhB,GAAwBf,KAAK,CAACkB,IAAN,CAAWN,SAAX,EAAsBO,IAAtB,CAA2B,GAA3B,CAAxB;AACD;AACF;AAfM;AADJ,GAAP;AAmBD,CA5BD","sourcesContent":["'use strict';\n\nexports.name = 'addClassesToSVGElement';\nexports.type = 'visitor';\nexports.active = false;\nexports.description = 'adds classnames to an outer <svg> element';\n\nvar ENOCLS = `Error in plugin \"addClassesToSVGElement\": absent parameters.\nIt should have a list of classes in \"classNames\" or one \"className\".\nConfig example:\n\nplugins: [\n  {\n    name: \"addClassesToSVGElement\",\n    params: {\n      className: \"mySvg\"\n    }\n  }\n]\n\nplugins: [\n  {\n    name: \"addClassesToSVGElement\",\n    params: {\n      classNames: [\"mySvg\", \"size-big\"]\n    }\n  }\n]\n`;\n\n/**\n * Add classnames to an outer <svg> element. Example config:\n *\n * plugins: [\n *   {\n *     name: \"addClassesToSVGElement\",\n *     params: {\n *       className: \"mySvg\"\n *     }\n *   }\n * ]\n *\n * plugins: [\n *   {\n *     name: \"addClassesToSVGElement\",\n *     params: {\n *       classNames: [\"mySvg\", \"size-big\"]\n *     }\n *   }\n * ]\n *\n * @author April Arcus\n *\n * @type {import('../lib/types').Plugin<{\n *   className?: string,\n *   classNames?: Array<string>\n * }>}\n */\nexports.fn = (root, params) => {\n  if (\n    !(Array.isArray(params.classNames) && params.classNames.some(String)) &&\n    !params.className\n  ) {\n    console.error(ENOCLS);\n    return null;\n  }\n  const classNames = params.classNames || [params.className];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          const classList = new Set(\n            node.attributes.class == null\n              ? null\n              : node.attributes.class.split(' ')\n          );\n          for (const className of classNames) {\n            if (className != null) {\n              classList.add(className);\n            }\n          }\n          node.attributes.class = Array.from(classList).join(' ');\n        }\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}