{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst minifyWeight = require('./lib/minify-weight');\n\nconst minifyFamily = require('./lib/minify-family');\n\nconst minifyFont = require('./lib/minify-font');\n\nfunction hasVariableFunction(value) {\n  const lowerCasedValue = value.toLowerCase();\n  return lowerCasedValue.includes('var(') || lowerCasedValue.includes('env(');\n}\n\nfunction transform(prop, value, opts) {\n  let lowerCasedProp = prop.toLowerCase();\n\n  if (lowerCasedProp === 'font-weight' && !hasVariableFunction(value)) {\n    return minifyWeight(value);\n  } else if (lowerCasedProp === 'font-family' && !hasVariableFunction(value)) {\n    const tree = valueParser(value);\n    tree.nodes = minifyFamily(tree.nodes, opts);\n    return tree.toString();\n  } else if (lowerCasedProp === 'font') {\n    const tree = valueParser(value);\n    tree.nodes = minifyFont(tree.nodes, opts);\n    return tree.toString();\n  }\n\n  return value;\n}\n\nfunction pluginCreator(opts) {\n  opts = Object.assign({}, {\n    removeAfterKeyword: false,\n    removeDuplicates: true,\n    removeQuotes: true\n  }, opts);\n  return {\n    postcssPlugin: 'postcss-minify-font-values',\n\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/font/i, decl => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            const prop = decl.prop;\n            const cacheKey = `${prop}|${value}`;\n\n            if (cache.has(cacheKey)) {\n              decl.value = cache.get(cacheKey);\n              return;\n            }\n\n            const newValue = transform(prop, value, opts);\n            decl.value = newValue;\n            cache.set(cacheKey, newValue);\n          });\n        }\n\n      };\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-minify-font-values/src/index.js"],"names":["valueParser","require","minifyWeight","minifyFamily","minifyFont","hasVariableFunction","value","lowerCasedValue","toLowerCase","includes","transform","prop","opts","lowerCasedProp","tree","nodes","toString","pluginCreator","Object","assign","removeAfterKeyword","removeDuplicates","removeQuotes","postcssPlugin","prepare","cache","Map","OnceExit","css","walkDecls","decl","cacheKey","has","get","newValue","set","postcss","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst minifyWeight = require('./lib/minify-weight');\nconst minifyFamily = require('./lib/minify-family');\nconst minifyFont = require('./lib/minify-font');\n\nfunction hasVariableFunction(value) {\n  const lowerCasedValue = value.toLowerCase();\n\n  return lowerCasedValue.includes('var(') || lowerCasedValue.includes('env(');\n}\n\nfunction transform(prop, value, opts) {\n  let lowerCasedProp = prop.toLowerCase();\n\n  if (lowerCasedProp === 'font-weight' && !hasVariableFunction(value)) {\n    return minifyWeight(value);\n  } else if (lowerCasedProp === 'font-family' && !hasVariableFunction(value)) {\n    const tree = valueParser(value);\n\n    tree.nodes = minifyFamily(tree.nodes, opts);\n\n    return tree.toString();\n  } else if (lowerCasedProp === 'font') {\n    const tree = valueParser(value);\n\n    tree.nodes = minifyFont(tree.nodes, opts);\n\n    return tree.toString();\n  }\n\n  return value;\n}\n\nfunction pluginCreator(opts) {\n  opts = Object.assign(\n    {},\n    {\n      removeAfterKeyword: false,\n      removeDuplicates: true,\n      removeQuotes: true,\n    },\n    opts\n  );\n\n  return {\n    postcssPlugin: 'postcss-minify-font-values',\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/font/i, (decl) => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            const prop = decl.prop;\n\n            const cacheKey = `${prop}|${value}`;\n\n            if (cache.has(cacheKey)) {\n              decl.value = cache.get(cacheKey);\n\n              return;\n            }\n\n            const newValue = transform(prop, value, opts);\n\n            decl.value = newValue;\n            cache.set(cacheKey, newValue);\n          });\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}