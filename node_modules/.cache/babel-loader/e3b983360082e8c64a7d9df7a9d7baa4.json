{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\n\nconst error = {\n  message(_ref) {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;\n  },\n\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{limit: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode,\n      it\n    } = cxt;\n    const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n    cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AACA;;AACA;;AAEA,MAAMA,KAAK,GAA2B;AACpCC,SAAO,OAAsB;AAAA,QAArB;AAACC,aAAD;AAAUC;AAAV,KAAqB;AAC3B,UAAMC,IAAI,GAAGF,OAAO,KAAK,WAAZ,GAA0B,MAA1B,GAAmC,OAAhD;AACA,WAAO,kBAAG,iBAAiBE,IAAI,SAASD,UAAU,aAAlD;AACD,GAJmC;;AAKpCE,QAAM,EAAE;AAAA,QAAC;AAACF;AAAD,KAAD;AAAA,WAAkB,gBAAC,WAAWA,UAAU,GAAxC;AAAA;AAL4B,CAAtC;AAQA,MAAMG,GAAG,GAA0B;AACjCJ,SAAO,EAAE,CAAC,WAAD,EAAc,WAAd,CADwB;AAEjCK,MAAI,EAAE,QAF2B;AAGjCC,YAAU,EAAE,QAHqB;AAIjCC,OAAK,EAAE,IAJ0B;AAKjCT,OALiC;;AAMjCU,MAAI,CAACC,GAAD,EAAgB;AAClB,UAAM;AAACT,aAAD;AAAUU,UAAV;AAAgBT,gBAAhB;AAA4BU;AAA5B,QAAkCF,GAAxC;AACA,UAAMG,EAAE,GAAGZ,OAAO,KAAK,WAAZ,GAA0Ba,oBAAUC,EAApC,GAAyCD,oBAAUE,EAA9D;AACA,UAAMC,GAAG,GACPL,EAAE,CAACM,IAAH,CAAQC,OAAR,KAAoB,KAApB,GAA4B,gBAAC,GAAGR,IAAI,SAApC,GAAgD,gBAAC,GAAG,oBAAQD,GAAG,CAACU,GAAZ,EAAiBC,oBAAjB,CAA4B,IAAIV,IAAI,GAD1F;AAEAD,OAAG,CAACY,SAAJ,CAAc,gBAAC,GAAGL,GAAG,IAAIJ,EAAE,IAAIX,UAAU,EAAzC;AACD;;AAZgC,CAAnC;AAeAqB,kBAAelB,GAAf","names":["error","message","keyword","schemaCode","comp","params","def","type","schemaType","$data","code","cxt","data","it","op","codegen_1","GT","LT","len","opts","unicode","gen","ucs2length_1","fail$data","exports"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/ajv/lib/vocabularies/validation/limitLength.ts"],"sourcesContent":["import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport ucs2length from \"../../runtime/ucs2length\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} characters`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode, it} = cxt\n    const op = keyword === \"maxLength\" ? operators.GT : operators.LT\n    const len =\n      it.opts.unicode === false ? _`${data}.length` : _`${useFunc(cxt.gen, ucs2length)}(${data})`\n    cxt.fail$data(_`${len} ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}