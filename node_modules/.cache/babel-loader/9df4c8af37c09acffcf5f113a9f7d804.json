{"ast":null,"code":"'use strict';\n/**\n * @type {{[key:string]: {[key:string]: number}}}\n */\n\nconst conversions = {\n  // Absolute length units\n  px: {\n    px: 1,\n    cm: 96 / 2.54,\n    mm: 96 / 25.4,\n    q: 96 / 101.6,\n    in: 96,\n    pt: 96 / 72,\n    pc: 16\n  },\n  cm: {\n    px: 2.54 / 96,\n    cm: 1,\n    mm: 0.1,\n    q: 0.025,\n    in: 2.54,\n    pt: 2.54 / 72,\n    pc: 2.54 / 6\n  },\n  mm: {\n    px: 25.4 / 96,\n    cm: 10,\n    mm: 1,\n    q: 0.25,\n    in: 25.4,\n    pt: 25.4 / 72,\n    pc: 25.4 / 6\n  },\n  q: {\n    px: 101.6 / 96,\n    cm: 40,\n    mm: 4,\n    q: 1,\n    in: 101.6,\n    pt: 101.6 / 72,\n    pc: 101.6 / 6\n  },\n  in: {\n    px: 1 / 96,\n    cm: 1 / 2.54,\n    mm: 1 / 25.4,\n    q: 1 / 101.6,\n    in: 1,\n    pt: 1 / 72,\n    pc: 1 / 6\n  },\n  pt: {\n    px: 0.75,\n    cm: 72 / 2.54,\n    mm: 72 / 25.4,\n    q: 72 / 101.6,\n    in: 72,\n    pt: 1,\n    pc: 12\n  },\n  pc: {\n    px: 0.0625,\n    cm: 6 / 2.54,\n    mm: 6 / 25.4,\n    q: 6 / 101.6,\n    in: 6,\n    pt: 6 / 72,\n    pc: 1\n  },\n  // Angle units\n  deg: {\n    deg: 1,\n    grad: 0.9,\n    rad: 180 / Math.PI,\n    turn: 360\n  },\n  grad: {\n    deg: 400 / 360,\n    grad: 1,\n    rad: 200 / Math.PI,\n    turn: 400\n  },\n  rad: {\n    deg: Math.PI / 180,\n    grad: Math.PI / 200,\n    rad: 1,\n    turn: Math.PI * 2\n  },\n  turn: {\n    deg: 1 / 360,\n    grad: 0.0025,\n    rad: 0.5 / Math.PI,\n    turn: 1\n  },\n  // Duration units\n  s: {\n    s: 1,\n    ms: 0.001\n  },\n  ms: {\n    s: 1000,\n    ms: 1\n  },\n  // Frequency units\n  hz: {\n    hz: 1,\n    khz: 1000\n  },\n  khz: {\n    hz: 0.001,\n    khz: 1\n  },\n  // Resolution units\n  dpi: {\n    dpi: 1,\n    dpcm: 1 / 2.54,\n    dppx: 1 / 96\n  },\n  dpcm: {\n    dpi: 2.54,\n    dpcm: 1,\n    dppx: 2.54 / 96\n  },\n  dppx: {\n    dpi: 96,\n    dpcm: 96 / 2.54,\n    dppx: 1\n  }\n};\n/**\n * @param {number} value\n * @param {string} sourceUnit\n * @param {string} targetUnit\n * @param {number|false} precision\n */\n\nfunction convertUnit(value, sourceUnit, targetUnit, precision) {\n  const sourceUnitNormalized = sourceUnit.toLowerCase();\n  const targetUnitNormalized = targetUnit.toLowerCase();\n\n  if (!conversions[targetUnitNormalized]) {\n    throw new Error('Cannot convert to ' + targetUnit);\n  }\n\n  if (!conversions[targetUnitNormalized][sourceUnitNormalized]) {\n    throw new Error('Cannot convert from ' + sourceUnit + ' to ' + targetUnit);\n  }\n\n  const converted = conversions[targetUnitNormalized][sourceUnitNormalized] * value;\n\n  if (precision !== false) {\n    precision = Math.pow(10, Math.ceil(precision) || 5);\n    return Math.round(converted * precision) / precision;\n  }\n\n  return converted;\n}\n\nmodule.exports = convertUnit;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-calc/src/lib/convertUnit.js"],"names":["conversions","px","cm","mm","q","in","pt","pc","deg","grad","rad","Math","PI","turn","s","ms","hz","khz","dpi","dpcm","dppx","convertUnit","value","sourceUnit","targetUnit","precision","sourceUnitNormalized","toLowerCase","targetUnitNormalized","Error","converted","pow","ceil","round","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * @type {{[key:string]: {[key:string]: number}}}\n */\nconst conversions = {\n  // Absolute length units\n  px: {\n    px: 1,\n    cm: 96 / 2.54,\n    mm: 96 / 25.4,\n    q: 96 / 101.6,\n    in: 96,\n    pt: 96 / 72,\n    pc: 16,\n  },\n  cm: {\n    px: 2.54 / 96,\n    cm: 1,\n    mm: 0.1,\n    q: 0.025,\n    in: 2.54,\n    pt: 2.54 / 72,\n    pc: 2.54 / 6,\n  },\n  mm: {\n    px: 25.4 / 96,\n    cm: 10,\n    mm: 1,\n    q: 0.25,\n    in: 25.4,\n    pt: 25.4 / 72,\n    pc: 25.4 / 6,\n  },\n  q: {\n    px: 101.6 / 96,\n    cm: 40,\n    mm: 4,\n    q: 1,\n    in: 101.6,\n    pt: 101.6 / 72,\n    pc: 101.6 / 6,\n  },\n  in: {\n    px: 1 / 96,\n    cm: 1 / 2.54,\n    mm: 1 / 25.4,\n    q: 1 / 101.6,\n    in: 1,\n    pt: 1 / 72,\n    pc: 1 / 6,\n  },\n  pt: {\n    px: 0.75,\n    cm: 72 / 2.54,\n    mm: 72 / 25.4,\n    q: 72 / 101.6,\n    in: 72,\n    pt: 1,\n    pc: 12,\n  },\n  pc: {\n    px: 0.0625,\n    cm: 6 / 2.54,\n    mm: 6 / 25.4,\n    q: 6 / 101.6,\n    in: 6,\n    pt: 6 / 72,\n    pc: 1,\n  },\n  // Angle units\n  deg: {\n    deg: 1,\n    grad: 0.9,\n    rad: 180 / Math.PI,\n    turn: 360,\n  },\n  grad: {\n    deg: 400 / 360,\n    grad: 1,\n    rad: 200 / Math.PI,\n    turn: 400,\n  },\n  rad: {\n    deg: Math.PI / 180,\n    grad: Math.PI / 200,\n    rad: 1,\n    turn: Math.PI * 2,\n  },\n  turn: {\n    deg: 1 / 360,\n    grad: 0.0025,\n    rad: 0.5 / Math.PI,\n    turn: 1,\n  },\n  // Duration units\n  s: {\n    s: 1,\n    ms: 0.001,\n  },\n  ms: {\n    s: 1000,\n    ms: 1,\n  },\n  // Frequency units\n  hz: {\n    hz: 1,\n    khz: 1000,\n  },\n  khz: {\n    hz: 0.001,\n    khz: 1,\n  },\n  // Resolution units\n  dpi: {\n    dpi: 1,\n    dpcm: 1 / 2.54,\n    dppx: 1 / 96,\n  },\n  dpcm: {\n    dpi: 2.54,\n    dpcm: 1,\n    dppx: 2.54 / 96,\n  },\n  dppx: {\n    dpi: 96,\n    dpcm: 96 / 2.54,\n    dppx: 1,\n  },\n};\n/**\n * @param {number} value\n * @param {string} sourceUnit\n * @param {string} targetUnit\n * @param {number|false} precision\n */\nfunction convertUnit(value, sourceUnit, targetUnit, precision) {\n  const sourceUnitNormalized = sourceUnit.toLowerCase();\n  const targetUnitNormalized = targetUnit.toLowerCase();\n\n  if (!conversions[targetUnitNormalized]) {\n    throw new Error('Cannot convert to ' + targetUnit);\n  }\n\n  if (!conversions[targetUnitNormalized][sourceUnitNormalized]) {\n    throw new Error('Cannot convert from ' + sourceUnit + ' to ' + targetUnit);\n  }\n\n  const converted =\n    conversions[targetUnitNormalized][sourceUnitNormalized] * value;\n\n  if (precision !== false) {\n    precision = Math.pow(10, Math.ceil(precision) || 5);\n\n    return Math.round(converted * precision) / precision;\n  }\n\n  return converted;\n}\n\nmodule.exports = convertUnit;\n"]},"metadata":{},"sourceType":"script"}