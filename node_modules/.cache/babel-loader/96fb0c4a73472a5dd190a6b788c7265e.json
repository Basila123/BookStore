{"ast":null,"code":"\"use strict\";\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {import(\"source-map\").SourceMapGenerator} SourceMapGenerator */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/** @typedef {import(\"postcss\").ProcessOptions} ProcessOptions */\n\n/** @typedef {import(\"postcss\").Postcss} Postcss */\n\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(result);\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cssnanoMinify(input, sourceMap) {\n  let minimizerOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    preset: \"default\"\n  };\n\n  /**\n   * @template T\n   * @param {string} module\n   * @returns {Promise<T>}\n   */\n  const load = async module => {\n    let exports;\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      exports = require(module);\n      return exports;\n    } catch (requireError) {\n      let importESM;\n\n      try {\n        // eslint-disable-next-line no-new-func\n        importESM = new Function(\"id\", \"return import(id);\");\n      } catch (e) {\n        importESM = null;\n      }\n\n      if (\n      /** @type {Error & {code: string}} */\n      requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n        exports = await importESM(module);\n        return exports.default;\n      }\n\n      throw requireError;\n    }\n  };\n\n  const [[name, code]] = Object.entries(input);\n  /** @type {ProcessOptions} */\n\n  const postcssOptions = {\n    from: name,\n    ...minimizerOptions.processorOptions\n  };\n\n  if (typeof postcssOptions.parser === \"string\") {\n    try {\n      postcssOptions.parser = await load(postcssOptions.parser);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.parser}\" parser failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (typeof postcssOptions.stringifier === \"string\") {\n    try {\n      postcssOptions.stringifier = await load(postcssOptions.stringifier);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.stringifier}\" stringifier failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (typeof postcssOptions.syntax === \"string\") {\n    try {\n      postcssOptions.syntax = await load(postcssOptions.syntax);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.syntax}\" syntax failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (sourceMap) {\n    postcssOptions.map = {\n      annotation: false\n    };\n  }\n  /** @type {Postcss} */\n  // eslint-disable-next-line global-require\n\n\n  const postcss = require(\"postcss\").default; // @ts-ignore\n  // eslint-disable-next-line global-require\n\n\n  const cssnano = require(\"cssnano\"); // @ts-ignore\n  // Types are broken\n\n\n  const result = await postcss([cssnano(minimizerOptions)]).process(code, postcssOptions);\n  return {\n    code: result.css,\n    map: result.map ? result.map.toJSON() : // eslint-disable-next-line no-undefined\n    undefined,\n    warnings: result.warnings().map(String)\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cssoMinify(input, sourceMap, minimizerOptions) {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  const csso = require(\"csso\");\n\n  const [[filename, code]] = Object.entries(input);\n  const result = csso.minify(code, {\n    filename,\n    sourceMap: Boolean(sourceMap),\n    ...minimizerOptions\n  });\n  return {\n    code: result.css,\n    map: result.map ?\n    /** @type {SourceMapGenerator & { toJSON(): RawSourceMap }} */\n    result.map.toJSON() : // eslint-disable-next-line no-undefined\n    undefined\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cleanCssMinify(input, sourceMap, minimizerOptions) {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  const CleanCSS = require(\"clean-css\");\n\n  const [[name, code]] = Object.entries(input);\n  const result = await new CleanCSS({\n    sourceMap: Boolean(sourceMap),\n    ...minimizerOptions,\n    returnPromise: true\n  }).minify({\n    [name]: {\n      styles: code\n    }\n  });\n  const generatedSourceMap = result.sourceMap &&\n  /** @type {SourceMapGenerator & { toJSON(): RawSourceMap }} */\n  result.sourceMap.toJSON(); // workaround for source maps on windows\n\n  if (generatedSourceMap) {\n    // eslint-disable-next-line global-require\n    const isWindowsPathSep = require(\"path\").sep === \"\\\\\";\n    generatedSourceMap.sources = generatedSourceMap.sources.map(\n    /**\n     * @param {string} item\n     * @returns {string}\n     */\n    item => isWindowsPathSep ? item.replace(/\\\\/g, \"/\") : item);\n  }\n\n  return {\n    code: result.styles,\n    map: generatedSourceMap,\n    warnings: result.warnings\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = function () {\n    let esbuildOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      loader: \"css\",\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      return {\n        source: item.location && item.location.file,\n        // eslint-disable-next-line no-undefined\n        line: item.location && item.location.line ? item.location.line : undefined,\n        // eslint-disable-next-line no-undefined\n        column: item.location && item.location.column ? item.location.column : undefined,\n        plugin: item.pluginName,\n        message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n      };\n    }) : []\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function parcelCssMinify(input, sourceMap, minimizerOptions) {\n  const [[filename, code]] = Object.entries(input);\n  /**\n   * @param {Partial<import(\"@parcel/css\").TransformOptions>} [parcelCssOptions={}]\n   * @returns {import(\"@parcel/css\").TransformOptions}\n   */\n\n  const buildParcelCssOptions = function () {\n    let parcelCssOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      minify: true,\n      ...parcelCssOptions,\n      sourceMap: false,\n      filename,\n      code: Buffer.from(code)\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const parcelCss = require(\"@parcel/css\"); // Copy `esbuild` options\n\n\n  const parcelCssOptions = buildParcelCssOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    parcelCssOptions.sourceMap = true;\n  }\n\n  const result = await parcelCss.transform(parcelCssOptions);\n  return {\n    code: result.code.toString(),\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map.toString()) : undefined\n  };\n}\n\nmodule.exports = {\n  throttleAll,\n  cssnanoMinify,\n  cssoMinify,\n  cleanCssMinify,\n  esbuildMinify,\n  parcelCssMinify\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/dist/utils.js"],"names":["notSettled","Symbol","throttleAll","limit","tasks","Number","isInteger","TypeError","Array","isArray","every","task","Promise","resolve","reject","result","length","fill","entries","next","done","value","isLast","includes","index","onFulfilled","x","then","forEach","cssnanoMinify","input","sourceMap","minimizerOptions","preset","load","module","exports","require","requireError","importESM","Function","e","code","default","name","Object","postcssOptions","from","processorOptions","parser","error","Error","message","stringifier","syntax","map","annotation","postcss","cssnano","process","css","toJSON","undefined","warnings","String","cssoMinify","csso","filename","minify","Boolean","cleanCssMinify","CleanCSS","returnPromise","styles","generatedSourceMap","isWindowsPathSep","sep","sources","item","replace","esbuildMinify","buildEsbuildOptions","esbuildOptions","loader","legalComments","sourcemap","esbuild","sourcesContent","sourcefile","transform","JSON","parse","source","location","file","line","column","plugin","pluginName","text","detail","notes","note","suggestion","lineText","join","parcelCssMinify","buildParcelCssOptions","parcelCssOptions","Buffer","parcelCss","toString"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/** @typedef {import(\"./index.js\").Input} Input */\n\n/** @typedef {import(\"source-map\").RawSourceMap} RawSourceMap */\n\n/** @typedef {import(\"source-map\").SourceMapGenerator} SourceMapGenerator */\n\n/** @typedef {import(\"./index.js\").MinimizedResult} MinimizedResult */\n\n/** @typedef {import(\"./index.js\").CustomOptions} CustomOptions */\n\n/** @typedef {import(\"postcss\").ProcessOptions} ProcessOptions */\n\n/** @typedef {import(\"postcss\").Postcss} Postcss */\nconst notSettled = Symbol(`not-settled`);\n/**\n * @template T\n * @typedef {() => Promise<T>} Task\n */\n\n/**\n * Run tasks with limited concurency.\n * @template T\n * @param {number} limit - Limit of tasks that run at once.\n * @param {Task<T>[]} tasks - List of tasks to run.\n * @returns {Promise<T[]>} A promise that fulfills to an array of the results\n */\n\nfunction throttleAll(limit, tasks) {\n  if (!Number.isInteger(limit) || limit < 1) {\n    throw new TypeError(`Expected \\`limit\\` to be a finite number > 0, got \\`${limit}\\` (${typeof limit})`);\n  }\n\n  if (!Array.isArray(tasks) || !tasks.every(task => typeof task === `function`)) {\n    throw new TypeError(`Expected \\`tasks\\` to be a list of functions returning a promise`);\n  }\n\n  return new Promise((resolve, reject) => {\n    const result = Array(tasks.length).fill(notSettled);\n    const entries = tasks.entries();\n\n    const next = () => {\n      const {\n        done,\n        value\n      } = entries.next();\n\n      if (done) {\n        const isLast = !result.includes(notSettled);\n        if (isLast) resolve(result);\n        return;\n      }\n\n      const [index, task] = value;\n      /**\n       * @param {T} x\n       */\n\n      const onFulfilled = x => {\n        result[index] = x;\n        next();\n      };\n\n      task().then(onFulfilled, reject);\n    };\n\n    Array(limit).fill(0).forEach(next);\n  });\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cssnanoMinify(input, sourceMap, minimizerOptions = {\n  preset: \"default\"\n}) {\n  /**\n   * @template T\n   * @param {string} module\n   * @returns {Promise<T>}\n   */\n  const load = async module => {\n    let exports;\n\n    try {\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      exports = require(module);\n      return exports;\n    } catch (requireError) {\n      let importESM;\n\n      try {\n        // eslint-disable-next-line no-new-func\n        importESM = new Function(\"id\", \"return import(id);\");\n      } catch (e) {\n        importESM = null;\n      }\n\n      if (\n      /** @type {Error & {code: string}} */\n      requireError.code === \"ERR_REQUIRE_ESM\" && importESM) {\n        exports = await importESM(module);\n        return exports.default;\n      }\n\n      throw requireError;\n    }\n  };\n\n  const [[name, code]] = Object.entries(input);\n  /** @type {ProcessOptions} */\n\n  const postcssOptions = {\n    from: name,\n    ...minimizerOptions.processorOptions\n  };\n\n  if (typeof postcssOptions.parser === \"string\") {\n    try {\n      postcssOptions.parser = await load(postcssOptions.parser);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.parser}\" parser failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (typeof postcssOptions.stringifier === \"string\") {\n    try {\n      postcssOptions.stringifier = await load(postcssOptions.stringifier);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.stringifier}\" stringifier failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (typeof postcssOptions.syntax === \"string\") {\n    try {\n      postcssOptions.syntax = await load(postcssOptions.syntax);\n    } catch (error) {\n      throw new Error(`Loading PostCSS \"${postcssOptions.syntax}\" syntax failed: ${\n      /** @type {Error} */\n      error.message}\\n\\n(@${name})`);\n    }\n  }\n\n  if (sourceMap) {\n    postcssOptions.map = {\n      annotation: false\n    };\n  }\n  /** @type {Postcss} */\n  // eslint-disable-next-line global-require\n\n\n  const postcss = require(\"postcss\").default; // @ts-ignore\n  // eslint-disable-next-line global-require\n\n\n  const cssnano = require(\"cssnano\"); // @ts-ignore\n  // Types are broken\n\n\n  const result = await postcss([cssnano(minimizerOptions)]).process(code, postcssOptions);\n  return {\n    code: result.css,\n    map: result.map ? result.map.toJSON() : // eslint-disable-next-line no-undefined\n    undefined,\n    warnings: result.warnings().map(String)\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cssoMinify(input, sourceMap, minimizerOptions) {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  const csso = require(\"csso\");\n\n  const [[filename, code]] = Object.entries(input);\n  const result = csso.minify(code, {\n    filename,\n    sourceMap: Boolean(sourceMap),\n    ...minimizerOptions\n  });\n  return {\n    code: result.css,\n    map: result.map ?\n    /** @type {SourceMapGenerator & { toJSON(): RawSourceMap }} */\n    result.map.toJSON() : // eslint-disable-next-line no-undefined\n    undefined\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function cleanCssMinify(input, sourceMap, minimizerOptions) {\n  // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n  const CleanCSS = require(\"clean-css\");\n\n  const [[name, code]] = Object.entries(input);\n  const result = await new CleanCSS({\n    sourceMap: Boolean(sourceMap),\n    ...minimizerOptions,\n    returnPromise: true\n  }).minify({\n    [name]: {\n      styles: code\n    }\n  });\n  const generatedSourceMap = result.sourceMap &&\n  /** @type {SourceMapGenerator & { toJSON(): RawSourceMap }} */\n  result.sourceMap.toJSON(); // workaround for source maps on windows\n\n  if (generatedSourceMap) {\n    // eslint-disable-next-line global-require\n    const isWindowsPathSep = require(\"path\").sep === \"\\\\\";\n    generatedSourceMap.sources = generatedSourceMap.sources.map(\n    /**\n     * @param {string} item\n     * @returns {string}\n     */\n    item => isWindowsPathSep ? item.replace(/\\\\/g, \"/\") : item);\n  }\n\n  return {\n    code: result.styles,\n    map: generatedSourceMap,\n    warnings: result.warnings\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function esbuildMinify(input, sourceMap, minimizerOptions) {\n  /**\n   * @param {import(\"esbuild\").TransformOptions} [esbuildOptions={}]\n   * @returns {import(\"esbuild\").TransformOptions}\n   */\n  const buildEsbuildOptions = (esbuildOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      loader: \"css\",\n      minify: true,\n      legalComments: \"inline\",\n      ...esbuildOptions,\n      sourcemap: false\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const esbuild = require(\"esbuild\"); // Copy `esbuild` options\n\n\n  const esbuildOptions = buildEsbuildOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    esbuildOptions.sourcemap = true;\n    esbuildOptions.sourcesContent = false;\n  }\n\n  const [[filename, code]] = Object.entries(input);\n  esbuildOptions.sourcefile = filename;\n  const result = await esbuild.transform(code, esbuildOptions);\n  return {\n    code: result.code,\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map) : undefined,\n    warnings: result.warnings.length > 0 ? result.warnings.map(item => {\n      return {\n        source: item.location && item.location.file,\n        // eslint-disable-next-line no-undefined\n        line: item.location && item.location.line ? item.location.line : undefined,\n        // eslint-disable-next-line no-undefined\n        column: item.location && item.location.column ? item.location.column : undefined,\n        plugin: item.pluginName,\n        message: `${item.text}${item.detail ? `\\nDetails:\\n${item.detail}` : \"\"}${item.notes.length > 0 ? `\\n\\nNotes:\\n${item.notes.map(note => `${note.location ? `[${note.location.file}:${note.location.line}:${note.location.column}] ` : \"\"}${note.text}${note.location ? `\\nSuggestion: ${note.location.suggestion}` : \"\"}${note.location ? `\\nLine text:\\n${note.location.lineText}\\n` : \"\"}`).join(\"\\n\")}` : \"\"}`\n      };\n    }) : []\n  };\n}\n/* istanbul ignore next */\n\n/**\n * @param {Input} input\n * @param {RawSourceMap | undefined} sourceMap\n * @param {CustomOptions} minimizerOptions\n * @return {Promise<MinimizedResult>}\n */\n\n\nasync function parcelCssMinify(input, sourceMap, minimizerOptions) {\n  const [[filename, code]] = Object.entries(input);\n  /**\n   * @param {Partial<import(\"@parcel/css\").TransformOptions>} [parcelCssOptions={}]\n   * @returns {import(\"@parcel/css\").TransformOptions}\n   */\n\n  const buildParcelCssOptions = (parcelCssOptions = {}) => {\n    // Need deep copy objects to avoid https://github.com/terser/terser/issues/366\n    return {\n      minify: true,\n      ...parcelCssOptions,\n      sourceMap: false,\n      filename,\n      code: Buffer.from(code)\n    };\n  }; // eslint-disable-next-line import/no-extraneous-dependencies, global-require\n\n\n  const parcelCss = require(\"@parcel/css\"); // Copy `esbuild` options\n\n\n  const parcelCssOptions = buildParcelCssOptions(minimizerOptions); // Let `esbuild` generate a SourceMap\n\n  if (sourceMap) {\n    parcelCssOptions.sourceMap = true;\n  }\n\n  const result = await parcelCss.transform(parcelCssOptions);\n  return {\n    code: result.code.toString(),\n    // eslint-disable-next-line no-undefined\n    map: result.map ? JSON.parse(result.map.toString()) : undefined\n  };\n}\n\nmodule.exports = {\n  throttleAll,\n  cssnanoMinify,\n  cssoMinify,\n  cleanCssMinify,\n  esbuildMinify,\n  parcelCssMinify\n};"]},"metadata":{},"sourceType":"script"}