{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst ops = codegen_1.operators;\nconst KWDs = {\n  maximum: {\n    okStr: \"<=\",\n    ok: ops.LTE,\n    fail: ops.GT\n  },\n  minimum: {\n    okStr: \">=\",\n    ok: ops.GTE,\n    fail: ops.LT\n  },\n  exclusiveMaximum: {\n    okStr: \"<\",\n    ok: ops.LT,\n    fail: ops.GTE\n  },\n  exclusiveMinimum: {\n    okStr: \">\",\n    ok: ops.GT,\n    fail: ops.LTE\n  }\n};\nconst error = {\n  message: _ref => {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`;\n  },\n  params: _ref2 => {\n    let {\n      keyword,\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode\n    } = cxt;\n    cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AAEA,MAAMA,GAAG,GAAGC,mBAAZ;AAMA,MAAMC,IAAI,GAA4D;AACpEC,SAAO,EAAE;AAACC,SAAK,EAAE,IAAR;AAAcC,MAAE,EAAEL,GAAG,CAACM,GAAtB;AAA2BC,QAAI,EAAEP,GAAG,CAACQ;AAArC,GAD2D;AAEpEC,SAAO,EAAE;AAACL,SAAK,EAAE,IAAR;AAAcC,MAAE,EAAEL,GAAG,CAACU,GAAtB;AAA2BH,QAAI,EAAEP,GAAG,CAACW;AAArC,GAF2D;AAGpEC,kBAAgB,EAAE;AAACR,SAAK,EAAE,GAAR;AAAaC,MAAE,EAAEL,GAAG,CAACW,EAArB;AAAyBJ,QAAI,EAAEP,GAAG,CAACU;AAAnC,GAHkD;AAIpEG,kBAAgB,EAAE;AAACT,SAAK,EAAE,GAAR;AAAaC,MAAE,EAAEL,GAAG,CAACQ,EAArB;AAAyBD,QAAI,EAAEP,GAAG,CAACM;AAAnC;AAJkD,CAAtE;AAaA,MAAMQ,KAAK,GAA2B;AACpCC,SAAO,EAAE;AAAA,QAAC;AAACC,aAAD;AAAUC;AAAV,KAAD;AAAA,WAA2B,kBAAG,WAAWf,IAAI,CAACc,OAAD,CAAJ,CAAqBZ,KAAK,IAAIa,UAAU,EAAjF;AAAA,GAD2B;AAEpCC,QAAM,EAAE;AAAA,QAAC;AAACF,aAAD;AAAUC;AAAV,KAAD;AAAA,WACN,gBAAC,gBAAgBf,IAAI,CAACc,OAAD,CAAJ,CAAqBZ,KAAK,YAAYa,UAAU,GAD3D;AAAA;AAF4B,CAAtC;AAMA,MAAME,GAAG,GAA0B;AACjCH,SAAO,EAAEI,MAAM,CAACC,IAAP,CAAYnB,IAAZ,CADwB;AAEjCoB,MAAI,EAAE,QAF2B;AAGjCC,YAAU,EAAE,QAHqB;AAIjCC,OAAK,EAAE,IAJ0B;AAKjCV,OALiC;;AAMjCW,MAAI,CAACC,GAAD,EAAgB;AAClB,UAAM;AAACV,aAAD;AAAUW,UAAV;AAAgBV;AAAhB,QAA8BS,GAApC;AACAA,OAAG,CAACE,SAAJ,CAAc,gBAAC,GAAGD,IAAI,IAAIzB,IAAI,CAACc,OAAD,CAAJ,CAAqBT,IAAI,IAAIU,UAAU,aAAaU,IAAI,GAAlF;AACD;;AATgC,CAAnC;AAYAE,kBAAeV,GAAf","names":["ops","codegen_1","KWDs","maximum","okStr","ok","LTE","fail","GT","minimum","GTE","LT","exclusiveMaximum","exclusiveMinimum","error","message","keyword","schemaCode","params","def","Object","keys","type","schemaType","$data","code","cxt","data","fail$data","exports"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/ajv/lib/vocabularies/validation/limitNumber.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators, Code} from \"../../compile/codegen\"\n\nconst ops = operators\n\ntype Kwd = \"maximum\" | \"minimum\" | \"exclusiveMaximum\" | \"exclusiveMinimum\"\n\ntype Comparison = \"<=\" | \">=\" | \"<\" | \">\"\n\nconst KWDs: {[K in Kwd]: {okStr: Comparison; ok: Code; fail: Code}} = {\n  maximum: {okStr: \"<=\", ok: ops.LTE, fail: ops.GT},\n  minimum: {okStr: \">=\", ok: ops.GTE, fail: ops.LT},\n  exclusiveMaximum: {okStr: \"<\", ok: ops.LT, fail: ops.GTE},\n  exclusiveMinimum: {okStr: \">\", ok: ops.GT, fail: ops.LTE},\n}\n\nexport type LimitNumberError = ErrorObject<\n  Kwd,\n  {limit: number; comparison: Comparison},\n  number | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: ({keyword, schemaCode}) => str`must be ${KWDs[keyword as Kwd].okStr} ${schemaCode}`,\n  params: ({keyword, schemaCode}) =>\n    _`{comparison: ${KWDs[keyword as Kwd].okStr}, limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    cxt.fail$data(_`${data} ${KWDs[keyword as Kwd].fail} ${schemaCode} || isNaN(${data})`)\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}