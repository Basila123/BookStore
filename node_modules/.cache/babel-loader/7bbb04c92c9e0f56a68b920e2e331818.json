{"ast":null,"code":"'use strict';\n\nconst {\n  detachNodeFromParent\n} = require('../lib/xast.js');\n\nexports.name = 'removeElementsByAttr';\nexports.type = 'visitor';\nexports.active = false;\nexports.description = 'removes arbitrary elements by ID or className (disabled by default)';\n/**\n * Remove arbitrary SVG elements by ID or className.\n *\n * @example id\n *     > single: remove element with ID of `elementID`\n *     ---\n *     removeElementsByAttr:\n *       id: 'elementID'\n *\n *     > list: remove multiple elements by ID\n *     ---\n *     removeElementsByAttr:\n *       id:\n *         - 'elementID'\n *         - 'anotherID'\n *\n * @example class\n *     > single: remove all elements with class of `elementClass`\n *     ---\n *     removeElementsByAttr:\n *       class: 'elementClass'\n *\n *     > list: remove all elements with class of `elementClass` or `anotherClass`\n *     ---\n *     removeElementsByAttr:\n *       class:\n *         - 'elementClass'\n *         - 'anotherClass'\n *\n * @author Eli Dupuis (@elidupuis)\n *\n * @type {import('../lib/types').Plugin<{\n *   id?: string | Array<string>,\n *   class?: string | Array<string>\n * }>}\n */\n\nexports.fn = (root, params) => {\n  const ids = params.id == null ? [] : Array.isArray(params.id) ? params.id : [params.id];\n  const classes = params.class == null ? [] : Array.isArray(params.class) ? params.class : [params.class];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // remove element if it's `id` matches configured `id` params\n        if (node.attributes.id != null && ids.length !== 0) {\n          if (ids.includes(node.attributes.id)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        } // remove element if it's `class` contains any of the configured `class` params\n\n\n        if (node.attributes.class && classes.length !== 0) {\n          const classList = node.attributes.class.split(' ');\n\n          for (const item of classes) {\n            if (classList.includes(item)) {\n              detachNodeFromParent(node, parentNode);\n              break;\n            }\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/plugins/removeElementsByAttr.js"],"names":["detachNodeFromParent","require","exports","name","type","active","description","fn","root","params","ids","id","Array","isArray","classes","class","element","enter","node","parentNode","attributes","length","includes","classList","split","item"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,gBAAD,CAAxC;;AAEAC,OAAO,CAACC,IAAR,GAAe,sBAAf;AACAD,OAAO,CAACE,IAAR,GAAe,SAAf;AACAF,OAAO,CAACG,MAAR,GAAiB,KAAjB;AACAH,OAAO,CAACI,WAAR,GACE,qEADF;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,OAAO,CAACK,EAAR,GAAa,CAACC,IAAD,EAAOC,MAAP,KAAkB;AAC7B,QAAMC,GAAG,GACPD,MAAM,CAACE,EAAP,IAAa,IAAb,GAAoB,EAApB,GAAyBC,KAAK,CAACC,OAAN,CAAcJ,MAAM,CAACE,EAArB,IAA2BF,MAAM,CAACE,EAAlC,GAAuC,CAACF,MAAM,CAACE,EAAR,CADlE;AAEA,QAAMG,OAAO,GACXL,MAAM,CAACM,KAAP,IAAgB,IAAhB,GACI,EADJ,GAEIH,KAAK,CAACC,OAAN,CAAcJ,MAAM,CAACM,KAArB,IACAN,MAAM,CAACM,KADP,GAEA,CAACN,MAAM,CAACM,KAAR,CALN;AAMA,SAAO;AACLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,UAAP,KAAsB;AAC3B;AACA,YAAID,IAAI,CAACE,UAAL,CAAgBT,EAAhB,IAAsB,IAAtB,IAA8BD,GAAG,CAACW,MAAJ,KAAe,CAAjD,EAAoD;AAClD,cAAIX,GAAG,CAACY,QAAJ,CAAaJ,IAAI,CAACE,UAAL,CAAgBT,EAA7B,CAAJ,EAAsC;AACpCX,YAAAA,oBAAoB,CAACkB,IAAD,EAAOC,UAAP,CAApB;AACD;AACF,SAN0B,CAO3B;;;AACA,YAAID,IAAI,CAACE,UAAL,CAAgBL,KAAhB,IAAyBD,OAAO,CAACO,MAAR,KAAmB,CAAhD,EAAmD;AACjD,gBAAME,SAAS,GAAGL,IAAI,CAACE,UAAL,CAAgBL,KAAhB,CAAsBS,KAAtB,CAA4B,GAA5B,CAAlB;;AACA,eAAK,MAAMC,IAAX,IAAmBX,OAAnB,EAA4B;AAC1B,gBAAIS,SAAS,CAACD,QAAV,CAAmBG,IAAnB,CAAJ,EAA8B;AAC5BzB,cAAAA,oBAAoB,CAACkB,IAAD,EAAOC,UAAP,CAApB;AACA;AACD;AACF;AACF;AACF;AAlBM;AADJ,GAAP;AAsBD,CA/BD","sourcesContent":["'use strict';\n\nconst { detachNodeFromParent } = require('../lib/xast.js');\n\nexports.name = 'removeElementsByAttr';\nexports.type = 'visitor';\nexports.active = false;\nexports.description =\n  'removes arbitrary elements by ID or className (disabled by default)';\n\n/**\n * Remove arbitrary SVG elements by ID or className.\n *\n * @example id\n *     > single: remove element with ID of `elementID`\n *     ---\n *     removeElementsByAttr:\n *       id: 'elementID'\n *\n *     > list: remove multiple elements by ID\n *     ---\n *     removeElementsByAttr:\n *       id:\n *         - 'elementID'\n *         - 'anotherID'\n *\n * @example class\n *     > single: remove all elements with class of `elementClass`\n *     ---\n *     removeElementsByAttr:\n *       class: 'elementClass'\n *\n *     > list: remove all elements with class of `elementClass` or `anotherClass`\n *     ---\n *     removeElementsByAttr:\n *       class:\n *         - 'elementClass'\n *         - 'anotherClass'\n *\n * @author Eli Dupuis (@elidupuis)\n *\n * @type {import('../lib/types').Plugin<{\n *   id?: string | Array<string>,\n *   class?: string | Array<string>\n * }>}\n */\nexports.fn = (root, params) => {\n  const ids =\n    params.id == null ? [] : Array.isArray(params.id) ? params.id : [params.id];\n  const classes =\n    params.class == null\n      ? []\n      : Array.isArray(params.class)\n      ? params.class\n      : [params.class];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // remove element if it's `id` matches configured `id` params\n        if (node.attributes.id != null && ids.length !== 0) {\n          if (ids.includes(node.attributes.id)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n        // remove element if it's `class` contains any of the configured `class` params\n        if (node.attributes.class && classes.length !== 0) {\n          const classList = node.attributes.class.split(' ');\n          for (const item of classes) {\n            if (classList.includes(item)) {\n              detachNodeFromParent(node, parentNode);\n              break;\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}