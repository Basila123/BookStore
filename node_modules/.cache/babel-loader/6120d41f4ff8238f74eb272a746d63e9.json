{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst equal_1 = require(\"../../runtime/equal\");\n\nconst error = {\n  message: \"must be equal to constant\",\n  params: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1._)`{allowedValue: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: \"const\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schemaCode,\n      schema\n    } = cxt;\n\n    if ($data || schema && typeof schema == \"object\") {\n      cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);\n    } else {\n      cxt.fail((0, codegen_1._)`${schema} !== ${data}`);\n    }\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AACA;;AACA;;AAIA,MAAMA,KAAK,GAA2B;AACpCC,SAAO,EAAE,2BAD2B;AAEpCC,QAAM,EAAE;AAAA,QAAC;AAACC;AAAD,KAAD;AAAA,WAAkB,gBAAC,kBAAkBA,UAAU,GAA/C;AAAA;AAF4B,CAAtC;AAKA,MAAMC,GAAG,GAA0B;AACjCC,SAAO,EAAE,OADwB;AAEjCC,OAAK,EAAE,IAF0B;AAGjCN,OAHiC;;AAIjCO,MAAI,CAACC,GAAD,EAAgB;AAClB,UAAM;AAACC,SAAD;AAAMC,UAAN;AAAYJ,WAAZ;AAAmBH,gBAAnB;AAA+BQ;AAA/B,QAAyCH,GAA/C;;AACA,QAAIF,KAAK,IAAKK,MAAM,IAAI,OAAOA,MAAP,IAAiB,QAAzC,EAAoD;AAClDH,SAAG,CAACI,SAAJ,CAAc,gBAAC,IAAI,oBAAQH,GAAR,EAAaI,eAAb,CAAmB,IAAIH,IAAI,KAAKP,UAAU,GAA7D;AACD,KAFD,MAEO;AACLK,SAAG,CAACM,IAAJ,CAAS,gBAAC,GAAGH,MAAM,QAAQD,IAAI,EAA/B;AACD;AACF;;AAXgC,CAAnC;AAcAK,kBAAeX,GAAf","names":["error","message","params","schemaCode","def","keyword","$data","code","cxt","gen","data","schema","fail$data","equal_1","fail","exports"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/ajv-formats/node_modules/ajv/lib/vocabularies/validation/const.ts"],"sourcesContent":["import type {CodeKeywordDefinition, ErrorObject, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_} from \"../../compile/codegen\"\nimport {useFunc} from \"../../compile/util\"\nimport equal from \"../../runtime/equal\"\n\nexport type ConstError = ErrorObject<\"const\", {allowedValue: any}>\n\nconst error: KeywordErrorDefinition = {\n  message: \"must be equal to constant\",\n  params: ({schemaCode}) => _`{allowedValue: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"const\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {gen, data, $data, schemaCode, schema} = cxt\n    if ($data || (schema && typeof schema == \"object\")) {\n      cxt.fail$data(_`!${useFunc(gen, equal)}(${data}, ${schemaCode})`)\n    } else {\n      cxt.fail(_`${schema} !== ${data}`)\n    }\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}