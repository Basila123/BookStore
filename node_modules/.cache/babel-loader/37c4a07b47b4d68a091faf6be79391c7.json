{"ast":null,"code":"'use strict';\n\nconst charset = 'charset'; // eslint-disable-next-line no-control-regex\n\nconst nonAscii = /[^\\x00-\\x7F]/;\n\nfunction pluginCreator() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    postcssPlugin: 'postcss-normalize-' + charset,\n\n    OnceExit(css, _ref) {\n      let {\n        AtRule\n      } = _ref;\n      let charsetRule;\n      let nonAsciiNode;\n      css.walk(node => {\n        if (node.type === 'atrule' && node.name === charset) {\n          if (!charsetRule) {\n            charsetRule = node;\n          }\n\n          node.remove();\n        } else if (!nonAsciiNode && node.parent === css && nonAscii.test(node.toString())) {\n          nonAsciiNode = node;\n        }\n      });\n\n      if (nonAsciiNode) {\n        if (!charsetRule && opts.add !== false) {\n          charsetRule = new AtRule({\n            name: charset,\n            params: '\"utf-8\"'\n          });\n        }\n\n        if (charsetRule) {\n          charsetRule.source = nonAsciiNode.source;\n          css.prepend(charsetRule);\n        }\n      }\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-normalize-charset/src/index.js"],"names":["charset","nonAscii","pluginCreator","opts","postcssPlugin","OnceExit","css","AtRule","charsetRule","nonAsciiNode","walk","node","type","name","remove","parent","test","toString","add","params","source","prepend","postcss","module","exports"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAG,SAAhB,C,CACA;;AACA,MAAMC,QAAQ,GAAG,cAAjB;;AAEA,SAASC,aAAT,GAAkC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AAChC,SAAO;AACLC,IAAAA,aAAa,EAAE,uBAAuBJ,OADjC;;AAGLK,IAAAA,QAAQ,CAACC,GAAD,QAAkB;AAAA,UAAZ;AAAEC,QAAAA;AAAF,OAAY;AACxB,UAAIC,WAAJ;AACA,UAAIC,YAAJ;AAEAH,MAAAA,GAAG,CAACI,IAAJ,CAAUC,IAAD,IAAU;AACjB,YAAIA,IAAI,CAACC,IAAL,KAAc,QAAd,IAA0BD,IAAI,CAACE,IAAL,KAAcb,OAA5C,EAAqD;AACnD,cAAI,CAACQ,WAAL,EAAkB;AAChBA,YAAAA,WAAW,GAAGG,IAAd;AACD;;AACDA,UAAAA,IAAI,CAACG,MAAL;AACD,SALD,MAKO,IACL,CAACL,YAAD,IACAE,IAAI,CAACI,MAAL,KAAgBT,GADhB,IAEAL,QAAQ,CAACe,IAAT,CAAcL,IAAI,CAACM,QAAL,EAAd,CAHK,EAIL;AACAR,UAAAA,YAAY,GAAGE,IAAf;AACD;AACF,OAbD;;AAeA,UAAIF,YAAJ,EAAkB;AAChB,YAAI,CAACD,WAAD,IAAgBL,IAAI,CAACe,GAAL,KAAa,KAAjC,EAAwC;AACtCV,UAAAA,WAAW,GAAG,IAAID,MAAJ,CAAW;AACvBM,YAAAA,IAAI,EAAEb,OADiB;AAEvBmB,YAAAA,MAAM,EAAE;AAFe,WAAX,CAAd;AAID;;AACD,YAAIX,WAAJ,EAAiB;AACfA,UAAAA,WAAW,CAACY,MAAZ,GAAqBX,YAAY,CAACW,MAAlC;AACAd,UAAAA,GAAG,CAACe,OAAJ,CAAYb,WAAZ;AACD;AACF;AACF;;AAlCI,GAAP;AAoCD;;AAEDN,aAAa,CAACoB,OAAd,GAAwB,IAAxB;AACAC,MAAM,CAACC,OAAP,GAAiBtB,aAAjB","sourcesContent":["'use strict';\nconst charset = 'charset';\n// eslint-disable-next-line no-control-regex\nconst nonAscii = /[^\\x00-\\x7F]/;\n\nfunction pluginCreator(opts = {}) {\n  return {\n    postcssPlugin: 'postcss-normalize-' + charset,\n\n    OnceExit(css, { AtRule }) {\n      let charsetRule;\n      let nonAsciiNode;\n\n      css.walk((node) => {\n        if (node.type === 'atrule' && node.name === charset) {\n          if (!charsetRule) {\n            charsetRule = node;\n          }\n          node.remove();\n        } else if (\n          !nonAsciiNode &&\n          node.parent === css &&\n          nonAscii.test(node.toString())\n        ) {\n          nonAsciiNode = node;\n        }\n      });\n\n      if (nonAsciiNode) {\n        if (!charsetRule && opts.add !== false) {\n          charsetRule = new AtRule({\n            name: charset,\n            params: '\"utf-8\"',\n          });\n        }\n        if (charsetRule) {\n          charsetRule.source = nonAsciiNode.source;\n          css.prepend(charsetRule);\n        }\n      }\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}