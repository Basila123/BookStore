{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n * @typedef {import('../lib/types').XastParent} XastParent\n * @typedef {import('../lib/types').XastNode} XastNode\n */\n\nconst JSAPI = require('../lib/svgo/jsAPI.js');\n\nexports.type = 'visitor';\nexports.name = 'reusePaths';\nexports.active = false;\nexports.description = 'Finds <path> elements with the same d, fill, and ' + 'stroke, and converts them to <use> elements ' + 'referencing a single <path> def.';\n/**\n * Finds <path> elements with the same d, fill, and stroke, and converts them to\n * <use> elements referencing a single <path> def.\n *\n * @author Jacob Howcroft\n *\n * @type {import('../lib/types').Plugin<void>}\n */\n\nexports.fn = () => {\n  /**\n   * @type {Map<string, Array<XastElement>>}\n   */\n  const paths = new Map();\n  return {\n    element: {\n      enter: node => {\n        if (node.name === 'path' && node.attributes.d != null) {\n          const d = node.attributes.d;\n          const fill = node.attributes.fill || '';\n          const stroke = node.attributes.stroke || '';\n          const key = d + ';s:' + stroke + ';f:' + fill;\n          let list = paths.get(key);\n\n          if (list == null) {\n            list = [];\n            paths.set(key, list);\n          }\n\n          list.push(node);\n        }\n      },\n      exit: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          /**\n           * @type {XastElement}\n           */\n          const rawDefs = {\n            type: 'element',\n            name: 'defs',\n            attributes: {},\n            children: []\n          };\n          /**\n           * @type {XastElement}\n           */\n\n          const defsTag = new JSAPI(rawDefs, node);\n          let index = 0;\n\n          for (const list of paths.values()) {\n            if (list.length > 1) {\n              // add reusable path to defs\n\n              /**\n               * @type {XastElement}\n               */\n              const rawPath = {\n                type: 'element',\n                name: 'path',\n                attributes: { ...list[0].attributes\n                },\n                children: []\n              };\n              delete rawPath.attributes.transform;\n              let id;\n\n              if (rawPath.attributes.id == null) {\n                id = 'reuse-' + index;\n                index += 1;\n                rawPath.attributes.id = id;\n              } else {\n                id = rawPath.attributes.id;\n                delete list[0].attributes.id;\n              }\n              /**\n               * @type {XastElement}\n               */\n\n\n              const reusablePath = new JSAPI(rawPath, defsTag);\n              defsTag.children.push(reusablePath); // convert paths to <use>\n\n              for (const pathNode of list) {\n                pathNode.name = 'use';\n                pathNode.attributes['xlink:href'] = '#' + id;\n                delete pathNode.attributes.d;\n                delete pathNode.attributes.stroke;\n                delete pathNode.attributes.fill;\n              }\n            }\n          }\n\n          if (defsTag.children.length !== 0) {\n            if (node.attributes['xmlns:xlink'] == null) {\n              node.attributes['xmlns:xlink'] = 'http://www.w3.org/1999/xlink';\n            }\n\n            node.children.unshift(defsTag);\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/plugins/reusePaths.js"],"names":["JSAPI","require","exports","type","name","active","description","fn","paths","Map","element","enter","node","attributes","d","fill","stroke","key","list","get","set","push","exit","parentNode","rawDefs","children","defsTag","index","values","length","rawPath","transform","id","reusablePath","pathNode","unshift"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n * @typedef {import('../lib/types').XastParent} XastParent\n * @typedef {import('../lib/types').XastNode} XastNode\n */\n\nconst JSAPI = require('../lib/svgo/jsAPI.js');\n\nexports.type = 'visitor';\nexports.name = 'reusePaths';\nexports.active = false;\nexports.description =\n  'Finds <path> elements with the same d, fill, and ' +\n  'stroke, and converts them to <use> elements ' +\n  'referencing a single <path> def.';\n\n/**\n * Finds <path> elements with the same d, fill, and stroke, and converts them to\n * <use> elements referencing a single <path> def.\n *\n * @author Jacob Howcroft\n *\n * @type {import('../lib/types').Plugin<void>}\n */\nexports.fn = () => {\n  /**\n   * @type {Map<string, Array<XastElement>>}\n   */\n  const paths = new Map();\n\n  return {\n    element: {\n      enter: (node) => {\n        if (node.name === 'path' && node.attributes.d != null) {\n          const d = node.attributes.d;\n          const fill = node.attributes.fill || '';\n          const stroke = node.attributes.stroke || '';\n          const key = d + ';s:' + stroke + ';f:' + fill;\n          let list = paths.get(key);\n          if (list == null) {\n            list = [];\n            paths.set(key, list);\n          }\n          list.push(node);\n        }\n      },\n\n      exit: (node, parentNode) => {\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          /**\n           * @type {XastElement}\n           */\n          const rawDefs = {\n            type: 'element',\n            name: 'defs',\n            attributes: {},\n            children: [],\n          };\n          /**\n           * @type {XastElement}\n           */\n          const defsTag = new JSAPI(rawDefs, node);\n          let index = 0;\n          for (const list of paths.values()) {\n            if (list.length > 1) {\n              // add reusable path to defs\n              /**\n               * @type {XastElement}\n               */\n              const rawPath = {\n                type: 'element',\n                name: 'path',\n                attributes: { ...list[0].attributes },\n                children: [],\n              };\n              delete rawPath.attributes.transform;\n              let id;\n              if (rawPath.attributes.id == null) {\n                id = 'reuse-' + index;\n                index += 1;\n                rawPath.attributes.id = id;\n              } else {\n                id = rawPath.attributes.id;\n                delete list[0].attributes.id;\n              }\n              /**\n               * @type {XastElement}\n               */\n              const reusablePath = new JSAPI(rawPath, defsTag);\n              defsTag.children.push(reusablePath);\n              // convert paths to <use>\n              for (const pathNode of list) {\n                pathNode.name = 'use';\n                pathNode.attributes['xlink:href'] = '#' + id;\n                delete pathNode.attributes.d;\n                delete pathNode.attributes.stroke;\n                delete pathNode.attributes.fill;\n              }\n            }\n          }\n          if (defsTag.children.length !== 0) {\n            if (node.attributes['xmlns:xlink'] == null) {\n              node.attributes['xmlns:xlink'] = 'http://www.w3.org/1999/xlink';\n            }\n            node.children.unshift(defsTag);\n          }\n        }\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}