{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst {\n  normalizeGridAutoFlow,\n  normalizeGridColumnRowGap,\n  normalizeGridColumnRow\n} = require('./rules/grid'); // rules\n\n\nconst animation = require('./rules/animation');\n\nconst border = require('./rules/border');\n\nconst boxShadow = require('./rules/boxShadow');\n\nconst flexFlow = require('./rules/flexFlow');\n\nconst transition = require('./rules/transition');\n\nconst listStyle = require('./rules/listStyle');\n\nconst column = require('./rules/columns');\n\nconst vendorUnprefixed = require('./lib/vendorUnprefixed.js');\n\nconst borderRules = [['border', border], ['border-block', border], ['border-inline', border], ['border-block-end', border], ['border-block-start', border], ['border-inline-end', border], ['border-inline-start', border], ['border-top', border], ['border-right', border], ['border-bottom', border], ['border-left', border]];\nconst grid = [['grid-auto-flow', normalizeGridAutoFlow], ['grid-column-gap', normalizeGridColumnRowGap], // normal | <length-percentage>\n['grid-row-gap', normalizeGridColumnRowGap], // normal | <length-percentage>\n['grid-column', normalizeGridColumnRow], // <grid-line>+\n['grid-row', normalizeGridColumnRow], // <grid-line>+\n['grid-row-start', normalizeGridColumnRow], // <grid-line>\n['grid-row-end', normalizeGridColumnRow], // <grid-line>\n['grid-column-start', normalizeGridColumnRow], // <grid-line>\n['grid-column-end', normalizeGridColumnRow] // <grid-line>\n];\nconst columnRules = [['column-rule', border], ['columns', column]];\nconst rules = new Map([['animation', animation], ['outline', border], ['box-shadow', boxShadow], ['flex-flow', flexFlow], ['list-style', listStyle], ['transition', transition], ...borderRules, ...grid, ...columnRules]);\n\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return ['var', 'env'].includes(node.value.toLowerCase());\n}\n\nfunction shouldAbort(parsed) {\n  let abort = false;\n  parsed.walk(node => {\n    if (node.type === 'comment' || isVariableFunctionNode(node) || node.type === 'word' && node.value.includes(`___CSS_LOADER_IMPORT___`)) {\n      abort = true;\n      return false;\n    }\n  });\n  return abort;\n}\n\nfunction getValue(decl) {\n  let {\n    value,\n    raws\n  } = decl;\n\n  if (raws && raws.value && raws.value.raw) {\n    value = raws.value.raw;\n  }\n\n  return value;\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-ordered-values',\n\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(decl => {\n            const lowerCasedProp = decl.prop.toLowerCase();\n            const normalizedProp = vendorUnprefixed(lowerCasedProp);\n            const processor = rules.get(normalizedProp);\n\n            if (!processor) {\n              return;\n            }\n\n            const value = getValue(decl);\n\n            if (cache.has(value)) {\n              decl.value = cache.get(value);\n              return;\n            }\n\n            const parsed = valueParser(value);\n\n            if (parsed.nodes.length < 2 || shouldAbort(parsed)) {\n              cache.set(value, value);\n              return;\n            }\n\n            const result = processor(parsed);\n            decl.value = result.toString();\n            cache.set(value, result.toString());\n          });\n        }\n\n      };\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-ordered-values/src/index.js"],"names":["valueParser","require","normalizeGridAutoFlow","normalizeGridColumnRowGap","normalizeGridColumnRow","animation","border","boxShadow","flexFlow","transition","listStyle","column","vendorUnprefixed","borderRules","grid","columnRules","rules","Map","isVariableFunctionNode","node","type","includes","value","toLowerCase","shouldAbort","parsed","abort","walk","getValue","decl","raws","raw","pluginCreator","postcssPlugin","prepare","cache","OnceExit","css","walkDecls","lowerCasedProp","prop","normalizedProp","processor","get","has","nodes","length","set","result","toString","postcss","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst {\n  normalizeGridAutoFlow,\n  normalizeGridColumnRowGap,\n  normalizeGridColumnRow,\n} = require('./rules/grid');\n\n// rules\nconst animation = require('./rules/animation');\nconst border = require('./rules/border');\nconst boxShadow = require('./rules/boxShadow');\nconst flexFlow = require('./rules/flexFlow');\nconst transition = require('./rules/transition');\nconst listStyle = require('./rules/listStyle');\nconst column = require('./rules/columns');\nconst vendorUnprefixed = require('./lib/vendorUnprefixed.js');\n\nconst borderRules = [\n  ['border', border],\n  ['border-block', border],\n  ['border-inline', border],\n  ['border-block-end', border],\n  ['border-block-start', border],\n  ['border-inline-end', border],\n  ['border-inline-start', border],\n  ['border-top', border],\n  ['border-right', border],\n  ['border-bottom', border],\n  ['border-left', border],\n];\n\nconst grid = [\n  ['grid-auto-flow', normalizeGridAutoFlow],\n  ['grid-column-gap', normalizeGridColumnRowGap], // normal | <length-percentage>\n  ['grid-row-gap', normalizeGridColumnRowGap], // normal | <length-percentage>\n  ['grid-column', normalizeGridColumnRow], // <grid-line>+\n  ['grid-row', normalizeGridColumnRow], // <grid-line>+\n  ['grid-row-start', normalizeGridColumnRow], // <grid-line>\n  ['grid-row-end', normalizeGridColumnRow], // <grid-line>\n  ['grid-column-start', normalizeGridColumnRow], // <grid-line>\n  ['grid-column-end', normalizeGridColumnRow], // <grid-line>\n];\n\nconst columnRules = [\n  ['column-rule', border],\n  ['columns', column],\n];\n\nconst rules = new Map([\n  ['animation', animation],\n  ['outline', border],\n  ['box-shadow', boxShadow],\n  ['flex-flow', flexFlow],\n  ['list-style', listStyle],\n  ['transition', transition],\n  ...borderRules,\n  ...grid,\n  ...columnRules,\n]);\n\nfunction isVariableFunctionNode(node) {\n  if (node.type !== 'function') {\n    return false;\n  }\n\n  return ['var', 'env'].includes(node.value.toLowerCase());\n}\n\nfunction shouldAbort(parsed) {\n  let abort = false;\n\n  parsed.walk((node) => {\n    if (\n      node.type === 'comment' ||\n      isVariableFunctionNode(node) ||\n      (node.type === 'word' && node.value.includes(`___CSS_LOADER_IMPORT___`))\n    ) {\n      abort = true;\n\n      return false;\n    }\n  });\n\n  return abort;\n}\n\nfunction getValue(decl) {\n  let { value, raws } = decl;\n\n  if (raws && raws.value && raws.value.raw) {\n    value = raws.value.raw;\n  }\n\n  return value;\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-ordered-values',\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls((decl) => {\n            const lowerCasedProp = decl.prop.toLowerCase();\n            const normalizedProp = vendorUnprefixed(lowerCasedProp);\n            const processor = rules.get(normalizedProp);\n\n            if (!processor) {\n              return;\n            }\n\n            const value = getValue(decl);\n\n            if (cache.has(value)) {\n              decl.value = cache.get(value);\n\n              return;\n            }\n\n            const parsed = valueParser(value);\n\n            if (parsed.nodes.length < 2 || shouldAbort(parsed)) {\n              cache.set(value, value);\n\n              return;\n            }\n\n            const result = processor(parsed);\n\n            decl.value = result.toString();\n            cache.set(value, result.toString());\n          });\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}