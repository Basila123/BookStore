{"ast":null,"code":"var Marker = require('./marker');\n\nvar Token = require('./token');\n\nvar formatPosition = require('../utils/format-position');\n\nvar Level = {\n  BLOCK: 'block',\n  COMMENT: 'comment',\n  DOUBLE_QUOTE: 'double-quote',\n  RULE: 'rule',\n  SINGLE_QUOTE: 'single-quote'\n};\nvar AT_RULES = ['@charset', '@import'];\nvar BLOCK_RULES = ['@-moz-document', '@document', '@-moz-keyframes', '@-ms-keyframes', '@-o-keyframes', '@-webkit-keyframes', '@keyframes', '@media', '@supports'];\nvar IGNORE_END_COMMENT_PATTERN = /\\/\\* clean\\-css ignore:end \\*\\/$/;\nvar IGNORE_START_COMMENT_PATTERN = /^\\/\\* clean\\-css ignore:start \\*\\//;\nvar PAGE_MARGIN_BOXES = ['@bottom-center', '@bottom-left', '@bottom-left-corner', '@bottom-right', '@bottom-right-corner', '@left-bottom', '@left-middle', '@left-top', '@right-bottom', '@right-middle', '@right-top', '@top-center', '@top-left', '@top-left-corner', '@top-right', '@top-right-corner'];\nvar EXTRA_PAGE_BOXES = ['@footnote', '@footnotes', '@left', '@page-float-bottom', '@page-float-top', '@right'];\nvar REPEAT_PATTERN = /^\\[\\s{0,31}\\d+\\s{0,31}\\]$/;\nvar RULE_WORD_SEPARATOR_PATTERN = /[\\s\\(]/;\nvar TAIL_BROKEN_VALUE_PATTERN = /[\\s|\\}]*$/;\n\nfunction tokenize(source, externalContext) {\n  var internalContext = {\n    level: Level.BLOCK,\n    position: {\n      source: externalContext.source || undefined,\n      line: 1,\n      column: 0,\n      index: 0\n    }\n  };\n  return intoTokens(source, externalContext, internalContext, false);\n}\n\nfunction intoTokens(source, externalContext, internalContext, isNested) {\n  var allTokens = [];\n  var newTokens = allTokens;\n  var lastToken;\n  var ruleToken;\n  var ruleTokens = [];\n  var propertyToken;\n  var metadata;\n  var metadatas = [];\n  var level = internalContext.level;\n  var levels = [];\n  var buffer = [];\n  var buffers = [];\n  var isBufferEmpty = true;\n  var serializedBuffer;\n  var serializedBufferPart;\n  var roundBracketLevel = 0;\n  var isQuoted;\n  var isSpace;\n  var isNewLineNix;\n  var isNewLineWin;\n  var isCarriageReturn;\n  var isCommentStart;\n  var wasCommentStart = false;\n  var isCommentEnd;\n  var wasCommentEnd = false;\n  var isCommentEndMarker;\n  var isEscaped;\n  var wasEscaped = false;\n  var characterWithNoSpecialMeaning;\n  var isPreviousDash = false;\n  var isVariable = false;\n  var isRaw = false;\n  var seekingValue = false;\n  var seekingPropertyBlockClosing = false;\n  var position = internalContext.position;\n  var lastCommentStartAt;\n\n  for (; position.index < source.length; position.index++) {\n    var character = source[position.index];\n    isQuoted = level == Level.SINGLE_QUOTE || level == Level.DOUBLE_QUOTE;\n    isSpace = character == Marker.SPACE || character == Marker.TAB;\n    isNewLineNix = character == Marker.NEW_LINE_NIX;\n    isNewLineWin = character == Marker.NEW_LINE_NIX && source[position.index - 1] == Marker.CARRIAGE_RETURN;\n    isCarriageReturn = character == Marker.CARRIAGE_RETURN && source[position.index + 1] && source[position.index + 1] != Marker.NEW_LINE_NIX;\n    isCommentStart = !wasCommentEnd && level != Level.COMMENT && !isQuoted && character == Marker.ASTERISK && source[position.index - 1] == Marker.FORWARD_SLASH;\n    isCommentEndMarker = !wasCommentStart && !isQuoted && character == Marker.FORWARD_SLASH && source[position.index - 1] == Marker.ASTERISK;\n    isCommentEnd = level == Level.COMMENT && isCommentEndMarker;\n    characterWithNoSpecialMeaning = !isSpace && !isCarriageReturn && (character >= 'A' && character <= 'Z' || character >= 'a' && character <= 'z' || character >= '0' && character <= '9' || character == '-');\n    isVariable = isVariable || level != Level.COMMENT && !seekingValue && isPreviousDash && character === '-';\n    isPreviousDash = character === '-';\n    roundBracketLevel = Math.max(roundBracketLevel, 0);\n    metadata = isBufferEmpty ? [position.line, position.column, position.source] : metadata;\n\n    if (isEscaped) {\n      // previous character was a backslash\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (characterWithNoSpecialMeaning) {\n      // it's just an alphanumeric character or a hyphen (part of any rule or property name) so let's end it quickly\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if ((isSpace || isNewLineNix && !isNewLineWin) && (isQuoted || level == Level.COMMENT)) {\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if ((isSpace || isNewLineNix && !isNewLineWin) && isBufferEmpty) {// noop\n    } else if (!isCommentEnd && level == Level.COMMENT) {\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (!isCommentStart && !isCommentEnd && isRaw) {\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (isCommentStart && isVariable && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {\n      // comment start within a variable, e.g. var(/*<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      levels.push(level);\n      level = Level.COMMENT;\n    } else if (isCommentStart && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {\n      // comment start within block preceded by some content, e.g. div/*<--\n      metadatas.push(metadata);\n      buffer.push(character);\n      buffers.push(buffer.slice(0, -2));\n      isBufferEmpty = false;\n      buffer = buffer.slice(-2);\n      metadata = [position.line, position.column - 1, position.source];\n      levels.push(level);\n      level = Level.COMMENT;\n    } else if (isCommentStart) {\n      // comment start, e.g. /*<--\n      levels.push(level);\n      level = Level.COMMENT;\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (isCommentEnd && isVariable) {\n      // comment end within a variable, e.g. var(/*!*/<--\n      buffer.push(character);\n      level = levels.pop();\n    } else if (isCommentEnd && isIgnoreStartComment(buffer)) {\n      // ignore:start comment end, e.g. /* clean-css ignore:start */<--\n      serializedBuffer = buffer.join('').trim() + character;\n      lastToken = [Token.COMMENT, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]];\n      newTokens.push(lastToken);\n      isRaw = true;\n      metadata = metadatas.pop() || null;\n      buffer = buffers.pop() || [];\n      isBufferEmpty = buffer.length === 0;\n    } else if (isCommentEnd && isIgnoreEndComment(buffer)) {\n      // ignore:start comment end, e.g. /* clean-css ignore:end */<--\n      serializedBuffer = buffer.join('') + character;\n      lastCommentStartAt = serializedBuffer.lastIndexOf(Marker.FORWARD_SLASH + Marker.ASTERISK);\n      serializedBufferPart = serializedBuffer.substring(0, lastCommentStartAt);\n      lastToken = [Token.RAW, serializedBufferPart, [originalMetadata(metadata, serializedBufferPart, externalContext)]];\n      newTokens.push(lastToken);\n      serializedBufferPart = serializedBuffer.substring(lastCommentStartAt);\n      metadata = [position.line, position.column - serializedBufferPart.length + 1, position.source];\n      lastToken = [Token.COMMENT, serializedBufferPart, [originalMetadata(metadata, serializedBufferPart, externalContext)]];\n      newTokens.push(lastToken);\n      isRaw = false;\n      level = levels.pop();\n      metadata = metadatas.pop() || null;\n      buffer = buffers.pop() || [];\n      isBufferEmpty = buffer.length === 0;\n    } else if (isCommentEnd) {\n      // comment end, e.g. /* comment */<--\n      serializedBuffer = buffer.join('').trim() + character;\n      lastToken = [Token.COMMENT, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]];\n      newTokens.push(lastToken);\n      level = levels.pop();\n      metadata = metadatas.pop() || null;\n      buffer = buffers.pop() || [];\n      isBufferEmpty = buffer.length === 0;\n    } else if (isCommentEndMarker && source[position.index + 1] != Marker.ASTERISK) {\n      externalContext.warnings.push('Unexpected \\'*/\\' at ' + formatPosition([position.line, position.column, position.source]) + '.');\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SINGLE_QUOTE && !isQuoted) {\n      // single quotation start, e.g. a[href^='https<--\n      levels.push(level);\n      level = Level.SINGLE_QUOTE;\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.SINGLE_QUOTE && level == Level.SINGLE_QUOTE) {\n      // single quotation end, e.g. a[href^='https'<--\n      level = levels.pop();\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.DOUBLE_QUOTE && !isQuoted) {\n      // double quotation start, e.g. a[href^=\"<--\n      levels.push(level);\n      level = Level.DOUBLE_QUOTE;\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.DOUBLE_QUOTE && level == Level.DOUBLE_QUOTE) {\n      // double quotation end, e.g. a[href^=\"https\"<--\n      level = levels.pop();\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character != Marker.CLOSE_ROUND_BRACKET && character != Marker.OPEN_ROUND_BRACKET && level != Level.COMMENT && !isQuoted && roundBracketLevel > 0) {\n      // character inside any function, e.g. hsla(.<--\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.OPEN_ROUND_BRACKET && !isQuoted && level != Level.COMMENT && !seekingValue) {\n      // round open bracket, e.g. @import url(<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      roundBracketLevel++;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && !isQuoted && level != Level.COMMENT && !seekingValue) {\n      // round open bracket, e.g. @import url(test.css)<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      roundBracketLevel--;\n    } else if (character == Marker.SEMICOLON && level == Level.BLOCK && buffer[0] == Marker.AT) {\n      // semicolon ending rule at block level, e.g. @import '...';<--\n      serializedBuffer = buffer.join('').trim();\n      allTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COMMA && level == Level.BLOCK && ruleToken) {\n      // comma separator at block level, e.g. a,div,<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COMMA && level == Level.BLOCK && tokenTypeFrom(buffer) == Token.AT_RULE) {\n      // comma separator at block level, e.g. @import url(...) screen,<--\n      // keep iterating as end semicolon will create the token\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.COMMA && level == Level.BLOCK) {\n      // comma separator at block level, e.g. a,<--\n      ruleToken = [tokenTypeFrom(buffer), [], []];\n      serializedBuffer = buffer.join('').trim();\n      ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, 0)]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK && ruleToken && ruleToken[0] == Token.NESTED_BLOCK) {\n      // open brace opening at-rule at block level, e.g. @media{<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken[1].push([Token.NESTED_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      allTokens.push(ruleToken);\n      levels.push(level);\n      position.column++;\n      position.index++;\n      buffer = [];\n      isBufferEmpty = true;\n      ruleToken[2] = intoTokens(source, externalContext, internalContext, true);\n      ruleToken = null;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK && tokenTypeFrom(buffer) == Token.NESTED_BLOCK) {\n      // open brace opening at-rule at block level, e.g. @media{<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken = ruleToken || [Token.NESTED_BLOCK, [], []];\n      ruleToken[1].push([Token.NESTED_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      allTokens.push(ruleToken);\n      levels.push(level);\n      position.column++;\n      position.index++;\n      buffer = [];\n      isBufferEmpty = true;\n      ruleToken[2] = intoTokens(source, externalContext, internalContext, true);\n      ruleToken = null;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK) {\n      // open brace opening rule at block level, e.g. div{<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken = ruleToken || [tokenTypeFrom(buffer), [], []];\n      ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]]);\n      newTokens = ruleToken[2];\n      allTokens.push(ruleToken);\n      levels.push(level);\n      level = Level.RULE;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.RULE && seekingValue) {\n      // open brace opening rule at rule level, e.g. div{--variable:{<--\n      ruleTokens.push(ruleToken);\n      ruleToken = [Token.PROPERTY_BLOCK, []];\n      propertyToken.push(ruleToken);\n      newTokens = ruleToken[1];\n      levels.push(level);\n      level = Level.RULE;\n      seekingValue = false;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.RULE && isPageMarginBox(buffer)) {\n      // open brace opening page-margin box at rule level, e.g. @page{@top-center{<--\n      serializedBuffer = buffer.join('').trim();\n      ruleTokens.push(ruleToken);\n      ruleToken = [Token.AT_RULE_BLOCK, [], []];\n      ruleToken[1].push([Token.AT_RULE_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      newTokens.push(ruleToken);\n      newTokens = ruleToken[2];\n      levels.push(level);\n      level = Level.RULE;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COLON && level == Level.RULE && !seekingValue) {\n      // colon at rule level, e.g. a{color:<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken = [Token.PROPERTY, [Token.PROPERTY_NAME, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]];\n      newTokens.push(propertyToken);\n      seekingValue = true;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && ruleTokens.length > 0 && !isBufferEmpty && buffer[0] == Marker.AT) {\n      // semicolon at rule level for at-rule, e.g. a{--color:{@apply(--other-color);<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken[1].push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && !isBufferEmpty) {\n      // semicolon at rule level, e.g. a{color:red;<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken = null;\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n      isVariable = false;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && isBufferEmpty && isVariable && !propertyToken[2]) {\n      // semicolon after empty variable value at rule level, e.g. a{--color: ;<--\n      propertyToken.push([Token.PROPERTY_VALUE, ' ', [originalMetadata(metadata, ' ', externalContext)]]);\n      isVariable = false;\n      propertyToken = null;\n      seekingValue = false;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && isBufferEmpty) {\n      // semicolon after bracketed value at rule level, e.g. a{color:rgb(...);<--\n      propertyToken = null;\n      seekingValue = false;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && !isBufferEmpty && buffer[0] == Marker.AT) {\n      // semicolon for at-rule at rule level, e.g. a{@apply(--variable);<--\n      serializedBuffer = buffer.join('');\n      newTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && seekingPropertyBlockClosing) {\n      // close brace after a property block at rule level, e.g. a{--custom:{color:red;};<--\n      seekingPropertyBlockClosing = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && isBufferEmpty) {// stray semicolon at rule level, e.g. a{;<--\n      // noop\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && seekingValue && !isBufferEmpty && ruleTokens.length > 0) {\n      // close brace at rule level, e.g. a{--color:{color:red}<--\n      serializedBuffer = buffer.join('');\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = ruleToken[2];\n      level = levels.pop();\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && !isBufferEmpty && buffer[0] == Marker.AT && ruleTokens.length > 0) {\n      // close brace at rule level for at-rule, e.g. a{--color:{@apply(--other-color)}<--\n      serializedBuffer = buffer.join('');\n      ruleToken[1].push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = ruleToken[2];\n      level = levels.pop();\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && ruleTokens.length > 0) {\n      // close brace at rule level after space, e.g. a{--color:{color:red }<--\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = ruleToken[2];\n      level = levels.pop();\n      seekingValue = false;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && !isBufferEmpty) {\n      // close brace at rule level, e.g. a{color:red}<--\n      serializedBuffer = buffer.join('');\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = allTokens;\n      level = levels.pop();\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && !isBufferEmpty && buffer[0] == Marker.AT) {\n      // close brace after at-rule at rule level, e.g. a{@apply(--variable)}<--\n      propertyToken = null;\n      ruleToken = null;\n      serializedBuffer = buffer.join('').trim();\n      newTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      newTokens = allTokens;\n      level = levels.pop();\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && levels[levels.length - 1] == Level.RULE) {\n      // close brace after a property block at rule level, e.g. a{--custom:{color:red;}<--\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = ruleToken[2];\n      level = levels.pop();\n      seekingValue = false;\n      seekingPropertyBlockClosing = true;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && isVariable && propertyToken && !propertyToken[2]) {\n      // close brace after an empty variable declaration inside a rule, e.g. a{--color: }<--\n      propertyToken.push([Token.PROPERTY_VALUE, ' ', [originalMetadata(metadata, ' ', externalContext)]]);\n      isVariable = false;\n      propertyToken = null;\n      ruleToken = null;\n      newTokens = allTokens;\n      level = levels.pop();\n      seekingValue = false;\n      isVariable = false;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE) {\n      // close brace after a rule, e.g. a{color:red;}<--\n      propertyToken = null;\n      ruleToken = null;\n      newTokens = allTokens;\n      level = levels.pop();\n      seekingValue = false;\n      isVariable = false;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.BLOCK && !isNested && position.index <= source.length - 1) {\n      // stray close brace at block level, e.g. a{color:red}color:blue}<--\n      externalContext.warnings.push('Unexpected \\'}\\' at ' + formatPosition([position.line, position.column, position.source]) + '.');\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.BLOCK) {\n      // close brace at block level, e.g. @media screen {...}<--\n      break;\n    } else if (character == Marker.OPEN_ROUND_BRACKET && level == Level.RULE && seekingValue) {\n      // round open bracket, e.g. a{color:hsla(<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      roundBracketLevel++;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue && roundBracketLevel == 1) {\n      // round close bracket, e.g. a{color:hsla(0,0%,0%)<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      roundBracketLevel--;\n      buffer = [];\n      isBufferEmpty = true;\n      isVariable = false;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue) {\n      // round close bracket within other brackets, e.g. a{width:calc((10rem / 2)<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      isVariable = false;\n      roundBracketLevel--;\n    } else if (character == Marker.FORWARD_SLASH && source[position.index + 1] != Marker.ASTERISK && level == Level.RULE && seekingValue && !isBufferEmpty) {\n      // forward slash within a property, e.g. a{background:url(image.png) 0 0/<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.FORWARD_SLASH && source[position.index + 1] != Marker.ASTERISK && level == Level.RULE && seekingValue) {\n      // forward slash within a property after space, e.g. a{background:url(image.png) 0 0 /<--\n      propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COMMA && level == Level.RULE && seekingValue && !isBufferEmpty) {\n      // comma within a property, e.g. a{background:url(image.png),<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COMMA && level == Level.RULE && seekingValue) {\n      // comma within a property after space, e.g. a{background:url(image.png) ,<--\n      propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_SQUARE_BRACKET && propertyToken && propertyToken.length > 1 && !isBufferEmpty && isRepeatToken(buffer)) {\n      buffer.push(character);\n      serializedBuffer = buffer.join('').trim();\n      propertyToken[propertyToken.length - 1][1] += serializedBuffer;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if ((isSpace || isNewLineNix && !isNewLineWin) && level == Level.RULE && seekingValue && propertyToken && !isBufferEmpty) {\n      // space or *nix newline within property, e.g. a{margin:0 <--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (isNewLineWin && level == Level.RULE && seekingValue && propertyToken && buffer.length > 1) {\n      // win newline within property, e.g. a{margin:0\\r\\n<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (isNewLineWin && level == Level.RULE && seekingValue) {\n      // win newline\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (isNewLineWin && buffer.length == 1) {\n      // ignore windows newline which is composed of two characters\n      buffer.pop();\n      isBufferEmpty = buffer.length === 0;\n    } else if (!isBufferEmpty || !isSpace && !isNewLineNix && !isNewLineWin && !isCarriageReturn) {\n      // any character\n      buffer.push(character);\n      isBufferEmpty = false;\n    }\n\n    wasEscaped = isEscaped;\n    isEscaped = !wasEscaped && character == Marker.BACK_SLASH;\n    wasCommentStart = isCommentStart;\n    wasCommentEnd = isCommentEnd;\n    position.line = isNewLineWin || isNewLineNix || isCarriageReturn ? position.line + 1 : position.line;\n    position.column = isNewLineWin || isNewLineNix || isCarriageReturn ? 0 : position.column + 1;\n  }\n\n  if (seekingValue) {\n    externalContext.warnings.push('Missing \\'}\\' at ' + formatPosition([position.line, position.column, position.source]) + '.');\n  }\n\n  if (seekingValue && buffer.length > 0) {\n    serializedBuffer = buffer.join('').replace(TAIL_BROKEN_VALUE_PATTERN, '');\n    propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n    buffer = [];\n  }\n\n  if (buffer.length > 0) {\n    externalContext.warnings.push('Invalid character(s) \\'' + buffer.join('') + '\\' at ' + formatPosition(metadata) + '. Ignoring.');\n  }\n\n  return allTokens;\n}\n\nfunction isIgnoreStartComment(buffer) {\n  return IGNORE_START_COMMENT_PATTERN.test(buffer.join('') + Marker.FORWARD_SLASH);\n}\n\nfunction isIgnoreEndComment(buffer) {\n  return IGNORE_END_COMMENT_PATTERN.test(buffer.join('') + Marker.FORWARD_SLASH);\n}\n\nfunction originalMetadata(metadata, value, externalContext, selectorFallbacks) {\n  var source = metadata[2];\n  return externalContext.inputSourceMapTracker.isTracking(source) ? externalContext.inputSourceMapTracker.originalPositionFor(metadata, value.length, selectorFallbacks) : metadata;\n}\n\nfunction tokenTypeFrom(buffer) {\n  var isAtRule = buffer[0] == Marker.AT || buffer[0] == Marker.UNDERSCORE;\n  var ruleWord = buffer.join('').split(RULE_WORD_SEPARATOR_PATTERN)[0];\n\n  if (isAtRule && BLOCK_RULES.indexOf(ruleWord) > -1) {\n    return Token.NESTED_BLOCK;\n  } else if (isAtRule && AT_RULES.indexOf(ruleWord) > -1) {\n    return Token.AT_RULE;\n  } else if (isAtRule) {\n    return Token.AT_RULE_BLOCK;\n  } else {\n    return Token.RULE;\n  }\n}\n\nfunction tokenScopeFrom(tokenType) {\n  if (tokenType == Token.RULE) {\n    return Token.RULE_SCOPE;\n  } else if (tokenType == Token.NESTED_BLOCK) {\n    return Token.NESTED_BLOCK_SCOPE;\n  } else if (tokenType == Token.AT_RULE_BLOCK) {\n    return Token.AT_RULE_BLOCK_SCOPE;\n  }\n}\n\nfunction isPageMarginBox(buffer) {\n  var serializedBuffer = buffer.join('').trim();\n  return PAGE_MARGIN_BOXES.indexOf(serializedBuffer) > -1 || EXTRA_PAGE_BOXES.indexOf(serializedBuffer) > -1;\n}\n\nfunction isRepeatToken(buffer) {\n  return REPEAT_PATTERN.test(buffer.join('') + Marker.CLOSE_SQUARE_BRACKET);\n}\n\nmodule.exports = tokenize;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/clean-css/lib/tokenizer/tokenize.js"],"names":["Marker","require","Token","formatPosition","Level","BLOCK","COMMENT","DOUBLE_QUOTE","RULE","SINGLE_QUOTE","AT_RULES","BLOCK_RULES","IGNORE_END_COMMENT_PATTERN","IGNORE_START_COMMENT_PATTERN","PAGE_MARGIN_BOXES","EXTRA_PAGE_BOXES","REPEAT_PATTERN","RULE_WORD_SEPARATOR_PATTERN","TAIL_BROKEN_VALUE_PATTERN","tokenize","source","externalContext","internalContext","level","position","undefined","line","column","index","intoTokens","isNested","allTokens","newTokens","lastToken","ruleToken","ruleTokens","propertyToken","metadata","metadatas","levels","buffer","buffers","isBufferEmpty","serializedBuffer","serializedBufferPart","roundBracketLevel","isQuoted","isSpace","isNewLineNix","isNewLineWin","isCarriageReturn","isCommentStart","wasCommentStart","isCommentEnd","wasCommentEnd","isCommentEndMarker","isEscaped","wasEscaped","characterWithNoSpecialMeaning","isPreviousDash","isVariable","isRaw","seekingValue","seekingPropertyBlockClosing","lastCommentStartAt","length","character","SPACE","TAB","NEW_LINE_NIX","CARRIAGE_RETURN","ASTERISK","FORWARD_SLASH","Math","max","push","slice","pop","isIgnoreStartComment","join","trim","originalMetadata","isIgnoreEndComment","lastIndexOf","substring","RAW","warnings","CLOSE_ROUND_BRACKET","OPEN_ROUND_BRACKET","SEMICOLON","AT","AT_RULE","COMMA","tokenScopeFrom","tokenTypeFrom","OPEN_CURLY_BRACKET","NESTED_BLOCK","NESTED_BLOCK_SCOPE","PROPERTY_BLOCK","isPageMarginBox","AT_RULE_BLOCK","AT_RULE_BLOCK_SCOPE","COLON","PROPERTY","PROPERTY_NAME","PROPERTY_VALUE","CLOSE_CURLY_BRACKET","CLOSE_SQUARE_BRACKET","isRepeatToken","BACK_SLASH","replace","test","value","selectorFallbacks","inputSourceMapTracker","isTracking","originalPositionFor","isAtRule","UNDERSCORE","ruleWord","split","indexOf","tokenType","RULE_SCOPE","module","exports"],"mappings":"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","sourcesContent":["var Marker = require('./marker');\nvar Token = require('./token');\n\nvar formatPosition = require('../utils/format-position');\n\nvar Level = {\n  BLOCK: 'block',\n  COMMENT: 'comment',\n  DOUBLE_QUOTE: 'double-quote',\n  RULE: 'rule',\n  SINGLE_QUOTE: 'single-quote'\n};\n\nvar AT_RULES = [\n  '@charset',\n  '@import'\n];\n\nvar BLOCK_RULES = [\n  '@-moz-document',\n  '@document',\n  '@-moz-keyframes',\n  '@-ms-keyframes',\n  '@-o-keyframes',\n  '@-webkit-keyframes',\n  '@keyframes',\n  '@media',\n  '@supports'\n];\n\nvar IGNORE_END_COMMENT_PATTERN = /\\/\\* clean\\-css ignore:end \\*\\/$/;\nvar IGNORE_START_COMMENT_PATTERN = /^\\/\\* clean\\-css ignore:start \\*\\//;\n\nvar PAGE_MARGIN_BOXES = [\n  '@bottom-center',\n  '@bottom-left',\n  '@bottom-left-corner',\n  '@bottom-right',\n  '@bottom-right-corner',\n  '@left-bottom',\n  '@left-middle',\n  '@left-top',\n  '@right-bottom',\n  '@right-middle',\n  '@right-top',\n  '@top-center',\n  '@top-left',\n  '@top-left-corner',\n  '@top-right',\n  '@top-right-corner'\n];\n\nvar EXTRA_PAGE_BOXES = [\n  '@footnote',\n  '@footnotes',\n  '@left',\n  '@page-float-bottom',\n  '@page-float-top',\n  '@right'\n];\n\nvar REPEAT_PATTERN = /^\\[\\s{0,31}\\d+\\s{0,31}\\]$/;\nvar RULE_WORD_SEPARATOR_PATTERN = /[\\s\\(]/;\nvar TAIL_BROKEN_VALUE_PATTERN = /[\\s|\\}]*$/;\n\nfunction tokenize(source, externalContext) {\n  var internalContext = {\n    level: Level.BLOCK,\n    position: {\n      source: externalContext.source || undefined,\n      line: 1,\n      column: 0,\n      index: 0\n    }\n  };\n\n  return intoTokens(source, externalContext, internalContext, false);\n}\n\nfunction intoTokens(source, externalContext, internalContext, isNested) {\n  var allTokens = [];\n  var newTokens = allTokens;\n  var lastToken;\n  var ruleToken;\n  var ruleTokens = [];\n  var propertyToken;\n  var metadata;\n  var metadatas = [];\n  var level = internalContext.level;\n  var levels = [];\n  var buffer = [];\n  var buffers = [];\n  var isBufferEmpty = true;\n  var serializedBuffer;\n  var serializedBufferPart;\n  var roundBracketLevel = 0;\n  var isQuoted;\n  var isSpace;\n  var isNewLineNix;\n  var isNewLineWin;\n  var isCarriageReturn;\n  var isCommentStart;\n  var wasCommentStart = false;\n  var isCommentEnd;\n  var wasCommentEnd = false;\n  var isCommentEndMarker;\n  var isEscaped;\n  var wasEscaped = false;\n  var characterWithNoSpecialMeaning;\n  var isPreviousDash = false;\n  var isVariable = false;\n  var isRaw = false;\n  var seekingValue = false;\n  var seekingPropertyBlockClosing = false;\n  var position = internalContext.position;\n  var lastCommentStartAt;\n\n  for (; position.index < source.length; position.index++) {\n    var character = source[position.index];\n\n    isQuoted = level == Level.SINGLE_QUOTE || level == Level.DOUBLE_QUOTE;\n    isSpace = character == Marker.SPACE || character == Marker.TAB;\n    isNewLineNix = character == Marker.NEW_LINE_NIX;\n    isNewLineWin = character == Marker.NEW_LINE_NIX && source[position.index - 1] == Marker.CARRIAGE_RETURN;\n    isCarriageReturn = character == Marker.CARRIAGE_RETURN && source[position.index + 1] && source[position.index + 1] != Marker.NEW_LINE_NIX;\n    isCommentStart = !wasCommentEnd && level != Level.COMMENT && !isQuoted && character == Marker.ASTERISK && source[position.index - 1] == Marker.FORWARD_SLASH;\n    isCommentEndMarker = !wasCommentStart && !isQuoted && character == Marker.FORWARD_SLASH && source[position.index - 1] == Marker.ASTERISK;\n    isCommentEnd = level == Level.COMMENT && isCommentEndMarker;\n    characterWithNoSpecialMeaning = !isSpace && !isCarriageReturn && (character >= 'A' && character <= 'Z' || character >= 'a' && character <= 'z' || character >= '0' && character <= '9' || character == '-');\n    isVariable = isVariable || (level != Level.COMMENT && !seekingValue && isPreviousDash && character === '-');\n    isPreviousDash = character === '-';\n    roundBracketLevel = Math.max(roundBracketLevel, 0);\n\n    metadata = isBufferEmpty ?\n      [position.line, position.column, position.source] :\n      metadata;\n\n    if (isEscaped) {\n      // previous character was a backslash\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (characterWithNoSpecialMeaning) {\n      // it's just an alphanumeric character or a hyphen (part of any rule or property name) so let's end it quickly\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if ((isSpace || isNewLineNix && !isNewLineWin) && (isQuoted || level == Level.COMMENT)) {\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if ((isSpace || isNewLineNix && !isNewLineWin) && isBufferEmpty) {\n      // noop\n    } else if (!isCommentEnd && level == Level.COMMENT) {\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (!isCommentStart && !isCommentEnd && isRaw) {\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (isCommentStart && isVariable && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {\n      // comment start within a variable, e.g. var(/*<--\n      buffer.push(character);\n      isBufferEmpty = false;\n\n      levels.push(level);\n      level = Level.COMMENT;\n    } else if (isCommentStart && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {\n      // comment start within block preceded by some content, e.g. div/*<--\n      metadatas.push(metadata);\n      buffer.push(character);\n      buffers.push(buffer.slice(0, -2));\n      isBufferEmpty = false;\n\n      buffer = buffer.slice(-2);\n      metadata = [position.line, position.column - 1, position.source];\n\n      levels.push(level);\n      level = Level.COMMENT;\n    } else if (isCommentStart) {\n      // comment start, e.g. /*<--\n      levels.push(level);\n      level = Level.COMMENT;\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (isCommentEnd && isVariable) {\n      // comment end within a variable, e.g. var(/*!*/<--\n      buffer.push(character);\n      level = levels.pop();\n    } else if (isCommentEnd && isIgnoreStartComment(buffer)) {\n      // ignore:start comment end, e.g. /* clean-css ignore:start */<--\n      serializedBuffer = buffer.join('').trim() + character;\n      lastToken = [Token.COMMENT, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]];\n      newTokens.push(lastToken);\n\n      isRaw = true;\n      metadata = metadatas.pop() || null;\n      buffer = buffers.pop() || [];\n      isBufferEmpty = buffer.length === 0;\n    } else if (isCommentEnd && isIgnoreEndComment(buffer)) {\n      // ignore:start comment end, e.g. /* clean-css ignore:end */<--\n      serializedBuffer = buffer.join('') + character;\n      lastCommentStartAt = serializedBuffer.lastIndexOf(Marker.FORWARD_SLASH + Marker.ASTERISK);\n\n      serializedBufferPart = serializedBuffer.substring(0, lastCommentStartAt);\n      lastToken = [Token.RAW, serializedBufferPart, [originalMetadata(metadata, serializedBufferPart, externalContext)]];\n      newTokens.push(lastToken);\n\n      serializedBufferPart = serializedBuffer.substring(lastCommentStartAt);\n      metadata = [position.line, position.column - serializedBufferPart.length + 1, position.source];\n      lastToken = [Token.COMMENT, serializedBufferPart, [originalMetadata(metadata, serializedBufferPart, externalContext)]];\n      newTokens.push(lastToken);\n\n      isRaw = false;\n      level = levels.pop();\n      metadata = metadatas.pop() || null;\n      buffer = buffers.pop() || [];\n      isBufferEmpty = buffer.length === 0;\n    } else if (isCommentEnd) {\n      // comment end, e.g. /* comment */<--\n      serializedBuffer = buffer.join('').trim() + character;\n      lastToken = [Token.COMMENT, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]];\n      newTokens.push(lastToken);\n\n      level = levels.pop();\n      metadata = metadatas.pop() || null;\n      buffer = buffers.pop() || [];\n      isBufferEmpty = buffer.length === 0;\n    } else if (isCommentEndMarker && source[position.index + 1] != Marker.ASTERISK) {\n      externalContext.warnings.push('Unexpected \\'*/\\' at ' + formatPosition([position.line, position.column, position.source]) + '.');\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SINGLE_QUOTE && !isQuoted) {\n      // single quotation start, e.g. a[href^='https<--\n      levels.push(level);\n      level = Level.SINGLE_QUOTE;\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.SINGLE_QUOTE && level == Level.SINGLE_QUOTE) {\n      // single quotation end, e.g. a[href^='https'<--\n      level = levels.pop();\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.DOUBLE_QUOTE && !isQuoted) {\n      // double quotation start, e.g. a[href^=\"<--\n      levels.push(level);\n      level = Level.DOUBLE_QUOTE;\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.DOUBLE_QUOTE && level == Level.DOUBLE_QUOTE) {\n      // double quotation end, e.g. a[href^=\"https\"<--\n      level = levels.pop();\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character != Marker.CLOSE_ROUND_BRACKET && character != Marker.OPEN_ROUND_BRACKET && level != Level.COMMENT && !isQuoted && roundBracketLevel > 0) {\n      // character inside any function, e.g. hsla(.<--\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.OPEN_ROUND_BRACKET && !isQuoted && level != Level.COMMENT && !seekingValue) {\n      // round open bracket, e.g. @import url(<--\n      buffer.push(character);\n      isBufferEmpty = false;\n\n      roundBracketLevel++;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && !isQuoted && level != Level.COMMENT && !seekingValue) {\n      // round open bracket, e.g. @import url(test.css)<--\n      buffer.push(character);\n      isBufferEmpty = false;\n\n      roundBracketLevel--;\n    } else if (character == Marker.SEMICOLON && level == Level.BLOCK && buffer[0] == Marker.AT) {\n      // semicolon ending rule at block level, e.g. @import '...';<--\n      serializedBuffer = buffer.join('').trim();\n      allTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COMMA && level == Level.BLOCK && ruleToken) {\n      // comma separator at block level, e.g. a,div,<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COMMA && level == Level.BLOCK && tokenTypeFrom(buffer) == Token.AT_RULE) {\n      // comma separator at block level, e.g. @import url(...) screen,<--\n      // keep iterating as end semicolon will create the token\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.COMMA && level == Level.BLOCK) {\n      // comma separator at block level, e.g. a,<--\n      ruleToken = [tokenTypeFrom(buffer), [], []];\n      serializedBuffer = buffer.join('').trim();\n      ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, 0)]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK && ruleToken && ruleToken[0] == Token.NESTED_BLOCK) {\n      // open brace opening at-rule at block level, e.g. @media{<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken[1].push([Token.NESTED_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      allTokens.push(ruleToken);\n\n      levels.push(level);\n      position.column++;\n      position.index++;\n      buffer = [];\n      isBufferEmpty = true;\n\n      ruleToken[2] = intoTokens(source, externalContext, internalContext, true);\n      ruleToken = null;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK && tokenTypeFrom(buffer) == Token.NESTED_BLOCK) {\n      // open brace opening at-rule at block level, e.g. @media{<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken = ruleToken || [Token.NESTED_BLOCK, [], []];\n      ruleToken[1].push([Token.NESTED_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      allTokens.push(ruleToken);\n\n      levels.push(level);\n      position.column++;\n      position.index++;\n      buffer = [];\n      isBufferEmpty = true;\n\n      ruleToken[2] = intoTokens(source, externalContext, internalContext, true);\n      ruleToken = null;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.BLOCK) {\n      // open brace opening rule at block level, e.g. div{<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken = ruleToken || [tokenTypeFrom(buffer), [], []];\n      ruleToken[1].push([tokenScopeFrom(ruleToken[0]), serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]]);\n      newTokens = ruleToken[2];\n      allTokens.push(ruleToken);\n\n      levels.push(level);\n      level = Level.RULE;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.RULE && seekingValue) {\n      // open brace opening rule at rule level, e.g. div{--variable:{<--\n      ruleTokens.push(ruleToken);\n      ruleToken = [Token.PROPERTY_BLOCK, []];\n      propertyToken.push(ruleToken);\n      newTokens = ruleToken[1];\n\n      levels.push(level);\n      level = Level.RULE;\n      seekingValue = false;\n    } else if (character == Marker.OPEN_CURLY_BRACKET && level == Level.RULE && isPageMarginBox(buffer)) {\n      // open brace opening page-margin box at rule level, e.g. @page{@top-center{<--\n      serializedBuffer = buffer.join('').trim();\n      ruleTokens.push(ruleToken);\n      ruleToken = [Token.AT_RULE_BLOCK, [], []];\n      ruleToken[1].push([Token.AT_RULE_BLOCK_SCOPE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      newTokens.push(ruleToken);\n      newTokens = ruleToken[2];\n\n      levels.push(level);\n      level = Level.RULE;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COLON && level == Level.RULE && !seekingValue) {\n      // colon at rule level, e.g. a{color:<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken = [Token.PROPERTY, [Token.PROPERTY_NAME, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]];\n      newTokens.push(propertyToken);\n\n      seekingValue = true;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && ruleTokens.length > 0 && !isBufferEmpty && buffer[0] == Marker.AT) {\n      // semicolon at rule level for at-rule, e.g. a{--color:{@apply(--other-color);<--\n      serializedBuffer = buffer.join('').trim();\n      ruleToken[1].push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && !isBufferEmpty) {\n      // semicolon at rule level, e.g. a{color:red;<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n\n      propertyToken = null;\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n      isVariable = false;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && isBufferEmpty && isVariable && !propertyToken[2]) {\n      // semicolon after empty variable value at rule level, e.g. a{--color: ;<--\n      propertyToken.push([Token.PROPERTY_VALUE, ' ', [originalMetadata(metadata, ' ', externalContext)]]);\n      isVariable = false;\n      propertyToken = null;\n      seekingValue = false;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && propertyToken && isBufferEmpty) {\n      // semicolon after bracketed value at rule level, e.g. a{color:rgb(...);<--\n      propertyToken = null;\n      seekingValue = false;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && !isBufferEmpty && buffer[0] == Marker.AT) {\n      // semicolon for at-rule at rule level, e.g. a{@apply(--variable);<--\n      serializedBuffer = buffer.join('');\n      newTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && seekingPropertyBlockClosing) {\n      // close brace after a property block at rule level, e.g. a{--custom:{color:red;};<--\n      seekingPropertyBlockClosing = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.SEMICOLON && level == Level.RULE && isBufferEmpty) {\n      // stray semicolon at rule level, e.g. a{;<--\n      // noop\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && seekingValue && !isBufferEmpty && ruleTokens.length > 0) {\n      // close brace at rule level, e.g. a{--color:{color:red}<--\n      serializedBuffer = buffer.join('');\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = ruleToken[2];\n\n      level = levels.pop();\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && !isBufferEmpty && buffer[0] == Marker.AT && ruleTokens.length > 0) {\n      // close brace at rule level for at-rule, e.g. a{--color:{@apply(--other-color)}<--\n      serializedBuffer = buffer.join('');\n      ruleToken[1].push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = ruleToken[2];\n\n      level = levels.pop();\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && ruleTokens.length > 0) {\n      // close brace at rule level after space, e.g. a{--color:{color:red }<--\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = ruleToken[2];\n\n      level = levels.pop();\n      seekingValue = false;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && propertyToken && !isBufferEmpty) {\n      // close brace at rule level, e.g. a{color:red}<--\n      serializedBuffer = buffer.join('');\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = allTokens;\n\n      level = levels.pop();\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && !isBufferEmpty && buffer[0] == Marker.AT) {\n      // close brace after at-rule at rule level, e.g. a{@apply(--variable)}<--\n      propertyToken = null;\n      ruleToken = null;\n      serializedBuffer = buffer.join('').trim();\n      newTokens.push([Token.AT_RULE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      newTokens = allTokens;\n\n      level = levels.pop();\n      seekingValue = false;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && levels[levels.length - 1] == Level.RULE) {\n      // close brace after a property block at rule level, e.g. a{--custom:{color:red;}<--\n      propertyToken = null;\n      ruleToken = ruleTokens.pop();\n      newTokens = ruleToken[2];\n\n      level = levels.pop();\n      seekingValue = false;\n      seekingPropertyBlockClosing = true;\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE && isVariable && propertyToken && !propertyToken[2]) {\n      // close brace after an empty variable declaration inside a rule, e.g. a{--color: }<--\n      propertyToken.push([Token.PROPERTY_VALUE, ' ', [originalMetadata(metadata, ' ', externalContext)]]);\n      isVariable = false;\n      propertyToken = null;\n      ruleToken = null;\n      newTokens = allTokens;\n\n      level = levels.pop();\n      seekingValue = false;\n      isVariable = false;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.RULE) {\n      // close brace after a rule, e.g. a{color:red;}<--\n      propertyToken = null;\n      ruleToken = null;\n      newTokens = allTokens;\n\n      level = levels.pop();\n      seekingValue = false;\n      isVariable = false;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.BLOCK && !isNested && position.index <= source.length - 1) {\n      // stray close brace at block level, e.g. a{color:red}color:blue}<--\n      externalContext.warnings.push('Unexpected \\'}\\' at ' + formatPosition([position.line, position.column, position.source]) + '.');\n      buffer.push(character);\n      isBufferEmpty = false;\n    } else if (character == Marker.CLOSE_CURLY_BRACKET && level == Level.BLOCK) {\n      // close brace at block level, e.g. @media screen {...}<--\n      break;\n    } else if (character == Marker.OPEN_ROUND_BRACKET && level == Level.RULE && seekingValue) {\n      // round open bracket, e.g. a{color:hsla(<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      roundBracketLevel++;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue && roundBracketLevel == 1) {\n      // round close bracket, e.g. a{color:hsla(0,0%,0%)<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n\n      roundBracketLevel--;\n      buffer = [];\n      isBufferEmpty = true;\n      isVariable = false;\n    } else if (character == Marker.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue) {\n      // round close bracket within other brackets, e.g. a{width:calc((10rem / 2)<--\n      buffer.push(character);\n      isBufferEmpty = false;\n      isVariable = false;\n      roundBracketLevel--;\n    } else if (character == Marker.FORWARD_SLASH && source[position.index + 1] != Marker.ASTERISK && level == Level.RULE && seekingValue && !isBufferEmpty) {\n      // forward slash within a property, e.g. a{background:url(image.png) 0 0/<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.FORWARD_SLASH && source[position.index + 1] != Marker.ASTERISK && level == Level.RULE && seekingValue) {\n      // forward slash within a property after space, e.g. a{background:url(image.png) 0 0 /<--\n      propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COMMA && level == Level.RULE && seekingValue && !isBufferEmpty) {\n      // comma within a property, e.g. a{background:url(image.png),<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n      propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.COMMA && level == Level.RULE && seekingValue) {\n      // comma within a property after space, e.g. a{background:url(image.png) ,<--\n      propertyToken.push([Token.PROPERTY_VALUE, character, [[position.line, position.column, position.source]]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (character == Marker.CLOSE_SQUARE_BRACKET && propertyToken && propertyToken.length > 1 && !isBufferEmpty && isRepeatToken(buffer)) {\n      buffer.push(character);\n      serializedBuffer = buffer.join('').trim();\n      propertyToken[propertyToken.length - 1][1] += serializedBuffer;\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if ((isSpace || (isNewLineNix && !isNewLineWin)) && level == Level.RULE && seekingValue && propertyToken && !isBufferEmpty) {\n      // space or *nix newline within property, e.g. a{margin:0 <--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (isNewLineWin && level == Level.RULE && seekingValue && propertyToken && buffer.length > 1) {\n      // win newline within property, e.g. a{margin:0\\r\\n<--\n      serializedBuffer = buffer.join('').trim();\n      propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (isNewLineWin && level == Level.RULE && seekingValue) {\n      // win newline\n      buffer = [];\n      isBufferEmpty = true;\n    } else if (isNewLineWin && buffer.length == 1) {\n      // ignore windows newline which is composed of two characters\n      buffer.pop();\n      isBufferEmpty = buffer.length === 0;\n    } else if (!isBufferEmpty || !isSpace && !isNewLineNix && !isNewLineWin && !isCarriageReturn) {\n      // any character\n      buffer.push(character);\n      isBufferEmpty = false;\n    }\n\n    wasEscaped = isEscaped;\n    isEscaped = !wasEscaped && character == Marker.BACK_SLASH;\n    wasCommentStart = isCommentStart;\n    wasCommentEnd = isCommentEnd;\n\n    position.line = (isNewLineWin || isNewLineNix || isCarriageReturn) ? position.line + 1 : position.line;\n    position.column = (isNewLineWin || isNewLineNix || isCarriageReturn) ? 0 : position.column + 1;\n  }\n\n  if (seekingValue) {\n    externalContext.warnings.push('Missing \\'}\\' at ' + formatPosition([position.line, position.column, position.source]) + '.');\n  }\n\n  if (seekingValue && buffer.length > 0) {\n    serializedBuffer = buffer.join('').replace(TAIL_BROKEN_VALUE_PATTERN, '');\n    propertyToken.push([Token.PROPERTY_VALUE, serializedBuffer, [originalMetadata(metadata, serializedBuffer, externalContext)]]);\n\n    buffer = [];\n  }\n\n  if (buffer.length > 0) {\n    externalContext.warnings.push('Invalid character(s) \\'' + buffer.join('') + '\\' at ' + formatPosition(metadata) + '. Ignoring.');\n  }\n\n  return allTokens;\n}\n\nfunction isIgnoreStartComment(buffer) {\n  return IGNORE_START_COMMENT_PATTERN.test(buffer.join('') + Marker.FORWARD_SLASH);\n}\n\nfunction isIgnoreEndComment(buffer) {\n  return IGNORE_END_COMMENT_PATTERN.test(buffer.join('') + Marker.FORWARD_SLASH);\n}\n\nfunction originalMetadata(metadata, value, externalContext, selectorFallbacks) {\n  var source = metadata[2];\n\n  return externalContext.inputSourceMapTracker.isTracking(source) ?\n    externalContext.inputSourceMapTracker.originalPositionFor(metadata, value.length, selectorFallbacks) :\n    metadata;\n}\n\nfunction tokenTypeFrom(buffer) {\n  var isAtRule = buffer[0] == Marker.AT || buffer[0] == Marker.UNDERSCORE;\n  var ruleWord = buffer.join('').split(RULE_WORD_SEPARATOR_PATTERN)[0];\n\n  if (isAtRule && BLOCK_RULES.indexOf(ruleWord) > -1) {\n    return Token.NESTED_BLOCK;\n  } else if (isAtRule && AT_RULES.indexOf(ruleWord) > -1) {\n    return Token.AT_RULE;\n  } else if (isAtRule) {\n    return Token.AT_RULE_BLOCK;\n  } else {\n    return Token.RULE;\n  }\n}\n\nfunction tokenScopeFrom(tokenType) {\n  if (tokenType == Token.RULE) {\n    return Token.RULE_SCOPE;\n  } else if (tokenType == Token.NESTED_BLOCK) {\n    return Token.NESTED_BLOCK_SCOPE;\n  } else if (tokenType == Token.AT_RULE_BLOCK) {\n    return Token.AT_RULE_BLOCK_SCOPE;\n  }\n}\n\nfunction isPageMarginBox(buffer) {\n  var serializedBuffer = buffer.join('').trim();\n\n  return PAGE_MARGIN_BOXES.indexOf(serializedBuffer) > -1 || EXTRA_PAGE_BOXES.indexOf(serializedBuffer) > -1;\n}\n\nfunction isRepeatToken(buffer) {\n  return REPEAT_PATTERN.test(buffer.join('') + Marker.CLOSE_SQUARE_BRACKET);\n}\n\nmodule.exports = tokenize;\n"]},"metadata":{},"sourceType":"script"}