{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst CONSTRUCTORS = {\n  Object,\n  Array,\n  Function,\n  Number,\n  String,\n  Date,\n  RegExp\n};\n/* istanbul ignore else */\n\nif (typeof Buffer != \"undefined\") CONSTRUCTORS.Buffer = Buffer;\n/* istanbul ignore else */\n\nif (typeof Promise != \"undefined\") CONSTRUCTORS.Promise = Promise;\nconst getDef = Object.assign(_getDef, {\n  CONSTRUCTORS\n});\n\nfunction _getDef() {\n  return {\n    keyword: \"instanceof\",\n    schemaType: [\"string\", \"array\"],\n\n    compile(schema) {\n      if (typeof schema == \"string\") {\n        const C = getConstructor(schema);\n        return data => data instanceof C;\n      }\n\n      if (Array.isArray(schema)) {\n        const constructors = schema.map(getConstructor);\n        return data => {\n          for (const C of constructors) {\n            if (data instanceof C) return true;\n          }\n\n          return false;\n        };\n      }\n      /* istanbul ignore next */\n\n\n      throw new Error(\"ajv implementation error\");\n    },\n\n    metaSchema: {\n      anyOf: [{\n        type: \"string\"\n      }, {\n        type: \"array\",\n        items: {\n          type: \"string\"\n        }\n      }]\n    }\n  };\n}\n\nfunction getConstructor(c) {\n  const C = CONSTRUCTORS[c];\n  if (C) return C;\n  throw new Error(`invalid \"instanceof\" keyword value ${c}`);\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":{"version":3,"mappings":";;;;;AAIA,MAAMA,YAAY,GAA4C;AAC5DC,QAD4D;AAE5DC,OAF4D;AAG5DC,UAH4D;AAI5DC,QAJ4D;AAK5DC,QAL4D;AAM5DC,MAN4D;AAO5DC;AAP4D,CAA9D;AAUA;;AACA,IAAI,OAAOC,MAAP,IAAiB,WAArB,EAAkCR,YAAY,CAACQ,MAAb,GAAsBA,MAAtB;AAElC;;AACA,IAAI,OAAOC,OAAP,IAAkB,WAAtB,EAAmCT,YAAY,CAACS,OAAb,GAAuBA,OAAvB;AAEnC,MAAMC,MAAM,GAERT,MAAM,CAACU,MAAP,CAAcC,OAAd,EAAuB;AAACZ;AAAD,CAAvB,CAFJ;;AAIA,SAASY,OAAT,GAAgB;AACd,SAAO;AACLC,WAAO,EAAE,YADJ;AAELC,cAAU,EAAE,CAAC,QAAD,EAAW,OAAX,CAFP;;AAGLC,WAAO,CAACC,MAAD,EAA0B;AAC/B,UAAI,OAAOA,MAAP,IAAiB,QAArB,EAA+B;AAC7B,cAAMC,CAAC,GAAGC,cAAc,CAACF,MAAD,CAAxB;AACA,eAAQG,IAAD,IAAUA,IAAI,YAAYF,CAAjC;AACD;;AAED,UAAIf,KAAK,CAACkB,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,cAAMK,YAAY,GAAGL,MAAM,CAACM,GAAP,CAAWJ,cAAX,CAArB;AACA,eAAQC,IAAD,IAAS;AACd,eAAK,MAAMF,CAAX,IAAgBI,YAAhB,EAA8B;AAC5B,gBAAIF,IAAI,YAAYF,CAApB,EAAuB,OAAO,IAAP;AACxB;;AACD,iBAAO,KAAP;AACD,SALD;AAMD;AAED;;;AACA,YAAM,IAAIM,KAAJ,CAAU,0BAAV,CAAN;AACD,KArBI;;AAsBLC,cAAU,EAAE;AACVC,WAAK,EAAE,CAAC;AAACC,YAAI,EAAE;AAAP,OAAD,EAAmB;AAACA,YAAI,EAAE,OAAP;AAAgBC,aAAK,EAAE;AAACD,cAAI,EAAE;AAAP;AAAvB,OAAnB;AADG;AAtBP,GAAP;AA0BD;;AAED,SAASR,cAAT,CAAwBU,CAAxB,EAAiC;AAC/B,QAAMX,CAAC,GAAGjB,YAAY,CAAC4B,CAAD,CAAtB;AACA,MAAIX,CAAJ,EAAO,OAAOA,CAAP;AACP,QAAM,IAAIM,KAAJ,CAAU,sCAAsCK,CAAC,EAAjD,CAAN;AACD;;AAEDC,kBAAenB,MAAf;AACAoB,MAAM,CAACD,OAAP,GAAiBnB,MAAjB","names":["CONSTRUCTORS","Object","Array","Function","Number","String","Date","RegExp","Buffer","Promise","getDef","assign","_getDef","keyword","schemaType","compile","schema","C","getConstructor","data","isArray","constructors","map","Error","metaSchema","anyOf","type","items","c","exports","module"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/ajv-keywords/src/definitions/instanceof.ts"],"sourcesContent":["import type {FuncKeywordDefinition} from \"ajv\"\n\ntype Constructor = new (...args: any[]) => any\n\nconst CONSTRUCTORS: Record<string, Constructor | undefined> = {\n  Object,\n  Array,\n  Function,\n  Number,\n  String,\n  Date,\n  RegExp,\n}\n\n/* istanbul ignore else */\nif (typeof Buffer != \"undefined\") CONSTRUCTORS.Buffer = Buffer\n\n/* istanbul ignore else */\nif (typeof Promise != \"undefined\") CONSTRUCTORS.Promise = Promise\n\nconst getDef: (() => FuncKeywordDefinition) & {\n  CONSTRUCTORS: typeof CONSTRUCTORS\n} = Object.assign(_getDef, {CONSTRUCTORS})\n\nfunction _getDef(): FuncKeywordDefinition {\n  return {\n    keyword: \"instanceof\",\n    schemaType: [\"string\", \"array\"],\n    compile(schema: string | string[]) {\n      if (typeof schema == \"string\") {\n        const C = getConstructor(schema)\n        return (data) => data instanceof C\n      }\n\n      if (Array.isArray(schema)) {\n        const constructors = schema.map(getConstructor)\n        return (data) => {\n          for (const C of constructors) {\n            if (data instanceof C) return true\n          }\n          return false\n        }\n      }\n\n      /* istanbul ignore next */\n      throw new Error(\"ajv implementation error\")\n    },\n    metaSchema: {\n      anyOf: [{type: \"string\"}, {type: \"array\", items: {type: \"string\"}}],\n    },\n  }\n}\n\nfunction getConstructor(c: string): Constructor {\n  const C = CONSTRUCTORS[c]\n  if (C) return C\n  throw new Error(`invalid \"instanceof\" keyword value ${c}`)\n}\n\nexport default getDef\nmodule.exports = getDef\n"]},"metadata":{},"sourceType":"script"}