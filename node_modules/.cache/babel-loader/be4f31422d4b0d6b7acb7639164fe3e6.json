{"ast":null,"code":"'use strict';\n\nconst collections = require('./_collections.js');\n\nexports.type = 'visitor';\nexports.name = 'convertColors';\nexports.active = true;\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\nconst rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)';\nconst rComma = '\\\\s*,\\\\s*';\nconst regRGB = new RegExp('^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$');\nconst regHEX = /^#(([a-fA-F0-9])\\2){3}$/;\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @author Jed Schmidt\n *\n * @type {(rgb: Array<number>) => string}\n */\n\nconst convertRgbToHex = _ref => {\n  let [r, g, b] = _ref;\n  // combine the octets into a 32-bit integer as: [1][r][g][b]\n  const hexNumber = // operator precedence is (+) > (<<) > (|)\n  (256 + // [1][0]\n  r << // [1][r]\n  8 | // [1][r][0]\n  g) << // [1][r][g]\n  8 | // [1][r][g][0]\n  b; // serialize [1][r][g][b] to a hex string, and\n  // remove the 1 to get the number with 0s intact\n\n  return '#' + hexNumber.toString(16).slice(1).toUpperCase();\n};\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see https://www.w3.org/TR/SVG11/types.html#DataTypeColor\n * @see https://www.w3.org/TR/SVG11/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<{\n *   currentColor?: boolean | string | RegExp,\n *   names2hex?: boolean,\n *   rgb2hex?: boolean,\n *   shorthex?: boolean,\n *   shortname?: boolean,\n * }>}\n */\n\n\nexports.fn = (_root, params) => {\n  const {\n    currentColor = false,\n    names2hex = true,\n    rgb2hex = true,\n    shorthex = true,\n    shortname = true\n  } = params;\n  return {\n    element: {\n      enter: node => {\n        for (const [name, value] of Object.entries(node.attributes)) {\n          if (collections.colorsProps.includes(name)) {\n            let val = value; // convert colors to currentColor\n\n            if (currentColor) {\n              let matched;\n\n              if (typeof currentColor === 'string') {\n                matched = val === currentColor;\n              } else if (currentColor instanceof RegExp) {\n                matched = currentColor.exec(val) != null;\n              } else {\n                matched = val !== 'none';\n              }\n\n              if (matched) {\n                val = 'currentColor';\n              }\n            } // convert color name keyword to long hex\n\n\n            if (names2hex) {\n              const colorName = val.toLowerCase();\n\n              if (collections.colorsNames[colorName] != null) {\n                val = collections.colorsNames[colorName];\n              }\n            } // convert rgb() to long hex\n\n\n            if (rgb2hex) {\n              let match = val.match(regRGB);\n\n              if (match != null) {\n                let nums = match.slice(1, 4).map(m => {\n                  let n;\n\n                  if (m.indexOf('%') > -1) {\n                    n = Math.round(parseFloat(m) * 2.55);\n                  } else {\n                    n = Number(m);\n                  }\n\n                  return Math.max(0, Math.min(n, 255));\n                });\n                val = convertRgbToHex(nums);\n              }\n            } // convert long hex to short hex\n\n\n            if (shorthex) {\n              let match = val.match(regHEX);\n\n              if (match != null) {\n                val = '#' + match[0][1] + match[0][3] + match[0][5];\n              }\n            } // convert hex to short name\n\n\n            if (shortname) {\n              const colorName = val.toLowerCase();\n\n              if (collections.colorsShortNames[colorName] != null) {\n                val = collections.colorsShortNames[colorName];\n              }\n            }\n\n            node.attributes[name] = val;\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/plugins/convertColors.js"],"names":["collections","require","exports","type","name","active","description","rNumber","rComma","regRGB","RegExp","regHEX","convertRgbToHex","r","g","b","hexNumber","toString","slice","toUpperCase","fn","_root","params","currentColor","names2hex","rgb2hex","shorthex","shortname","element","enter","node","value","Object","entries","attributes","colorsProps","includes","val","matched","exec","colorName","toLowerCase","colorsNames","match","nums","map","m","n","indexOf","Math","round","parseFloat","Number","max","min","colorsShortNames"],"mappings":"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","sourcesContent":["'use strict';\n\nconst collections = require('./_collections.js');\n\nexports.type = 'visitor';\nexports.name = 'convertColors';\nexports.active = true;\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\n\nconst rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)';\nconst rComma = '\\\\s*,\\\\s*';\nconst regRGB = new RegExp(\n  '^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$'\n);\nconst regHEX = /^#(([a-fA-F0-9])\\2){3}$/;\n\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @author Jed Schmidt\n *\n * @type {(rgb: Array<number>) => string}\n */\nconst convertRgbToHex = ([r, g, b]) => {\n  // combine the octets into a 32-bit integer as: [1][r][g][b]\n  const hexNumber =\n    // operator precedence is (+) > (<<) > (|)\n    ((((256 + // [1][0]\n      r) << // [1][r]\n      8) | // [1][r][0]\n      g) << // [1][r][g]\n      8) | // [1][r][g][0]\n    b;\n  // serialize [1][r][g][b] to a hex string, and\n  // remove the 1 to get the number with 0s intact\n  return '#' + hexNumber.toString(16).slice(1).toUpperCase();\n};\n\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see https://www.w3.org/TR/SVG11/types.html#DataTypeColor\n * @see https://www.w3.org/TR/SVG11/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<{\n *   currentColor?: boolean | string | RegExp,\n *   names2hex?: boolean,\n *   rgb2hex?: boolean,\n *   shorthex?: boolean,\n *   shortname?: boolean,\n * }>}\n */\nexports.fn = (_root, params) => {\n  const {\n    currentColor = false,\n    names2hex = true,\n    rgb2hex = true,\n    shorthex = true,\n    shortname = true,\n  } = params;\n\n  return {\n    element: {\n      enter: (node) => {\n        for (const [name, value] of Object.entries(node.attributes)) {\n          if (collections.colorsProps.includes(name)) {\n            let val = value;\n\n            // convert colors to currentColor\n            if (currentColor) {\n              let matched;\n              if (typeof currentColor === 'string') {\n                matched = val === currentColor;\n              } else if (currentColor instanceof RegExp) {\n                matched = currentColor.exec(val) != null;\n              } else {\n                matched = val !== 'none';\n              }\n              if (matched) {\n                val = 'currentColor';\n              }\n            }\n\n            // convert color name keyword to long hex\n            if (names2hex) {\n              const colorName = val.toLowerCase();\n              if (collections.colorsNames[colorName] != null) {\n                val = collections.colorsNames[colorName];\n              }\n            }\n\n            // convert rgb() to long hex\n            if (rgb2hex) {\n              let match = val.match(regRGB);\n              if (match != null) {\n                let nums = match.slice(1, 4).map((m) => {\n                  let n;\n                  if (m.indexOf('%') > -1) {\n                    n = Math.round(parseFloat(m) * 2.55);\n                  } else {\n                    n = Number(m);\n                  }\n                  return Math.max(0, Math.min(n, 255));\n                });\n                val = convertRgbToHex(nums);\n              }\n            }\n\n            // convert long hex to short hex\n            if (shorthex) {\n              let match = val.match(regHEX);\n              if (match != null) {\n                val = '#' + match[0][1] + match[0][3] + match[0][5];\n              }\n            }\n\n            // convert hex to short name\n            if (shortname) {\n              const colorName = val.toLowerCase();\n              if (collections.colorsShortNames[colorName] != null) {\n                val = collections.colorsShortNames[colorName];\n              }\n            }\n\n            node.attributes[name] = val;\n          }\n        }\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}