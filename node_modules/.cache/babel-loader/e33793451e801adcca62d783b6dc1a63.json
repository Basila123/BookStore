{"ast":null,"code":"'use strict';\n\nconst {\n  detachNodeFromParent\n} = require('../lib/xast.js');\n\nconst {\n  editorNamespaces\n} = require('./_collections.js');\n\nexports.type = 'visitor';\nexports.name = 'removeEditorsNSData';\nexports.active = true;\nexports.description = 'removes editors namespaces, elements and attributes';\n/**\n * Remove editors namespaces, elements and attributes.\n *\n * @example\n * <svg xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\">\n * <sodipodi:namedview/>\n * <path sodipodi:nodetypes=\"cccc\"/>\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<{\n *   additionalNamespaces?: Array<string>\n * }>}\n */\n\nexports.fn = (_root, params) => {\n  let namespaces = editorNamespaces;\n\n  if (Array.isArray(params.additionalNamespaces)) {\n    namespaces = [...editorNamespaces, ...params.additionalNamespaces];\n  }\n  /**\n   * @type {Array<string>}\n   */\n\n\n  const prefixes = [];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect namespace aliases from svg element\n        if (node.name === 'svg') {\n          for (const [name, value] of Object.entries(node.attributes)) {\n            if (name.startsWith('xmlns:') && namespaces.includes(value)) {\n              prefixes.push(name.slice('xmlns:'.length)); // <svg xmlns:sodipodi=\"\">\n\n              delete node.attributes[name];\n            }\n          }\n        } // remove editor attributes, for example\n        // <* sodipodi:*=\"\">\n\n\n        for (const name of Object.keys(node.attributes)) {\n          if (name.includes(':')) {\n            const [prefix] = name.split(':');\n\n            if (prefixes.includes(prefix)) {\n              delete node.attributes[name];\n            }\n          }\n        } // remove editor elements, for example\n        // <sodipodi:*>\n\n\n        if (node.name.includes(':')) {\n          const [prefix] = node.name.split(':');\n\n          if (prefixes.includes(prefix)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/plugins/removeEditorsNSData.js"],"names":["detachNodeFromParent","require","editorNamespaces","exports","type","name","active","description","fn","_root","params","namespaces","Array","isArray","additionalNamespaces","prefixes","element","enter","node","parentNode","value","Object","entries","attributes","startsWith","includes","push","slice","length","keys","prefix","split"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,gBAAD,CAAxC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAuBD,OAAO,CAAC,mBAAD,CAApC;;AAEAE,OAAO,CAACC,IAAR,GAAe,SAAf;AACAD,OAAO,CAACE,IAAR,GAAe,qBAAf;AACAF,OAAO,CAACG,MAAR,GAAiB,IAAjB;AACAH,OAAO,CAACI,WAAR,GAAsB,qDAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,OAAO,CAACK,EAAR,GAAa,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC9B,MAAIC,UAAU,GAAGT,gBAAjB;;AACA,MAAIU,KAAK,CAACC,OAAN,CAAcH,MAAM,CAACI,oBAArB,CAAJ,EAAgD;AAC9CH,IAAAA,UAAU,GAAG,CAAC,GAAGT,gBAAJ,EAAsB,GAAGQ,MAAM,CAACI,oBAAhC,CAAb;AACD;AACD;AACF;AACA;;;AACE,QAAMC,QAAQ,GAAG,EAAjB;AACA,SAAO;AACLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,UAAP,KAAsB;AAC3B;AACA,YAAID,IAAI,CAACb,IAAL,KAAc,KAAlB,EAAyB;AACvB,eAAK,MAAM,CAACA,IAAD,EAAOe,KAAP,CAAX,IAA4BC,MAAM,CAACC,OAAP,CAAeJ,IAAI,CAACK,UAApB,CAA5B,EAA6D;AAC3D,gBAAIlB,IAAI,CAACmB,UAAL,CAAgB,QAAhB,KAA6Bb,UAAU,CAACc,QAAX,CAAoBL,KAApB,CAAjC,EAA6D;AAC3DL,cAAAA,QAAQ,CAACW,IAAT,CAAcrB,IAAI,CAACsB,KAAL,CAAW,SAASC,MAApB,CAAd,EAD2D,CAE3D;;AACA,qBAAOV,IAAI,CAACK,UAAL,CAAgBlB,IAAhB,CAAP;AACD;AACF;AACF,SAV0B,CAW3B;AACA;;;AACA,aAAK,MAAMA,IAAX,IAAmBgB,MAAM,CAACQ,IAAP,CAAYX,IAAI,CAACK,UAAjB,CAAnB,EAAiD;AAC/C,cAAIlB,IAAI,CAACoB,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtB,kBAAM,CAACK,MAAD,IAAWzB,IAAI,CAAC0B,KAAL,CAAW,GAAX,CAAjB;;AACA,gBAAIhB,QAAQ,CAACU,QAAT,CAAkBK,MAAlB,CAAJ,EAA+B;AAC7B,qBAAOZ,IAAI,CAACK,UAAL,CAAgBlB,IAAhB,CAAP;AACD;AACF;AACF,SApB0B,CAqB3B;AACA;;;AACA,YAAIa,IAAI,CAACb,IAAL,CAAUoB,QAAV,CAAmB,GAAnB,CAAJ,EAA6B;AAC3B,gBAAM,CAACK,MAAD,IAAWZ,IAAI,CAACb,IAAL,CAAU0B,KAAV,CAAgB,GAAhB,CAAjB;;AACA,cAAIhB,QAAQ,CAACU,QAAT,CAAkBK,MAAlB,CAAJ,EAA+B;AAC7B9B,YAAAA,oBAAoB,CAACkB,IAAD,EAAOC,UAAP,CAApB;AACD;AACF;AACF;AA9BM;AADJ,GAAP;AAkCD,CA3CD","sourcesContent":["'use strict';\n\nconst { detachNodeFromParent } = require('../lib/xast.js');\nconst { editorNamespaces } = require('./_collections.js');\n\nexports.type = 'visitor';\nexports.name = 'removeEditorsNSData';\nexports.active = true;\nexports.description = 'removes editors namespaces, elements and attributes';\n\n/**\n * Remove editors namespaces, elements and attributes.\n *\n * @example\n * <svg xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\">\n * <sodipodi:namedview/>\n * <path sodipodi:nodetypes=\"cccc\"/>\n *\n * @author Kir Belevich\n *\n * @type {import('../lib/types').Plugin<{\n *   additionalNamespaces?: Array<string>\n * }>}\n */\nexports.fn = (_root, params) => {\n  let namespaces = editorNamespaces;\n  if (Array.isArray(params.additionalNamespaces)) {\n    namespaces = [...editorNamespaces, ...params.additionalNamespaces];\n  }\n  /**\n   * @type {Array<string>}\n   */\n  const prefixes = [];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect namespace aliases from svg element\n        if (node.name === 'svg') {\n          for (const [name, value] of Object.entries(node.attributes)) {\n            if (name.startsWith('xmlns:') && namespaces.includes(value)) {\n              prefixes.push(name.slice('xmlns:'.length));\n              // <svg xmlns:sodipodi=\"\">\n              delete node.attributes[name];\n            }\n          }\n        }\n        // remove editor attributes, for example\n        // <* sodipodi:*=\"\">\n        for (const name of Object.keys(node.attributes)) {\n          if (name.includes(':')) {\n            const [prefix] = name.split(':');\n            if (prefixes.includes(prefix)) {\n              delete node.attributes[name];\n            }\n          }\n        }\n        // remove editor elements, for example\n        // <sodipodi:*>\n        if (node.name.includes(':')) {\n          const [prefix] = node.name.split(':');\n          if (prefixes.includes(prefix)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}