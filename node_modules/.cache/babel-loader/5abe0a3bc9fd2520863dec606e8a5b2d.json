{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst atrule = 'atrule';\nconst decl = 'decl';\nconst rule = 'rule';\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n\nfunction reduceCalcWhitespaces(node) {\n  if (node.type === 'space') {\n    node.value = ' ';\n  } else if (node.type === 'function') {\n    if (!variableFunctions.has(node.value.toLowerCase())) {\n      node.before = node.after = '';\n    }\n  }\n}\n\nfunction reduceWhitespaces(node) {\n  if (node.type === 'space') {\n    node.value = ' ';\n  } else if (node.type === 'div') {\n    node.before = node.after = '';\n  } else if (node.type === 'function') {\n    if (!variableFunctions.has(node.value.toLowerCase())) {\n      node.before = node.after = '';\n    }\n\n    if (node.value.toLowerCase() === 'calc') {\n      valueParser.walk(node.nodes, reduceCalcWhitespaces);\n      return false;\n    }\n  }\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-whitespace',\n\n    OnceExit(css) {\n      const cache = new Map();\n      css.walk(node => {\n        const {\n          type\n        } = node;\n\n        if ([decl, rule, atrule].includes(type) && node.raws.before) {\n          node.raws.before = node.raws.before.replace(/\\s/g, '');\n        }\n\n        if (type === decl) {\n          // Ensure that !important values do not have any excess whitespace\n          if (node.important) {\n            node.raws.important = '!important';\n          } // Remove whitespaces around ie 9 hack\n\n\n          node.value = node.value.replace(/\\s*(\\\\9)\\s*/, '$1');\n          const value = node.value;\n\n          if (cache.has(value)) {\n            node.value = cache.get(value);\n          } else {\n            const parsed = valueParser(node.value);\n            const result = parsed.walk(reduceWhitespaces).toString(); // Trim whitespace inside functions & dividers\n\n            node.value = result;\n            cache.set(value, result);\n          } // Remove extra semicolons and whitespace before the declaration\n\n\n          if (node.raws.before) {\n            const prev = node.prev();\n\n            if (prev && prev.type !== rule) {\n              node.raws.before = node.raws.before.replace(/;/g, '');\n            }\n          }\n\n          node.raws.between = ':';\n          node.raws.semicolon = false;\n        } else if (type === rule || type === atrule) {\n          node.raws.between = node.raws.after = '';\n          node.raws.semicolon = false;\n        }\n      }); // Remove final newline\n\n      css.raws.after = '';\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-normalize-whitespace/src/index.js"],"names":["valueParser","require","atrule","decl","rule","variableFunctions","Set","reduceCalcWhitespaces","node","type","value","has","toLowerCase","before","after","reduceWhitespaces","walk","nodes","pluginCreator","postcssPlugin","OnceExit","css","cache","Map","includes","raws","replace","important","get","parsed","result","toString","set","prev","between","semicolon","postcss","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\n\nconst atrule = 'atrule';\nconst decl = 'decl';\nconst rule = 'rule';\nconst variableFunctions = new Set(['var', 'env', 'constant']);\n\nfunction reduceCalcWhitespaces(node) {\n  if (node.type === 'space') {\n    node.value = ' ';\n  } else if (node.type === 'function') {\n    if (!variableFunctions.has(node.value.toLowerCase())) {\n      node.before = node.after = '';\n    }\n  }\n}\n\nfunction reduceWhitespaces(node) {\n  if (node.type === 'space') {\n    node.value = ' ';\n  } else if (node.type === 'div') {\n    node.before = node.after = '';\n  } else if (node.type === 'function') {\n    if (!variableFunctions.has(node.value.toLowerCase())) {\n      node.before = node.after = '';\n    }\n    if (node.value.toLowerCase() === 'calc') {\n      valueParser.walk(node.nodes, reduceCalcWhitespaces);\n      return false;\n    }\n  }\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-whitespace',\n\n    OnceExit(css) {\n      const cache = new Map();\n\n      css.walk((node) => {\n        const { type } = node;\n\n        if ([decl, rule, atrule].includes(type) && node.raws.before) {\n          node.raws.before = node.raws.before.replace(/\\s/g, '');\n        }\n\n        if (type === decl) {\n          // Ensure that !important values do not have any excess whitespace\n          if (node.important) {\n            node.raws.important = '!important';\n          }\n\n          // Remove whitespaces around ie 9 hack\n          node.value = node.value.replace(/\\s*(\\\\9)\\s*/, '$1');\n\n          const value = node.value;\n\n          if (cache.has(value)) {\n            node.value = cache.get(value);\n          } else {\n            const parsed = valueParser(node.value);\n            const result = parsed.walk(reduceWhitespaces).toString();\n\n            // Trim whitespace inside functions & dividers\n            node.value = result;\n            cache.set(value, result);\n          }\n\n          // Remove extra semicolons and whitespace before the declaration\n          if (node.raws.before) {\n            const prev = node.prev();\n\n            if (prev && prev.type !== rule) {\n              node.raws.before = node.raws.before.replace(/;/g, '');\n            }\n          }\n\n          node.raws.between = ':';\n          node.raws.semicolon = false;\n        } else if (type === rule || type === atrule) {\n          node.raws.between = node.raws.after = '';\n          node.raws.semicolon = false;\n        }\n      });\n\n      // Remove final newline\n      css.raws.after = '';\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}