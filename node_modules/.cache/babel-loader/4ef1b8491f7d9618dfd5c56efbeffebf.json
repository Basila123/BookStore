{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nconst {\n  stringHints,\n  numberHints\n} = require(\"./util/hints\");\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n * @param {string} value\n * @returns {value is number}\n */\n\nfunction isNumeric(value) {\n  return /^-?\\d+$/.test(value);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.instancePath ? error.instancePath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(_ref => {\n    let {\n      $ref\n    } = _ref;\n    return $ref;\n  }).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  const typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(\", \")})` : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema) {\n    let configuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    /** @type {string} */\n\n    this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split(\"/\");\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {boolean} logic\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema) {\n    let logic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let prevSchemas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let newLogic = logic;\n\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, newLogic, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return \"(recursive)\";\n      }\n\n      return this.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n    };\n\n    if (hasNotInSchema(schema) && !likeObject(schema)) {\n      if (canApplyNot(schema.not)) {\n        newLogic = !logic;\n        return formatInnerSchema(schema.not);\n      }\n\n      const needApplyLogicHere = !schema.not.not;\n      const prefix = logic ? \"\" : \"non \";\n      newLogic = !logic;\n      return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === \"Function\" ? \"function\" : item).join(\" | \");\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(\" | \")\n      );\n    }\n\n    if (typeof schema.const !== \"undefined\") {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(\" & \")\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : \"\"}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : \"\"}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : \"\"}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : hints.length > 0 ? `non-${type} | ${str}` : `non-${type}`;\n    }\n\n    if (likeString(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : str === \"string\" ? \"non-string\" : `non-string | ${str}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return `${logic ? \"\" : \"non-\"}boolean`;\n    }\n\n    if (likeArray(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minItems === \"number\") {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (typeof schema.maxItems === \"number\") {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push(\"should not have duplicate items\");\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n      let items = \"\";\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(\", \")}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = \"any\";\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = \"any\";\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? \", ...\" : \"\"}]${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeObject(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minProperties === \"number\") {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (typeof schema.maxProperties === \"number\") {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? \"s\" : \"\"} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(\" | \")}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      /** @type {Array<string>} */\n      // @ts-ignore\n\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? \"\" : \"?\"}`;\n      }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : [\"…\"] : []).join(\", \");\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? \"properties\" : \"property\"} ${dependency.map(dep => `'${dep}'`).join(\", \")} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : \"\"}}${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeNull(schema)) {\n      return `${logic ? \"\" : \"non-\"}null`;\n    }\n\n    if (Array.isArray(schema.type)) {\n      // not logic already applied in formatValidationError\n      return `${schema.type.join(\" | \")}`;\n    } // Fallback for unknown keywords\n    // not logic already applied in formatValidationError\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @param {boolean=} logic\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath) {\n    let needDot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let logic = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart, logic)}${needDot ? \".\" : \"\"}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = \"\";\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      instancePath: errorInstancePath\n    } = error;\n    const splittedInstancePath = errorInstancePath.split(\"/\");\n    /**\n     * @type {Array<string>}\n     */\n\n    const defaultValue = [];\n    const prettyInstancePath = splittedInstancePath.reduce((acc, val) => {\n      if (val.length > 0) {\n        if (isNumeric(val)) {\n          acc.push(`[${val}]`);\n        } else if (/^\\[/.test(val)) {\n          acc.push(val);\n        } else {\n          acc.push(`.${val}`);\n        }\n      }\n\n      return acc;\n    }, defaultValue).join(\"\");\n    const instancePath = `${this.baseDataPath}${prettyInstancePath}`; // const { keyword, instancePath: errorInstancePath } = error;\n    // const instancePath = `${this.baseDataPath}${errorInstancePath.replace(/\\//g, '.')}`;\n\n    switch (keyword) {\n      case \"type\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (params.type) {\n            case \"number\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"integer\":\n              return `${instancePath} should be an ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"string\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"boolean\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"array\":\n              return `${instancePath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"object\":\n              return `${instancePath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"null\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${instancePath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case \"instanceof\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"pattern\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } = params;\n          return `${instancePath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"format\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } = params;\n          return `${instancePath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"formatMinimum\":\n      case \"formatExclusiveMinimum\":\n      case \"formatMaximum\":\n      case \"formatExclusiveMaximum\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } = params;\n          return `${instancePath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minimum\":\n      case \"maximum\":\n      case \"exclusiveMinimum\":\n      case \"exclusiveMaximum\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } = params;\n          const [, ...hints] = getHints(\n          /** @type {Schema} */\n          parentSchema, true);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${instancePath} ${hints.join(\" \")}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"multipleOf\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } = params;\n          return `${instancePath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"patternRequired\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } = params;\n          return `${instancePath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${instancePath} should be longer than ${length} character${length > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${instancePath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${instancePath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          const max = limit + 1;\n          return `${instancePath} should be shorter than ${max} character${max > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"uniqueItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } = params;\n          return `${instancePath} should not contain the item '${\n          /** @type {{ data: Array<any> }} **/\n          error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"contains\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should contains at least one ${this.getSchemaPartText(parentSchema, [\"contains\"])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case \"required\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty = params.missingProperty.replace(/^\\./, \"\");\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${instancePath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, [\"properties\", missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } = params;\n          return `${instancePath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"dependencies\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } = params;\n          const dependencies = deps.split(\",\").map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(\", \");\n          return `${instancePath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"propertyNames\":\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } = params;\n          return `${instancePath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"enum\":\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${instancePath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"const\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"not\":\n        {\n          const postfix = likeObject(\n          /** @type {Schema} */\n          error.parentSchema) ? `\\n${this.getSchemaPartText(error.parentSchema)}` : \"\";\n          const schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n          if (canApplyNot(error.schema)) {\n            return `${instancePath} should be any ${schemaOutput}${postfix}.`;\n          }\n\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${instancePath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : \"\"}`;\n        }\n\n      case \"oneOf\":\n      case \"anyOf\":\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), \"   \")}`).join(\"\\n\")}`;\n          }\n\n          return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"if\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } = params;\n          return `${instancePath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case \"absolutePath\":\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${instancePath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${instancePath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, \"   \")}`;\n    }).join(\"\\n\");\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/schema-utils/dist/ValidationError.js"],"names":["Object","defineProperty","exports","value","default","stringHints","numberHints","require","SPECIFICITY","type","not","oneOf","anyOf","if","enum","const","instanceof","required","pattern","patternRequired","format","formatMinimum","formatMaximum","minimum","exclusiveMinimum","maximum","exclusiveMaximum","multipleOf","uniqueItems","contains","minLength","maxLength","minItems","maxItems","minProperties","maxProperties","dependencies","propertyNames","additionalItems","additionalProperties","absolutePath","isNumeric","test","filterMax","array","fn","evaluatedMax","reduce","max","item","Math","filter","filterChildren","children","newChildren","error","instancePath","length","keyword","findAllChildren","schemaPaths","i","predicate","schemaPath","indexOf","every","refs","extractRefs","childrenStart","slice","concat","schema","Array","isArray","map","$ref","s","groupChildrenByFirstChild","result","child","push","assign","reverse","indent","str","prefix","replace","hasNotInSchema","findFirstTypedSchema","canApplyNot","typedSchema","likeNumber","likeInteger","likeString","likeNull","likeBoolean","isObject","maybeObj","likeArray","items","likeObject","properties","patternProperties","getArticle","getSchemaNonTypes","formatHints","hints","join","getHints","logic","ValidationError","Error","constructor","errors","configuration","name","headerNameFromSchema","baseDataPathFromSchema","title","baseDataPath","splittedTitleFromSchema","match","headerName","postFormatter","header","message","formatValidationErrors","captureStackTrace","getSchemaPart","path","newPath","split","schemaPart","inner","formatSchema","prevSchemas","newLogic","formatInnerSchema","innerSchema","addSelf","includes","needApplyLogicHere","values","JSON","stringify","allOf","ifValue","then","thenValue","else","elseValue","hasAdditionalItems","Boolean","keys","allProperties","Set","objectStructure","property","isRequired","forEach","dependencyName","dependency","dep","getSchemaPartText","additionalPath","needDot","schemaText","description","link","getSchemaPartDescription","formatValidationError","errorInstancePath","splittedInstancePath","defaultValue","prettyInstancePath","acc","val","parentSchema","params","comparison","limit","missingPattern","data","missingProperty","hasProperty","additionalProperty","deps","trim","propertyName","postfix","schemaOutput","lastChild","remainingChildren","filteredChildren","nestedError","failingKeyword","ErrorInJSON","formattedError","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nconst {\n  stringHints,\n  numberHints\n} = require(\"./util/hints\");\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n * @param {string} value\n * @returns {value is number}\n */\n\nfunction isNumeric(value) {\n  return /^-?\\d+$/.test(value);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.instancePath ? error.instancePath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  const typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(\", \")})` : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split(\"/\");\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {boolean} logic\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema, logic = true, prevSchemas = []) {\n    let newLogic = logic;\n\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, newLogic, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return \"(recursive)\";\n      }\n\n      return this.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n    };\n\n    if (hasNotInSchema(schema) && !likeObject(schema)) {\n      if (canApplyNot(schema.not)) {\n        newLogic = !logic;\n        return formatInnerSchema(schema.not);\n      }\n\n      const needApplyLogicHere = !schema.not.not;\n      const prefix = logic ? \"\" : \"non \";\n      newLogic = !logic;\n      return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === \"Function\" ? \"function\" : item).join(\" | \");\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(\" | \")\n      );\n    }\n\n    if (typeof schema.const !== \"undefined\") {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(\" & \")\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : \"\"}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : \"\"}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : \"\"}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : hints.length > 0 ? `non-${type} | ${str}` : `non-${type}`;\n    }\n\n    if (likeString(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : str === \"string\" ? \"non-string\" : `non-string | ${str}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return `${logic ? \"\" : \"non-\"}boolean`;\n    }\n\n    if (likeArray(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minItems === \"number\") {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (typeof schema.maxItems === \"number\") {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push(\"should not have duplicate items\");\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n      let items = \"\";\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(\", \")}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = \"any\";\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = \"any\";\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? \", ...\" : \"\"}]${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeObject(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minProperties === \"number\") {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (typeof schema.maxProperties === \"number\") {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? \"s\" : \"\"} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(\" | \")}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      /** @type {Array<string>} */\n      // @ts-ignore\n\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? \"\" : \"?\"}`;\n      }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : [\"…\"] : []).join(\", \");\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? \"properties\" : \"property\"} ${dependency.map(dep => `'${dep}'`).join(\", \")} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : \"\"}}${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeNull(schema)) {\n      return `${logic ? \"\" : \"non-\"}null`;\n    }\n\n    if (Array.isArray(schema.type)) {\n      // not logic already applied in formatValidationError\n      return `${schema.type.join(\" | \")}`;\n    } // Fallback for unknown keywords\n    // not logic already applied in formatValidationError\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @param {boolean=} logic\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false, logic = true) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart, logic)}${needDot ? \".\" : \"\"}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = \"\";\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      instancePath: errorInstancePath\n    } = error;\n    const splittedInstancePath = errorInstancePath.split(\"/\");\n    /**\n     * @type {Array<string>}\n     */\n\n    const defaultValue = [];\n    const prettyInstancePath = splittedInstancePath.reduce((acc, val) => {\n      if (val.length > 0) {\n        if (isNumeric(val)) {\n          acc.push(`[${val}]`);\n        } else if (/^\\[/.test(val)) {\n          acc.push(val);\n        } else {\n          acc.push(`.${val}`);\n        }\n      }\n\n      return acc;\n    }, defaultValue).join(\"\");\n    const instancePath = `${this.baseDataPath}${prettyInstancePath}`; // const { keyword, instancePath: errorInstancePath } = error;\n    // const instancePath = `${this.baseDataPath}${errorInstancePath.replace(/\\//g, '.')}`;\n\n    switch (keyword) {\n      case \"type\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (params.type) {\n            case \"number\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"integer\":\n              return `${instancePath} should be an ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"string\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"boolean\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"array\":\n              return `${instancePath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"object\":\n              return `${instancePath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"null\":\n              return `${instancePath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${instancePath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case \"instanceof\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"pattern\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } = params;\n          return `${instancePath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"format\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } = params;\n          return `${instancePath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"formatMinimum\":\n      case \"formatExclusiveMinimum\":\n      case \"formatMaximum\":\n      case \"formatExclusiveMaximum\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } = params;\n          return `${instancePath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minimum\":\n      case \"maximum\":\n      case \"exclusiveMinimum\":\n      case \"exclusiveMaximum\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } = params;\n          const [, ...hints] = getHints(\n          /** @type {Schema} */\n          parentSchema, true);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${instancePath} ${hints.join(\" \")}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"multipleOf\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } = params;\n          return `${instancePath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"patternRequired\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } = params;\n          return `${instancePath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${instancePath} should be longer than ${length} character${length > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${instancePath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n\n          if (limit === 1) {\n            return `${instancePath} should be a non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${instancePath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          const max = limit + 1;\n          return `${instancePath} should be shorter than ${max} character${max > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"uniqueItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } = params;\n          return `${instancePath} should not contain the item '${\n          /** @type {{ data: Array<any> }} **/\n          error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } = params;\n          return `${instancePath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"contains\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should contains at least one ${this.getSchemaPartText(parentSchema, [\"contains\"])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case \"required\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty = params.missingProperty.replace(/^\\./, \"\");\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${instancePath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, [\"properties\", missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } = params;\n          return `${instancePath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"dependencies\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } = params;\n          const dependencies = deps.split(\",\").map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(\", \");\n          return `${instancePath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"propertyNames\":\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } = params;\n          return `${instancePath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"enum\":\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${instancePath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"const\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${instancePath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"not\":\n        {\n          const postfix = likeObject(\n          /** @type {Schema} */\n          error.parentSchema) ? `\\n${this.getSchemaPartText(error.parentSchema)}` : \"\";\n          const schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n          if (canApplyNot(error.schema)) {\n            return `${instancePath} should be any ${schemaOutput}${postfix}.`;\n          }\n\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${instancePath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : \"\"}`;\n        }\n\n      case \"oneOf\":\n      case \"anyOf\":\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), \"   \")}`).join(\"\\n\")}`;\n          }\n\n          return `${instancePath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"if\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } = params;\n          return `${instancePath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case \"absolutePath\":\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${instancePath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${instancePath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, \"   \")}`;\n    }).join(\"\\n\");\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}