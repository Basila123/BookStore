{"ast":null,"code":"'use strict';\n\nconst {\n  defaultPlugins,\n  resolvePluginConfig,\n  extendDefaultPlugins\n} = require('./svgo/config.js');\n\nconst {\n  parseSvg\n} = require('./parser.js');\n\nconst {\n  stringifySvg\n} = require('./stringifier.js');\n\nconst {\n  invokePlugins\n} = require('./svgo/plugins.js');\n\nconst JSAPI = require('./svgo/jsAPI.js');\n\nconst {\n  encodeSVGDatauri\n} = require('./svgo/tools.js');\n\nexports.extendDefaultPlugins = extendDefaultPlugins;\n\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n\n  const maxPassCount = config.multipass ? 10 : 1;\n  let prevResultSize = Number.POSITIVE_INFINITY;\n  let svgjs = null;\n  const info = {};\n\n  if (config.path != null) {\n    info.path = config.path;\n  }\n\n  for (let i = 0; i < maxPassCount; i += 1) {\n    info.multipassCount = i; // TODO throw this error in v3\n\n    try {\n      svgjs = parseSvg(input, config.path);\n    } catch (error) {\n      return {\n        error: error.toString(),\n        modernError: error\n      };\n    }\n\n    if (svgjs.error != null) {\n      if (config.path != null) {\n        svgjs.path = config.path;\n      }\n\n      return svgjs;\n    }\n\n    const plugins = config.plugins || defaultPlugins;\n\n    if (Array.isArray(plugins) === false) {\n      throw Error(\"Invalid plugins list. Provided 'plugins' in config should be an array.\");\n    }\n\n    const resolvedPlugins = plugins.map(resolvePluginConfig);\n    const globalOverrides = {};\n\n    if (config.floatPrecision != null) {\n      globalOverrides.floatPrecision = config.floatPrecision;\n    }\n\n    svgjs = invokePlugins(svgjs, info, resolvedPlugins, null, globalOverrides);\n    svgjs = stringifySvg(svgjs, config.js2svg);\n\n    if (svgjs.data.length < prevResultSize) {\n      input = svgjs.data;\n      prevResultSize = svgjs.data.length;\n    } else {\n      if (config.datauri) {\n        svgjs.data = encodeSVGDatauri(svgjs.data, config.datauri);\n      }\n\n      if (config.path != null) {\n        svgjs.path = config.path;\n      }\n\n      return svgjs;\n    }\n  }\n\n  return svgjs;\n};\n\nexports.optimize = optimize;\n/**\n * The factory that creates a content item with the helper methods.\n *\n * @param {Object} data which is passed to jsAPI constructor\n * @returns {JSAPI} content item\n */\n\nconst createContentItem = data => {\n  return new JSAPI(data);\n};\n\nexports.createContentItem = createContentItem;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/lib/svgo.js"],"names":["defaultPlugins","resolvePluginConfig","extendDefaultPlugins","require","parseSvg","stringifySvg","invokePlugins","JSAPI","encodeSVGDatauri","exports","optimize","input","config","Error","maxPassCount","multipass","prevResultSize","Number","POSITIVE_INFINITY","svgjs","info","path","i","multipassCount","error","toString","modernError","plugins","Array","isArray","resolvedPlugins","map","globalOverrides","floatPrecision","js2svg","data","length","datauri","createContentItem"],"mappings":"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","sourcesContent":["'use strict';\n\nconst {\n  defaultPlugins,\n  resolvePluginConfig,\n  extendDefaultPlugins,\n} = require('./svgo/config.js');\nconst { parseSvg } = require('./parser.js');\nconst { stringifySvg } = require('./stringifier.js');\nconst { invokePlugins } = require('./svgo/plugins.js');\nconst JSAPI = require('./svgo/jsAPI.js');\nconst { encodeSVGDatauri } = require('./svgo/tools.js');\n\nexports.extendDefaultPlugins = extendDefaultPlugins;\n\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  const maxPassCount = config.multipass ? 10 : 1;\n  let prevResultSize = Number.POSITIVE_INFINITY;\n  let svgjs = null;\n  const info = {};\n  if (config.path != null) {\n    info.path = config.path;\n  }\n  for (let i = 0; i < maxPassCount; i += 1) {\n    info.multipassCount = i;\n    // TODO throw this error in v3\n    try {\n      svgjs = parseSvg(input, config.path);\n    } catch (error) {\n      return { error: error.toString(), modernError: error };\n    }\n    if (svgjs.error != null) {\n      if (config.path != null) {\n        svgjs.path = config.path;\n      }\n      return svgjs;\n    }\n    const plugins = config.plugins || defaultPlugins;\n    if (Array.isArray(plugins) === false) {\n      throw Error(\n        \"Invalid plugins list. Provided 'plugins' in config should be an array.\"\n      );\n    }\n    const resolvedPlugins = plugins.map(resolvePluginConfig);\n    const globalOverrides = {};\n    if (config.floatPrecision != null) {\n      globalOverrides.floatPrecision = config.floatPrecision;\n    }\n    svgjs = invokePlugins(svgjs, info, resolvedPlugins, null, globalOverrides);\n    svgjs = stringifySvg(svgjs, config.js2svg);\n    if (svgjs.data.length < prevResultSize) {\n      input = svgjs.data;\n      prevResultSize = svgjs.data.length;\n    } else {\n      if (config.datauri) {\n        svgjs.data = encodeSVGDatauri(svgjs.data, config.datauri);\n      }\n      if (config.path != null) {\n        svgjs.path = config.path;\n      }\n      return svgjs;\n    }\n  }\n  return svgjs;\n};\nexports.optimize = optimize;\n\n/**\n * The factory that creates a content item with the helper methods.\n *\n * @param {Object} data which is passed to jsAPI constructor\n * @returns {JSAPI} content item\n */\nconst createContentItem = (data) => {\n  return new JSAPI(data);\n};\nexports.createContentItem = createContentItem;\n"]},"metadata":{},"sourceType":"script"}