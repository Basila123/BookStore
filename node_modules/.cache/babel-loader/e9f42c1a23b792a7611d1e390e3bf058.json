{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst error = {\n  message(_ref) {\n    let {\n      keyword,\n      schemaCode\n    } = _ref;\n    const comp = keyword === \"maxProperties\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;\n  },\n\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{limit: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: [\"maxProperties\", \"minProperties\"],\n  type: \"object\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode\n    } = cxt;\n    const op = keyword === \"maxProperties\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AAEA,MAAMA,KAAK,GAA2B;AACpCC,SAAO,OAAsB;AAAA,QAArB;AAACC,aAAD;AAAUC;AAAV,KAAqB;AAC3B,UAAMC,IAAI,GAAGF,OAAO,KAAK,eAAZ,GAA8B,MAA9B,GAAuC,OAApD;AACA,WAAO,kBAAG,iBAAiBE,IAAI,SAASD,UAAU,QAAlD;AACD,GAJmC;;AAKpCE,QAAM,EAAE;AAAA,QAAC;AAACF;AAAD,KAAD;AAAA,WAAkB,gBAAC,WAAWA,UAAU,GAAxC;AAAA;AAL4B,CAAtC;AAQA,MAAMG,GAAG,GAA0B;AACjCJ,SAAO,EAAE,CAAC,eAAD,EAAkB,eAAlB,CADwB;AAEjCK,MAAI,EAAE,QAF2B;AAGjCC,YAAU,EAAE,QAHqB;AAIjCC,OAAK,EAAE,IAJ0B;AAKjCT,OALiC;;AAMjCU,MAAI,CAACC,GAAD,EAAgB;AAClB,UAAM;AAACT,aAAD;AAAUU,UAAV;AAAgBT;AAAhB,QAA8BQ,GAApC;AACA,UAAME,EAAE,GAAGX,OAAO,KAAK,eAAZ,GAA8BY,oBAAUC,EAAxC,GAA6CD,oBAAUE,EAAlE;AACAL,OAAG,CAACM,SAAJ,CAAc,gBAAC,eAAeL,IAAI,YAAYC,EAAE,IAAIV,UAAU,EAA9D;AACD;;AAVgC,CAAnC;AAaAe,kBAAeZ,GAAf","names":["error","message","keyword","schemaCode","comp","params","def","type","schemaType","$data","code","cxt","data","op","codegen_1","GT","LT","fail$data","exports"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/ajv-formats/node_modules/ajv/lib/vocabularies/validation/limitProperties.ts"],"sourcesContent":["import type {CodeKeywordDefinition, KeywordErrorDefinition} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_, str, operators} from \"../../compile/codegen\"\n\nconst error: KeywordErrorDefinition = {\n  message({keyword, schemaCode}) {\n    const comp = keyword === \"maxProperties\" ? \"more\" : \"fewer\"\n    return str`must NOT have ${comp} than ${schemaCode} items`\n  },\n  params: ({schemaCode}) => _`{limit: ${schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: [\"maxProperties\", \"minProperties\"],\n  type: \"object\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {keyword, data, schemaCode} = cxt\n    const op = keyword === \"maxProperties\" ? operators.GT : operators.LT\n    cxt.fail$data(_`Object.keys(${data}).length ${op} ${schemaCode}`)\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}