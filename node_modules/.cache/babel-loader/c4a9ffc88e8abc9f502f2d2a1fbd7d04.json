{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTuple = void 0;\n\nconst codegen_1 = require(\"../../compile/codegen\");\n\nconst util_1 = require(\"../../compile/util\");\n\nconst code_1 = require(\"../code\");\n\nconst def = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"array\", \"boolean\"],\n  before: \"uniqueItems\",\n\n  code(cxt) {\n    const {\n      schema,\n      it\n    } = cxt;\n    if (Array.isArray(schema)) return validateTuple(cxt, \"additionalItems\", schema);\n    it.items = true;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    cxt.ok((0, code_1.validateArray)(cxt));\n  }\n\n};\n\nfunction validateTuple(cxt, extraItems) {\n  let schArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : cxt.schema;\n  const {\n    gen,\n    parentSchema,\n    data,\n    keyword,\n    it\n  } = cxt;\n  checkStrictTuple(parentSchema);\n\n  if (it.opts.unevaluated && schArr.length && it.items !== true) {\n    it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);\n  }\n\n  const valid = gen.name(\"valid\");\n  const len = gen.const(\"len\", (0, codegen_1._)`${data}.length`);\n  schArr.forEach((sch, i) => {\n    if ((0, util_1.alwaysValidSchema)(it, sch)) return;\n    gen.if((0, codegen_1._)`${len} > ${i}`, () => cxt.subschema({\n      keyword,\n      schemaProp: i,\n      dataProp: i\n    }, valid));\n    cxt.ok(valid);\n  });\n\n  function checkStrictTuple(sch) {\n    const {\n      opts,\n      errSchemaPath\n    } = it;\n    const l = schArr.length;\n    const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);\n\n    if (opts.strictTuples && !fullTuple) {\n      const msg = `\"${keyword}\" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path \"${errSchemaPath}\"`;\n      (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);\n    }\n  }\n}\n\nexports.validateTuple = validateTuple;\nexports.default = def;","map":{"version":3,"mappings":";;;;;;;AAEA;;AACA;;AACA;;AAEA,MAAMA,GAAG,GAA0B;AACjCC,SAAO,EAAE,OADwB;AAEjCC,MAAI,EAAE,OAF2B;AAGjCC,YAAU,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,SAApB,CAHqB;AAIjCC,QAAM,EAAE,aAJyB;;AAKjCC,MAAI,CAACC,GAAD,EAAgB;AAClB,UAAM;AAACC,YAAD;AAASC;AAAT,QAAeF,GAArB;AACA,QAAIG,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B,OAAOI,aAAa,CAACL,GAAD,EAAM,iBAAN,EAAyBC,MAAzB,CAApB;AAC3BC,MAAE,CAACI,KAAH,GAAW,IAAX;AACA,QAAI,8BAAkBJ,EAAlB,EAAsBD,MAAtB,CAAJ,EAAmC;AACnCD,OAAG,CAACO,EAAJ,CAAO,0BAAcP,GAAd,CAAP;AACD;;AAXgC,CAAnC;;AAcA,SAAgBK,aAAhB,CACEL,GADF,EAEEQ,UAFF,EAGkC;AAAA,MAAhCC,MAAgC,uEAAVT,GAAG,CAACC,MAAM;AAEhC,QAAM;AAACS,OAAD;AAAMC,gBAAN;AAAoBC,QAApB;AAA0BjB,WAA1B;AAAmCO;AAAnC,MAAyCF,GAA/C;AACAa,kBAAgB,CAACF,YAAD,CAAhB;;AACA,MAAIT,EAAE,CAACY,IAAH,CAAQC,WAAR,IAAuBN,MAAM,CAACO,MAA9B,IAAwCd,EAAE,CAACI,KAAH,KAAa,IAAzD,EAA+D;AAC7DJ,MAAE,CAACI,KAAH,GAAWW,sBAAeX,KAAf,CAAqBI,GAArB,EAA0BD,MAAM,CAACO,MAAjC,EAAyCd,EAAE,CAACI,KAA5C,CAAX;AACD;;AACD,QAAMY,KAAK,GAAGR,GAAG,CAACS,IAAJ,CAAS,OAAT,CAAd;AACA,QAAMC,GAAG,GAAGV,GAAG,CAACW,KAAJ,CAAU,KAAV,EAAiB,gBAAC,GAAGT,IAAI,SAAzB,CAAZ;AACAH,QAAM,CAACa,OAAP,CAAe,CAACC,GAAD,EAAiBC,CAAjB,KAA8B;AAC3C,QAAI,8BAAkBtB,EAAlB,EAAsBqB,GAAtB,CAAJ,EAAgC;AAChCb,OAAG,CAACe,EAAJ,CAAO,gBAAC,GAAGL,GAAG,MAAMI,CAAC,EAArB,EAAyB,MACvBxB,GAAG,CAAC0B,SAAJ,CACE;AACE/B,aADF;AAEEgC,gBAAU,EAAEH,CAFd;AAGEI,cAAQ,EAAEJ;AAHZ,KADF,EAMEN,KANF,CADF;AAUAlB,OAAG,CAACO,EAAJ,CAAOW,KAAP;AACD,GAbD;;AAeA,WAASL,gBAAT,CAA0BU,GAA1B,EAA8C;AAC5C,UAAM;AAACT,UAAD;AAAOe;AAAP,QAAwB3B,EAA9B;AACA,UAAM4B,CAAC,GAAGrB,MAAM,CAACO,MAAjB;AACA,UAAMe,SAAS,GAAGD,CAAC,KAAKP,GAAG,CAACS,QAAV,KAAuBF,CAAC,KAAKP,GAAG,CAACU,QAAV,IAAsBV,GAAG,CAACf,UAAD,CAAH,KAAoB,KAAjE,CAAlB;;AACA,QAAIM,IAAI,CAACoB,YAAL,IAAqB,CAACH,SAA1B,EAAqC;AACnC,YAAMI,GAAG,GAAG,IAAIxC,OAAO,QAAQmC,CAAC,oCAAoCtB,UAAU,4CAA4CqB,aAAa,GAAvI;AACA,kCAAgB3B,EAAhB,EAAoBiC,GAApB,EAAyBrB,IAAI,CAACoB,YAA9B;AACD;AACF;AACF;;AApCDE;AAsCAA,kBAAe1C,GAAf","names":["def","keyword","type","schemaType","before","code","cxt","schema","it","Array","isArray","validateTuple","items","ok","extraItems","schArr","gen","parentSchema","data","checkStrictTuple","opts","unevaluated","length","util_1","valid","name","len","const","forEach","sch","i","if","subschema","schemaProp","dataProp","errSchemaPath","l","fullTuple","minItems","maxItems","strictTuples","msg","exports"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/ajv/lib/vocabularies/applicator/items.ts"],"sourcesContent":["import type {CodeKeywordDefinition, AnySchema, AnySchemaObject} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {_} from \"../../compile/codegen\"\nimport {alwaysValidSchema, mergeEvaluated, checkStrictMode} from \"../../compile/util\"\nimport {validateArray} from \"../code\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"array\", \"boolean\"],\n  before: \"uniqueItems\",\n  code(cxt: KeywordCxt) {\n    const {schema, it} = cxt\n    if (Array.isArray(schema)) return validateTuple(cxt, \"additionalItems\", schema)\n    it.items = true\n    if (alwaysValidSchema(it, schema)) return\n    cxt.ok(validateArray(cxt))\n  },\n}\n\nexport function validateTuple(\n  cxt: KeywordCxt,\n  extraItems: string,\n  schArr: AnySchema[] = cxt.schema\n): void {\n  const {gen, parentSchema, data, keyword, it} = cxt\n  checkStrictTuple(parentSchema)\n  if (it.opts.unevaluated && schArr.length && it.items !== true) {\n    it.items = mergeEvaluated.items(gen, schArr.length, it.items)\n  }\n  const valid = gen.name(\"valid\")\n  const len = gen.const(\"len\", _`${data}.length`)\n  schArr.forEach((sch: AnySchema, i: number) => {\n    if (alwaysValidSchema(it, sch)) return\n    gen.if(_`${len} > ${i}`, () =>\n      cxt.subschema(\n        {\n          keyword,\n          schemaProp: i,\n          dataProp: i,\n        },\n        valid\n      )\n    )\n    cxt.ok(valid)\n  })\n\n  function checkStrictTuple(sch: AnySchemaObject): void {\n    const {opts, errSchemaPath} = it\n    const l = schArr.length\n    const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false)\n    if (opts.strictTuples && !fullTuple) {\n      const msg = `\"${keyword}\" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path \"${errSchemaPath}\"`\n      checkStrictMode(it, msg, opts.strictTuples)\n    }\n  }\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}