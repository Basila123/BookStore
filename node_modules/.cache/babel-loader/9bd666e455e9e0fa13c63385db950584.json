{"ast":null,"code":"'use strict';\n\nconst {\n  list\n} = require('postcss');\n\nconst {\n  isWidth,\n  isStyle,\n  isColor\n} = require('./validateWsc');\n\nconst none = /^\\s*(none|medium)(\\s+none(\\s+(none|currentcolor))?)?\\s*$/i;\nconst varRE = /(^.*var)(.*\\(.*--.*\\))(.*)/i;\n\nconst varPreserveCase = p => `${p[1].toLowerCase()}${p[2]}${p[3].toLowerCase()}`;\n\nconst toLower = v => {\n  const match = varRE.exec(v);\n  return match ? varPreserveCase(match) : v.toLowerCase();\n};\n\nmodule.exports = function parseWsc(value) {\n  if (none.test(value)) {\n    return ['medium', 'none', 'currentcolor'];\n  }\n\n  let width, style, color;\n  const values = list.space(value);\n\n  if (values.length > 1 && isStyle(values[1]) && values[0].toLowerCase() === 'none') {\n    values.unshift();\n    width = '0';\n  }\n\n  const unknown = [];\n  values.forEach(v => {\n    if (isStyle(v)) {\n      style = toLower(v);\n    } else if (isWidth(v)) {\n      width = toLower(v);\n    } else if (isColor(v)) {\n      color = toLower(v);\n    } else {\n      unknown.push(v);\n    }\n  });\n\n  if (unknown.length) {\n    if (!width && style && color) {\n      width = unknown.pop();\n    }\n\n    if (width && !style && color) {\n      style = unknown.pop();\n    }\n\n    if (width && style && !color) {\n      color = unknown.pop();\n    }\n  }\n\n  return [width, style, color];\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-merge-longhand/src/lib/parseWsc.js"],"names":["list","require","isWidth","isStyle","isColor","none","varRE","varPreserveCase","p","toLowerCase","toLower","v","match","exec","module","exports","parseWsc","value","test","width","style","color","values","space","length","unshift","unknown","forEach","push","pop"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAWC,OAAO,CAAC,SAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA;AAApB,IAAgCH,OAAO,CAAC,eAAD,CAA7C;;AAEA,MAAMI,IAAI,GAAG,2DAAb;AAEA,MAAMC,KAAK,GAAG,6BAAd;;AACA,MAAMC,eAAe,GAAIC,CAAD,IACrB,GAAEA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,EAAmB,GAAED,CAAC,CAAC,CAAD,CAAI,GAAEA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,EAAmB,EADpD;;AAEA,MAAMC,OAAO,GAAIC,CAAD,IAAO;AACrB,QAAMC,KAAK,GAAGN,KAAK,CAACO,IAAN,CAAWF,CAAX,CAAd;AACA,SAAOC,KAAK,GAAGL,eAAe,CAACK,KAAD,CAAlB,GAA4BD,CAAC,CAACF,WAAF,EAAxC;AACD,CAHD;;AAKAK,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACxC,MAAIZ,IAAI,CAACa,IAAL,CAAUD,KAAV,CAAJ,EAAsB;AACpB,WAAO,CAAC,QAAD,EAAW,MAAX,EAAmB,cAAnB,CAAP;AACD;;AAED,MAAIE,KAAJ,EAAWC,KAAX,EAAkBC,KAAlB;AAEA,QAAMC,MAAM,GAAGtB,IAAI,CAACuB,KAAL,CAAWN,KAAX,CAAf;;AAEA,MACEK,MAAM,CAACE,MAAP,GAAgB,CAAhB,IACArB,OAAO,CAACmB,MAAM,CAAC,CAAD,CAAP,CADP,IAEAA,MAAM,CAAC,CAAD,CAAN,CAAUb,WAAV,OAA4B,MAH9B,EAIE;AACAa,IAAAA,MAAM,CAACG,OAAP;AACAN,IAAAA,KAAK,GAAG,GAAR;AACD;;AAED,QAAMO,OAAO,GAAG,EAAhB;AAEAJ,EAAAA,MAAM,CAACK,OAAP,CAAgBhB,CAAD,IAAO;AACpB,QAAIR,OAAO,CAACQ,CAAD,CAAX,EAAgB;AACdS,MAAAA,KAAK,GAAGV,OAAO,CAACC,CAAD,CAAf;AACD,KAFD,MAEO,IAAIT,OAAO,CAACS,CAAD,CAAX,EAAgB;AACrBQ,MAAAA,KAAK,GAAGT,OAAO,CAACC,CAAD,CAAf;AACD,KAFM,MAEA,IAAIP,OAAO,CAACO,CAAD,CAAX,EAAgB;AACrBU,MAAAA,KAAK,GAAGX,OAAO,CAACC,CAAD,CAAf;AACD,KAFM,MAEA;AACLe,MAAAA,OAAO,CAACE,IAAR,CAAajB,CAAb;AACD;AACF,GAVD;;AAYA,MAAIe,OAAO,CAACF,MAAZ,EAAoB;AAClB,QAAI,CAACL,KAAD,IAAUC,KAAV,IAAmBC,KAAvB,EAA8B;AAC5BF,MAAAA,KAAK,GAAGO,OAAO,CAACG,GAAR,EAAR;AACD;;AAED,QAAIV,KAAK,IAAI,CAACC,KAAV,IAAmBC,KAAvB,EAA8B;AAC5BD,MAAAA,KAAK,GAAGM,OAAO,CAACG,GAAR,EAAR;AACD;;AAED,QAAIV,KAAK,IAAIC,KAAT,IAAkB,CAACC,KAAvB,EAA8B;AAC5BA,MAAAA,KAAK,GAAGK,OAAO,CAACG,GAAR,EAAR;AACD;AACF;;AAED,SAAO,CAACV,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAAP;AACD,CA/CD","sourcesContent":["'use strict';\nconst { list } = require('postcss');\nconst { isWidth, isStyle, isColor } = require('./validateWsc');\n\nconst none = /^\\s*(none|medium)(\\s+none(\\s+(none|currentcolor))?)?\\s*$/i;\n\nconst varRE = /(^.*var)(.*\\(.*--.*\\))(.*)/i;\nconst varPreserveCase = (p) =>\n  `${p[1].toLowerCase()}${p[2]}${p[3].toLowerCase()}`;\nconst toLower = (v) => {\n  const match = varRE.exec(v);\n  return match ? varPreserveCase(match) : v.toLowerCase();\n};\n\nmodule.exports = function parseWsc(value) {\n  if (none.test(value)) {\n    return ['medium', 'none', 'currentcolor'];\n  }\n\n  let width, style, color;\n\n  const values = list.space(value);\n\n  if (\n    values.length > 1 &&\n    isStyle(values[1]) &&\n    values[0].toLowerCase() === 'none'\n  ) {\n    values.unshift();\n    width = '0';\n  }\n\n  const unknown = [];\n\n  values.forEach((v) => {\n    if (isStyle(v)) {\n      style = toLower(v);\n    } else if (isWidth(v)) {\n      width = toLower(v);\n    } else if (isColor(v)) {\n      color = toLower(v);\n    } else {\n      unknown.push(v);\n    }\n  });\n\n  if (unknown.length) {\n    if (!width && style && color) {\n      width = unknown.pop();\n    }\n\n    if (width && !style && color) {\n      style = unknown.pop();\n    }\n\n    if (width && style && !color) {\n      color = unknown.pop();\n    }\n  }\n\n  return [width, style, color];\n};\n"]},"metadata":{},"sourceType":"script"}