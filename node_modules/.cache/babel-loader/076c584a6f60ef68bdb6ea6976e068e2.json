{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst listStyleTypes = require('./listStyleTypes.json');\n\nconst definedTypes = new Set(listStyleTypes['list-style-type']);\nconst definedPosition = new Set(['inside', 'outside']);\n\nmodule.exports = function listStyleNormalizer(listStyle) {\n  const order = {\n    type: '',\n    position: '',\n    image: ''\n  };\n  listStyle.walk(decl => {\n    if (decl.type === 'word') {\n      if (definedTypes.has(decl.value)) {\n        // its a type field\n        order.type = `${order.type} ${decl.value}`;\n      } else if (definedPosition.has(decl.value)) {\n        order.position = `${order.position} ${decl.value}`;\n      } else if (decl.value === 'none') {\n        if (order.type.split(' ').filter(e => e !== '' && e !== ' ').includes('none')) {\n          order.image = `${order.image} ${decl.value}`;\n        } else {\n          order.type = `${order.type} ${decl.value}`;\n        }\n      } else {\n        order.type = `${order.type} ${decl.value}`;\n      }\n    }\n\n    if (decl.type === 'function') {\n      order.image = `${order.image} ${valueParser.stringify(decl)}`;\n    }\n  });\n  return `${order.type.trim()} ${order.position.trim()} ${order.image.trim()}`.trim();\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-ordered-values/src/rules/listStyle.js"],"names":["valueParser","require","listStyleTypes","definedTypes","Set","definedPosition","module","exports","listStyleNormalizer","listStyle","order","type","position","image","walk","decl","has","value","split","filter","e","includes","stringify","trim"],"mappings":"AAAA;;AACA,MAAMA,WAAW,GAAGC,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,uBAAD,CAA9B;;AAEA,MAAME,YAAY,GAAG,IAAIC,GAAJ,CAAQF,cAAc,CAAC,iBAAD,CAAtB,CAArB;AAEA,MAAMG,eAAe,GAAG,IAAID,GAAJ,CAAQ,CAAC,QAAD,EAAW,SAAX,CAAR,CAAxB;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA6BC,SAA7B,EAAwC;AACvD,QAAMC,KAAK,GAAG;AAAEC,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,QAAQ,EAAE,EAAtB;AAA0BC,IAAAA,KAAK,EAAE;AAAjC,GAAd;AAEAJ,EAAAA,SAAS,CAACK,IAAV,CAAgBC,IAAD,IAAU;AACvB,QAAIA,IAAI,CAACJ,IAAL,KAAc,MAAlB,EAA0B;AACxB,UAAIR,YAAY,CAACa,GAAb,CAAiBD,IAAI,CAACE,KAAtB,CAAJ,EAAkC;AAChC;AACAP,QAAAA,KAAK,CAACC,IAAN,GAAc,GAAED,KAAK,CAACC,IAAK,IAAGI,IAAI,CAACE,KAAM,EAAzC;AACD,OAHD,MAGO,IAAIZ,eAAe,CAACW,GAAhB,CAAoBD,IAAI,CAACE,KAAzB,CAAJ,EAAqC;AAC1CP,QAAAA,KAAK,CAACE,QAAN,GAAkB,GAAEF,KAAK,CAACE,QAAS,IAAGG,IAAI,CAACE,KAAM,EAAjD;AACD,OAFM,MAEA,IAAIF,IAAI,CAACE,KAAL,KAAe,MAAnB,EAA2B;AAChC,YACEP,KAAK,CAACC,IAAN,CACGO,KADH,CACS,GADT,EAEGC,MAFH,CAEWC,CAAD,IAAOA,CAAC,KAAK,EAAN,IAAYA,CAAC,KAAK,GAFnC,EAGGC,QAHH,CAGY,MAHZ,CADF,EAKE;AACAX,UAAAA,KAAK,CAACG,KAAN,GAAe,GAAEH,KAAK,CAACG,KAAM,IAAGE,IAAI,CAACE,KAAM,EAA3C;AACD,SAPD,MAOO;AACLP,UAAAA,KAAK,CAACC,IAAN,GAAc,GAAED,KAAK,CAACC,IAAK,IAAGI,IAAI,CAACE,KAAM,EAAzC;AACD;AACF,OAXM,MAWA;AACLP,QAAAA,KAAK,CAACC,IAAN,GAAc,GAAED,KAAK,CAACC,IAAK,IAAGI,IAAI,CAACE,KAAM,EAAzC;AACD;AACF;;AACD,QAAIF,IAAI,CAACJ,IAAL,KAAc,UAAlB,EAA8B;AAC5BD,MAAAA,KAAK,CAACG,KAAN,GAAe,GAAEH,KAAK,CAACG,KAAM,IAAGb,WAAW,CAACsB,SAAZ,CAAsBP,IAAtB,CAA4B,EAA5D;AACD;AACF,GAzBD;AA2BA,SAAQ,GAAEL,KAAK,CAACC,IAAN,CAAWY,IAAX,EAAkB,IAAGb,KAAK,CAACE,QAAN,CAAeW,IAAf,EAAsB,IAAGb,KAAK,CAACG,KAAN,CAAYU,IAAZ,EAAmB,EAApE,CAAsEA,IAAtE,EAAP;AACD,CA/BD","sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst listStyleTypes = require('./listStyleTypes.json');\n\nconst definedTypes = new Set(listStyleTypes['list-style-type']);\n\nconst definedPosition = new Set(['inside', 'outside']);\nmodule.exports = function listStyleNormalizer(listStyle) {\n  const order = { type: '', position: '', image: '' };\n\n  listStyle.walk((decl) => {\n    if (decl.type === 'word') {\n      if (definedTypes.has(decl.value)) {\n        // its a type field\n        order.type = `${order.type} ${decl.value}`;\n      } else if (definedPosition.has(decl.value)) {\n        order.position = `${order.position} ${decl.value}`;\n      } else if (decl.value === 'none') {\n        if (\n          order.type\n            .split(' ')\n            .filter((e) => e !== '' && e !== ' ')\n            .includes('none')\n        ) {\n          order.image = `${order.image} ${decl.value}`;\n        } else {\n          order.type = `${order.type} ${decl.value}`;\n        }\n      } else {\n        order.type = `${order.type} ${decl.value}`;\n      }\n    }\n    if (decl.type === 'function') {\n      order.image = `${order.image} ${valueParser.stringify(decl)}`;\n    }\n  });\n\n  return `${order.type.trim()} ${order.position.trim()} ${order.image.trim()}`.trim();\n};\n"]},"metadata":{},"sourceType":"script"}