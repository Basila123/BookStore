{"ast":null,"code":"'use strict';\n\nconst {\n  unit\n} = require('postcss-value-parser');\n\nfunction hasUnit(value) {\n  const parsedVal = unit(value);\n  return parsedVal && parsedVal.unit !== '';\n}\n\nmodule.exports = columns => {\n  const widths = [];\n  const other = [];\n  columns.walk(node => {\n    const {\n      type,\n      value\n    } = node;\n\n    if (type === 'word') {\n      if (hasUnit(value)) {\n        widths.push(value);\n      } else {\n        other.push(value);\n      }\n    }\n  }); // only transform if declaration is not invalid or a single value\n\n  if (other.length === 1 && widths.length === 1) {\n    return `${widths[0].trimStart()} ${other[0].trimStart()}`;\n  }\n\n  return columns;\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-ordered-values/src/rules/columns.js"],"names":["unit","require","hasUnit","value","parsedVal","module","exports","columns","widths","other","walk","node","type","push","length","trimStart"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAWC,OAAO,CAAC,sBAAD,CAAxB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,QAAMC,SAAS,GAAGJ,IAAI,CAACG,KAAD,CAAtB;AACA,SAAOC,SAAS,IAAIA,SAAS,CAACJ,IAAV,KAAmB,EAAvC;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,KAAK,GAAG,EAAd;AACAF,EAAAA,OAAO,CAACG,IAAR,CAAcC,IAAD,IAAU;AACrB,UAAM;AAAEC,MAAAA,IAAF;AAAQT,MAAAA;AAAR,QAAkBQ,IAAxB;;AACA,QAAIC,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAIV,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClBK,QAAAA,MAAM,CAACK,IAAP,CAAYV,KAAZ;AACD,OAFD,MAEO;AACLM,QAAAA,KAAK,CAACI,IAAN,CAAWV,KAAX;AACD;AACF;AACF,GATD,EAH4B,CAc5B;;AACA,MAAIM,KAAK,CAACK,MAAN,KAAiB,CAAjB,IAAsBN,MAAM,CAACM,MAAP,KAAkB,CAA5C,EAA+C;AAC7C,WAAQ,GAAEN,MAAM,CAAC,CAAD,CAAN,CAAUO,SAAV,EAAsB,IAAGN,KAAK,CAAC,CAAD,CAAL,CAASM,SAAT,EAAqB,EAAxD;AACD;;AAED,SAAOR,OAAP;AACD,CApBD","sourcesContent":["'use strict';\nconst { unit } = require('postcss-value-parser');\n\nfunction hasUnit(value) {\n  const parsedVal = unit(value);\n  return parsedVal && parsedVal.unit !== '';\n}\n\nmodule.exports = (columns) => {\n  const widths = [];\n  const other = [];\n  columns.walk((node) => {\n    const { type, value } = node;\n    if (type === 'word') {\n      if (hasUnit(value)) {\n        widths.push(value);\n      } else {\n        other.push(value);\n      }\n    }\n  });\n\n  // only transform if declaration is not invalid or a single value\n  if (other.length === 1 && widths.length === 1) {\n    return `${widths[0].trimStart()} ${other[0].trimStart()}`;\n  }\n\n  return columns;\n};\n"]},"metadata":{},"sourceType":"script"}