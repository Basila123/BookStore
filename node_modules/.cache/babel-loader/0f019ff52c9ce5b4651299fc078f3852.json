{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n */\n\nconst {\n  visitSkip,\n  detachNodeFromParent\n} = require('../lib/xast.js');\n\nconst JSAPI = require('../lib/svgo/jsAPI.js');\n\nexports.name = 'mergeStyles';\nexports.type = 'visitor';\nexports.active = true;\nexports.description = 'merge multiple style elements into one';\n/**\n * Merge multiple style elements into one.\n *\n * @author strarsis <strarsis@gmail.com>\n *\n * @type {import('../lib/types').Plugin<void>}\n */\n\nexports.fn = () => {\n  /**\n   * @type {null | XastElement}\n   */\n  let firstStyleElement = null;\n  let collectedStyles = '';\n  let styleContentType = 'text';\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // skip <foreignObject> content\n        if (node.name === 'foreignObject') {\n          return visitSkip;\n        } // collect style elements\n\n\n        if (node.name !== 'style') {\n          return;\n        } // skip <style> with invalid type attribute\n\n\n        if (node.attributes.type != null && node.attributes.type !== '' && node.attributes.type !== 'text/css') {\n          return;\n        } // extract style element content\n\n\n        let css = '';\n\n        for (const child of node.children) {\n          if (child.type === 'text') {\n            css += child.value;\n          }\n\n          if (child.type === 'cdata') {\n            styleContentType = 'cdata';\n            css += child.value;\n          }\n        } // remove empty style elements\n\n\n        if (css.trim().length === 0) {\n          detachNodeFromParent(node, parentNode);\n          return;\n        } // collect css and wrap with media query if present in attribute\n\n\n        if (node.attributes.media == null) {\n          collectedStyles += css;\n        } else {\n          collectedStyles += `@media ${node.attributes.media}{${css}}`;\n          delete node.attributes.media;\n        } // combine collected styles in the first style element\n\n\n        if (firstStyleElement == null) {\n          firstStyleElement = node;\n        } else {\n          detachNodeFromParent(node, parentNode);\n          firstStyleElement.children = [new JSAPI({\n            type: styleContentType,\n            value: collectedStyles\n          }, firstStyleElement)];\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/plugins/mergeStyles.js"],"names":["visitSkip","detachNodeFromParent","require","JSAPI","exports","name","type","active","description","fn","firstStyleElement","collectedStyles","styleContentType","element","enter","node","parentNode","attributes","css","child","children","value","trim","length","media"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA,MAAM;AAAEA,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAsCC,OAAO,CAAC,gBAAD,CAAnD;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AAEAE,OAAO,CAACC,IAAR,GAAe,aAAf;AACAD,OAAO,CAACE,IAAR,GAAe,SAAf;AACAF,OAAO,CAACG,MAAR,GAAiB,IAAjB;AACAH,OAAO,CAACI,WAAR,GAAsB,wCAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAJ,OAAO,CAACK,EAAR,GAAa,MAAM;AACjB;AACF;AACA;AACE,MAAIC,iBAAiB,GAAG,IAAxB;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,gBAAgB,GAAG,MAAvB;AAEA,SAAO;AACLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,CAACC,IAAD,EAAOC,UAAP,KAAsB;AAC3B;AACA,YAAID,IAAI,CAACV,IAAL,KAAc,eAAlB,EAAmC;AACjC,iBAAOL,SAAP;AACD,SAJ0B,CAM3B;;;AACA,YAAIe,IAAI,CAACV,IAAL,KAAc,OAAlB,EAA2B;AACzB;AACD,SAT0B,CAW3B;;;AACA,YACEU,IAAI,CAACE,UAAL,CAAgBX,IAAhB,IAAwB,IAAxB,IACAS,IAAI,CAACE,UAAL,CAAgBX,IAAhB,KAAyB,EADzB,IAEAS,IAAI,CAACE,UAAL,CAAgBX,IAAhB,KAAyB,UAH3B,EAIE;AACA;AACD,SAlB0B,CAoB3B;;;AACA,YAAIY,GAAG,GAAG,EAAV;;AACA,aAAK,MAAMC,KAAX,IAAoBJ,IAAI,CAACK,QAAzB,EAAmC;AACjC,cAAID,KAAK,CAACb,IAAN,KAAe,MAAnB,EAA2B;AACzBY,YAAAA,GAAG,IAAIC,KAAK,CAACE,KAAb;AACD;;AACD,cAAIF,KAAK,CAACb,IAAN,KAAe,OAAnB,EAA4B;AAC1BM,YAAAA,gBAAgB,GAAG,OAAnB;AACAM,YAAAA,GAAG,IAAIC,KAAK,CAACE,KAAb;AACD;AACF,SA9B0B,CAgC3B;;;AACA,YAAIH,GAAG,CAACI,IAAJ,GAAWC,MAAX,KAAsB,CAA1B,EAA6B;AAC3BtB,UAAAA,oBAAoB,CAACc,IAAD,EAAOC,UAAP,CAApB;AACA;AACD,SApC0B,CAsC3B;;;AACA,YAAID,IAAI,CAACE,UAAL,CAAgBO,KAAhB,IAAyB,IAA7B,EAAmC;AACjCb,UAAAA,eAAe,IAAIO,GAAnB;AACD,SAFD,MAEO;AACLP,UAAAA,eAAe,IAAK,UAASI,IAAI,CAACE,UAAL,CAAgBO,KAAM,IAAGN,GAAI,GAA1D;AACA,iBAAOH,IAAI,CAACE,UAAL,CAAgBO,KAAvB;AACD,SA5C0B,CA8C3B;;;AACA,YAAId,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,UAAAA,iBAAiB,GAAGK,IAApB;AACD,SAFD,MAEO;AACLd,UAAAA,oBAAoB,CAACc,IAAD,EAAOC,UAAP,CAApB;AACAN,UAAAA,iBAAiB,CAACU,QAAlB,GAA6B,CAC3B,IAAIjB,KAAJ,CACE;AAAEG,YAAAA,IAAI,EAAEM,gBAAR;AAA0BS,YAAAA,KAAK,EAAEV;AAAjC,WADF,EAEED,iBAFF,CAD2B,CAA7B;AAMD;AACF;AA3DM;AADJ,GAAP;AA+DD,CAvED","sourcesContent":["'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n */\n\nconst { visitSkip, detachNodeFromParent } = require('../lib/xast.js');\nconst JSAPI = require('../lib/svgo/jsAPI.js');\n\nexports.name = 'mergeStyles';\nexports.type = 'visitor';\nexports.active = true;\nexports.description = 'merge multiple style elements into one';\n\n/**\n * Merge multiple style elements into one.\n *\n * @author strarsis <strarsis@gmail.com>\n *\n * @type {import('../lib/types').Plugin<void>}\n */\nexports.fn = () => {\n  /**\n   * @type {null | XastElement}\n   */\n  let firstStyleElement = null;\n  let collectedStyles = '';\n  let styleContentType = 'text';\n\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // skip <foreignObject> content\n        if (node.name === 'foreignObject') {\n          return visitSkip;\n        }\n\n        // collect style elements\n        if (node.name !== 'style') {\n          return;\n        }\n\n        // skip <style> with invalid type attribute\n        if (\n          node.attributes.type != null &&\n          node.attributes.type !== '' &&\n          node.attributes.type !== 'text/css'\n        ) {\n          return;\n        }\n\n        // extract style element content\n        let css = '';\n        for (const child of node.children) {\n          if (child.type === 'text') {\n            css += child.value;\n          }\n          if (child.type === 'cdata') {\n            styleContentType = 'cdata';\n            css += child.value;\n          }\n        }\n\n        // remove empty style elements\n        if (css.trim().length === 0) {\n          detachNodeFromParent(node, parentNode);\n          return;\n        }\n\n        // collect css and wrap with media query if present in attribute\n        if (node.attributes.media == null) {\n          collectedStyles += css;\n        } else {\n          collectedStyles += `@media ${node.attributes.media}{${css}}`;\n          delete node.attributes.media;\n        }\n\n        // combine collected styles in the first style element\n        if (firstStyleElement == null) {\n          firstStyleElement = node;\n        } else {\n          detachNodeFromParent(node, parentNode);\n          firstStyleElement.children = [\n            new JSAPI(\n              { type: styleContentType, value: collectedStyles },\n              firstStyleElement\n            ),\n          ];\n        }\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"script"}