{"ast":null,"code":"'use strict';\n\nvar csstree = require('css-tree'),\n    csstools = require('../css-tools');\n\nvar CSSStyleDeclaration = function (node) {\n  this.parentNode = node;\n  this.properties = new Map();\n  this.hasSynced = false;\n  this.styleValue = null;\n  this.parseError = false;\n  const value = node.attributes.style;\n\n  if (value != null) {\n    this.addStyleValueHandler();\n    this.setStyleValue(value);\n  }\n}; // attr.style.value\n\n\nCSSStyleDeclaration.prototype.addStyleValueHandler = function () {\n  Object.defineProperty(this.parentNode.attributes, 'style', {\n    get: this.getStyleValue.bind(this),\n    set: this.setStyleValue.bind(this),\n    enumerable: true,\n    configurable: true\n  });\n};\n\nCSSStyleDeclaration.prototype.getStyleValue = function () {\n  return this.getCssText();\n};\n\nCSSStyleDeclaration.prototype.setStyleValue = function (newValue) {\n  this.properties.clear(); // reset all existing properties\n\n  this.styleValue = newValue;\n  this.hasSynced = false; // raw css changed\n};\n\nCSSStyleDeclaration.prototype._loadCssText = function () {\n  if (this.hasSynced) {\n    return;\n  }\n\n  this.hasSynced = true; // must be set here to prevent loop in setProperty(...)\n\n  if (!this.styleValue || this.styleValue.length === 0) {\n    return;\n  }\n\n  var inlineCssStr = this.styleValue;\n  var declarations = {};\n\n  try {\n    declarations = csstree.parse(inlineCssStr, {\n      context: 'declarationList',\n      parseValue: false\n    });\n  } catch (parseError) {\n    this.parseError = parseError;\n    return;\n  }\n\n  this.parseError = false;\n  var self = this;\n  declarations.children.each(function (declaration) {\n    try {\n      var styleDeclaration = csstools.csstreeToStyleDeclaration(declaration);\n      self.setProperty(styleDeclaration.name, styleDeclaration.value, styleDeclaration.priority);\n    } catch (styleError) {\n      if (styleError.message !== 'Unknown node type: undefined') {\n        self.parseError = styleError;\n      }\n    }\n  });\n}; // only reads from properties\n\n/**\n * Get the textual representation of the declaration block (equivalent to .cssText attribute).\n *\n * @return {string} Textual representation of the declaration block (empty string for no properties)\n */\n\n\nCSSStyleDeclaration.prototype.getCssText = function () {\n  var properties = this.getProperties();\n\n  if (this.parseError) {\n    // in case of a parse error, pass through original styles\n    return this.styleValue;\n  }\n\n  var cssText = [];\n  properties.forEach(function (property, propertyName) {\n    var strImportant = property.priority === 'important' ? '!important' : '';\n    cssText.push(propertyName.trim() + ':' + property.value.trim() + strImportant);\n  });\n  return cssText.join(';');\n};\n\nCSSStyleDeclaration.prototype._handleParseError = function () {\n  if (this.parseError) {\n    console.warn(\"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" + this.parseError);\n  }\n};\n\nCSSStyleDeclaration.prototype._getProperty = function (propertyName) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  var properties = this.getProperties();\n\n  this._handleParseError();\n\n  var property = properties.get(propertyName.trim());\n  return property;\n};\n/**\n * Return the optional priority, \"important\".\n *\n * @param {string} propertyName representing the property name to be checked.\n * @return {string} priority that represents the priority (e.g. \"important\") if one exists. If none exists, returns the empty string.\n */\n\n\nCSSStyleDeclaration.prototype.getPropertyPriority = function (propertyName) {\n  var property = this._getProperty(propertyName);\n\n  return property ? property.priority : '';\n};\n/**\n * Return the property value given a property name.\n *\n * @param {string} propertyName representing the property name to be checked.\n * @return {string} value containing the value of the property. If not set, returns the empty string.\n */\n\n\nCSSStyleDeclaration.prototype.getPropertyValue = function (propertyName) {\n  var property = this._getProperty(propertyName);\n\n  return property ? property.value : null;\n};\n/**\n * Return a property name.\n *\n * @param {number} index of the node to be fetched. The index is zero-based.\n * @return {string} propertyName that is the name of the CSS property at the specified index.\n */\n\n\nCSSStyleDeclaration.prototype.item = function (index) {\n  if (typeof index === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  var properties = this.getProperties();\n\n  this._handleParseError();\n\n  return Array.from(properties.keys())[index];\n};\n/**\n * Return all properties of the node.\n *\n * @return {Map} properties that is a Map with propertyName as key and property (propertyValue + propertyPriority) as value.\n */\n\n\nCSSStyleDeclaration.prototype.getProperties = function () {\n  this._loadCssText();\n\n  return this.properties;\n}; // writes to properties\n\n/**\n * Remove a property from the CSS declaration block.\n *\n * @param {string} propertyName representing the property name to be removed.\n * @return {string} oldValue equal to the value of the CSS property before it was removed.\n */\n\n\nCSSStyleDeclaration.prototype.removeProperty = function (propertyName) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  this.addStyleValueHandler();\n  var properties = this.getProperties();\n\n  this._handleParseError();\n\n  var oldValue = this.getPropertyValue(propertyName);\n  properties.delete(propertyName.trim());\n  return oldValue;\n};\n/**\n * Modify an existing CSS property or creates a new CSS property in the declaration block.\n *\n * @param {string} propertyName representing the CSS property name to be modified.\n * @param {string} value containing the new property value. If not specified, treated as the empty string. value must not contain \"!important\" -- that should be set using the priority parameter.\n * @param {string} priority allowing the \"important\" CSS priority to be set. If not specified, treated as the empty string.\n * @return {{value: string, priority: string}}\n */\n\n\nCSSStyleDeclaration.prototype.setProperty = function (propertyName, value, priority) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('propertyName argument required, but only not present.');\n  }\n\n  this.addStyleValueHandler();\n  var properties = this.getProperties();\n\n  this._handleParseError();\n\n  var property = {\n    value: value.trim(),\n    priority: priority.trim()\n  };\n  properties.set(propertyName.trim(), property);\n  return property;\n};\n\nmodule.exports = CSSStyleDeclaration;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-svgo/node_modules/svgo/lib/svgo/css-style-declaration.js"],"names":["csstree","require","csstools","CSSStyleDeclaration","node","parentNode","properties","Map","hasSynced","styleValue","parseError","value","attributes","style","addStyleValueHandler","setStyleValue","prototype","Object","defineProperty","get","getStyleValue","bind","set","enumerable","configurable","getCssText","newValue","clear","_loadCssText","length","inlineCssStr","declarations","parse","context","parseValue","self","children","each","declaration","styleDeclaration","csstreeToStyleDeclaration","setProperty","name","priority","styleError","message","getProperties","cssText","forEach","property","propertyName","strImportant","push","trim","join","_handleParseError","console","warn","_getProperty","Error","getPropertyPriority","getPropertyValue","item","index","Array","from","keys","removeProperty","oldValue","delete","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar csstree = require('css-tree'),\n  csstools = require('../css-tools');\n\nvar CSSStyleDeclaration = function (node) {\n  this.parentNode = node;\n\n  this.properties = new Map();\n  this.hasSynced = false;\n\n  this.styleValue = null;\n\n  this.parseError = false;\n  const value = node.attributes.style;\n  if (value != null) {\n    this.addStyleValueHandler();\n    this.setStyleValue(value);\n  }\n};\n\n// attr.style.value\n\nCSSStyleDeclaration.prototype.addStyleValueHandler = function () {\n  Object.defineProperty(this.parentNode.attributes, 'style', {\n    get: this.getStyleValue.bind(this),\n    set: this.setStyleValue.bind(this),\n    enumerable: true,\n    configurable: true,\n  });\n};\n\nCSSStyleDeclaration.prototype.getStyleValue = function () {\n  return this.getCssText();\n};\n\nCSSStyleDeclaration.prototype.setStyleValue = function (newValue) {\n  this.properties.clear(); // reset all existing properties\n  this.styleValue = newValue;\n  this.hasSynced = false; // raw css changed\n};\n\nCSSStyleDeclaration.prototype._loadCssText = function () {\n  if (this.hasSynced) {\n    return;\n  }\n  this.hasSynced = true; // must be set here to prevent loop in setProperty(...)\n\n  if (!this.styleValue || this.styleValue.length === 0) {\n    return;\n  }\n  var inlineCssStr = this.styleValue;\n\n  var declarations = {};\n  try {\n    declarations = csstree.parse(inlineCssStr, {\n      context: 'declarationList',\n      parseValue: false,\n    });\n  } catch (parseError) {\n    this.parseError = parseError;\n    return;\n  }\n  this.parseError = false;\n\n  var self = this;\n  declarations.children.each(function (declaration) {\n    try {\n      var styleDeclaration = csstools.csstreeToStyleDeclaration(declaration);\n      self.setProperty(\n        styleDeclaration.name,\n        styleDeclaration.value,\n        styleDeclaration.priority\n      );\n    } catch (styleError) {\n      if (styleError.message !== 'Unknown node type: undefined') {\n        self.parseError = styleError;\n      }\n    }\n  });\n};\n\n// only reads from properties\n\n/**\n * Get the textual representation of the declaration block (equivalent to .cssText attribute).\n *\n * @return {string} Textual representation of the declaration block (empty string for no properties)\n */\nCSSStyleDeclaration.prototype.getCssText = function () {\n  var properties = this.getProperties();\n\n  if (this.parseError) {\n    // in case of a parse error, pass through original styles\n    return this.styleValue;\n  }\n\n  var cssText = [];\n  properties.forEach(function (property, propertyName) {\n    var strImportant = property.priority === 'important' ? '!important' : '';\n    cssText.push(\n      propertyName.trim() + ':' + property.value.trim() + strImportant\n    );\n  });\n  return cssText.join(';');\n};\n\nCSSStyleDeclaration.prototype._handleParseError = function () {\n  if (this.parseError) {\n    console.warn(\n      \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n        this.parseError\n    );\n  }\n};\n\nCSSStyleDeclaration.prototype._getProperty = function (propertyName) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  var properties = this.getProperties();\n  this._handleParseError();\n\n  var property = properties.get(propertyName.trim());\n  return property;\n};\n\n/**\n * Return the optional priority, \"important\".\n *\n * @param {string} propertyName representing the property name to be checked.\n * @return {string} priority that represents the priority (e.g. \"important\") if one exists. If none exists, returns the empty string.\n */\nCSSStyleDeclaration.prototype.getPropertyPriority = function (propertyName) {\n  var property = this._getProperty(propertyName);\n  return property ? property.priority : '';\n};\n\n/**\n * Return the property value given a property name.\n *\n * @param {string} propertyName representing the property name to be checked.\n * @return {string} value containing the value of the property. If not set, returns the empty string.\n */\nCSSStyleDeclaration.prototype.getPropertyValue = function (propertyName) {\n  var property = this._getProperty(propertyName);\n  return property ? property.value : null;\n};\n\n/**\n * Return a property name.\n *\n * @param {number} index of the node to be fetched. The index is zero-based.\n * @return {string} propertyName that is the name of the CSS property at the specified index.\n */\nCSSStyleDeclaration.prototype.item = function (index) {\n  if (typeof index === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  var properties = this.getProperties();\n  this._handleParseError();\n\n  return Array.from(properties.keys())[index];\n};\n\n/**\n * Return all properties of the node.\n *\n * @return {Map} properties that is a Map with propertyName as key and property (propertyValue + propertyPriority) as value.\n */\nCSSStyleDeclaration.prototype.getProperties = function () {\n  this._loadCssText();\n  return this.properties;\n};\n\n// writes to properties\n\n/**\n * Remove a property from the CSS declaration block.\n *\n * @param {string} propertyName representing the property name to be removed.\n * @return {string} oldValue equal to the value of the CSS property before it was removed.\n */\nCSSStyleDeclaration.prototype.removeProperty = function (propertyName) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('1 argument required, but only 0 present.');\n  }\n\n  this.addStyleValueHandler();\n\n  var properties = this.getProperties();\n  this._handleParseError();\n\n  var oldValue = this.getPropertyValue(propertyName);\n  properties.delete(propertyName.trim());\n  return oldValue;\n};\n\n/**\n * Modify an existing CSS property or creates a new CSS property in the declaration block.\n *\n * @param {string} propertyName representing the CSS property name to be modified.\n * @param {string} value containing the new property value. If not specified, treated as the empty string. value must not contain \"!important\" -- that should be set using the priority parameter.\n * @param {string} priority allowing the \"important\" CSS priority to be set. If not specified, treated as the empty string.\n * @return {{value: string, priority: string}}\n */\nCSSStyleDeclaration.prototype.setProperty = function (\n  propertyName,\n  value,\n  priority\n) {\n  if (typeof propertyName === 'undefined') {\n    throw Error('propertyName argument required, but only not present.');\n  }\n\n  this.addStyleValueHandler();\n\n  var properties = this.getProperties();\n  this._handleParseError();\n\n  var property = {\n    value: value.trim(),\n    priority: priority.trim(),\n  };\n  properties.set(propertyName.trim(), property);\n\n  return property;\n};\n\nmodule.exports = CSSStyleDeclaration;\n"]},"metadata":{},"sourceType":"script"}