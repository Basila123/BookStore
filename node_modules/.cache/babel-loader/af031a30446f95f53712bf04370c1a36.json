{"ast":null,"code":"'use strict';\n\nconst CommentRemover = require('./lib/commentRemover');\n\nconst commentParser = require('./lib/commentParser');\n\nfunction pluginCreator() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const remover = new CommentRemover(opts);\n  const matcherCache = new Map();\n  const replacerCache = new Map();\n\n  function matchesComments(source) {\n    if (matcherCache.has(source)) {\n      return matcherCache.get(source);\n    }\n\n    const result = commentParser(source).filter(_ref => {\n      let [type] = _ref;\n      return type;\n    });\n    matcherCache.set(source, result);\n    return result;\n  }\n\n  function replaceComments(source, space) {\n    let separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ' ';\n    const key = source + '@|@' + separator;\n\n    if (replacerCache.has(key)) {\n      return replacerCache.get(key);\n    }\n\n    const parsed = commentParser(source).reduce((value, _ref2) => {\n      let [type, start, end] = _ref2;\n      const contents = source.slice(start, end);\n\n      if (!type) {\n        return value + contents;\n      }\n\n      if (remover.canRemove(contents)) {\n        return value + separator;\n      }\n\n      return `${value}/*${contents}*/`;\n    }, '');\n    const result = space(parsed).join(' ');\n    replacerCache.set(key, result);\n    return result;\n  }\n\n  return {\n    postcssPlugin: 'postcss-discard-comments',\n\n    OnceExit(css, _ref3) {\n      let {\n        list\n      } = _ref3;\n      css.walk(node => {\n        if (node.type === 'comment' && remover.canRemove(node.text)) {\n          node.remove();\n          return;\n        }\n\n        if (node.raws.between) {\n          node.raws.between = replaceComments(node.raws.between, list.space);\n        }\n\n        if (node.type === 'decl') {\n          if (node.raws.value && node.raws.value.raw) {\n            if (node.raws.value.value === node.value) {\n              node.value = replaceComments(node.raws.value.raw, list.space);\n            } else {\n              node.value = replaceComments(node.value, list.space);\n            }\n\n            node.raws.value = null;\n          }\n\n          if (node.raws.important) {\n            node.raws.important = replaceComments(node.raws.important, list.space);\n            const b = matchesComments(node.raws.important);\n            node.raws.important = b.length ? node.raws.important : '!important';\n          }\n\n          return;\n        }\n\n        if (node.type === 'rule' && node.raws.selector && node.raws.selector.raw) {\n          node.raws.selector.raw = replaceComments(node.raws.selector.raw, list.space, '');\n          return;\n        }\n\n        if (node.type === 'atrule') {\n          if (node.raws.afterName) {\n            const commentsReplaced = replaceComments(node.raws.afterName, list.space);\n\n            if (!commentsReplaced.length) {\n              node.raws.afterName = commentsReplaced + ' ';\n            } else {\n              node.raws.afterName = ' ' + commentsReplaced + ' ';\n            }\n          }\n\n          if (node.raws.params && node.raws.params.raw) {\n            node.raws.params.raw = replaceComments(node.raws.params.raw, list.space);\n          }\n        }\n      });\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-discard-comments/src/index.js"],"names":["CommentRemover","require","commentParser","pluginCreator","opts","remover","matcherCache","Map","replacerCache","matchesComments","source","has","get","result","filter","type","set","replaceComments","space","separator","key","parsed","reduce","value","start","end","contents","slice","canRemove","join","postcssPlugin","OnceExit","css","list","walk","node","text","remove","raws","between","raw","important","b","length","selector","afterName","commentsReplaced","params","postcss","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst CommentRemover = require('./lib/commentRemover');\nconst commentParser = require('./lib/commentParser');\n\nfunction pluginCreator(opts = {}) {\n  const remover = new CommentRemover(opts);\n  const matcherCache = new Map();\n  const replacerCache = new Map();\n\n  function matchesComments(source) {\n    if (matcherCache.has(source)) {\n      return matcherCache.get(source);\n    }\n\n    const result = commentParser(source).filter(([type]) => type);\n\n    matcherCache.set(source, result);\n\n    return result;\n  }\n\n  function replaceComments(source, space, separator = ' ') {\n    const key = source + '@|@' + separator;\n\n    if (replacerCache.has(key)) {\n      return replacerCache.get(key);\n    }\n\n    const parsed = commentParser(source).reduce((value, [type, start, end]) => {\n      const contents = source.slice(start, end);\n\n      if (!type) {\n        return value + contents;\n      }\n\n      if (remover.canRemove(contents)) {\n        return value + separator;\n      }\n\n      return `${value}/*${contents}*/`;\n    }, '');\n\n    const result = space(parsed).join(' ');\n\n    replacerCache.set(key, result);\n\n    return result;\n  }\n\n  return {\n    postcssPlugin: 'postcss-discard-comments',\n\n    OnceExit(css, { list }) {\n      css.walk((node) => {\n        if (node.type === 'comment' && remover.canRemove(node.text)) {\n          node.remove();\n\n          return;\n        }\n\n        if (node.raws.between) {\n          node.raws.between = replaceComments(node.raws.between, list.space);\n        }\n\n        if (node.type === 'decl') {\n          if (node.raws.value && node.raws.value.raw) {\n            if (node.raws.value.value === node.value) {\n              node.value = replaceComments(node.raws.value.raw, list.space);\n            } else {\n              node.value = replaceComments(node.value, list.space);\n            }\n\n            node.raws.value = null;\n          }\n\n          if (node.raws.important) {\n            node.raws.important = replaceComments(\n              node.raws.important,\n              list.space\n            );\n\n            const b = matchesComments(node.raws.important);\n\n            node.raws.important = b.length ? node.raws.important : '!important';\n          }\n\n          return;\n        }\n\n        if (\n          node.type === 'rule' &&\n          node.raws.selector &&\n          node.raws.selector.raw\n        ) {\n          node.raws.selector.raw = replaceComments(\n            node.raws.selector.raw,\n            list.space,\n            ''\n          );\n\n          return;\n        }\n\n        if (node.type === 'atrule') {\n          if (node.raws.afterName) {\n            const commentsReplaced = replaceComments(\n              node.raws.afterName,\n              list.space\n            );\n\n            if (!commentsReplaced.length) {\n              node.raws.afterName = commentsReplaced + ' ';\n            } else {\n              node.raws.afterName = ' ' + commentsReplaced + ' ';\n            }\n          }\n\n          if (node.raws.params && node.raws.params.raw) {\n            node.raws.params.raw = replaceComments(\n              node.raws.params.raw,\n              list.space\n            );\n          }\n        }\n      });\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}