{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _util_1 = require(\"./_util\");\n\nfunction getDef(opts) {\n  return {\n    keyword: \"deepProperties\",\n    type: \"object\",\n    schemaType: \"object\",\n    macro: function (schema) {\n      const allOf = [];\n\n      for (const pointer in schema) allOf.push(getSchema(pointer, schema[pointer]));\n\n      return {\n        allOf\n      };\n    },\n    metaSchema: {\n      type: \"object\",\n      propertyNames: {\n        type: \"string\",\n        format: \"json-pointer\"\n      },\n      additionalProperties: (0, _util_1.metaSchemaRef)(opts)\n    }\n  };\n}\n\nexports.default = getDef;\n\nfunction getSchema(jsonPointer, schema) {\n  const segments = jsonPointer.split(\"/\");\n  const rootSchema = {};\n  let pointerSchema = rootSchema;\n\n  for (let i = 1; i < segments.length; i++) {\n    let segment = segments[i];\n    const isLast = i === segments.length - 1;\n    segment = unescapeJsonPointer(segment);\n    const properties = pointerSchema.properties = {};\n    let items;\n\n    if (/[0-9]+/.test(segment)) {\n      let count = +segment;\n      items = pointerSchema.items = [];\n      pointerSchema.type = [\"object\", \"array\"];\n\n      while (count--) items.push({});\n    } else {\n      pointerSchema.type = \"object\";\n    }\n\n    pointerSchema = isLast ? schema : {};\n    properties[segment] = pointerSchema;\n    if (items) items.push(pointerSchema);\n  }\n\n  return rootSchema;\n}\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\n\nmodule.exports = getDef;","map":{"version":3,"mappings":";;;;;;AAEA;;AAEA,SAAwBA,MAAxB,CAA+BC,IAA/B,EAAuD;AACrD,SAAO;AACLC,WAAO,EAAE,gBADJ;AAELC,QAAI,EAAE,QAFD;AAGLC,cAAU,EAAE,QAHP;AAILC,SAAK,EAAE,UAAUC,MAAV,EAA8C;AACnD,YAAMC,KAAK,GAAG,EAAd;;AACA,WAAK,MAAMC,OAAX,IAAsBF,MAAtB,EAA8BC,KAAK,CAACE,IAAN,CAAWC,SAAS,CAACF,OAAD,EAAUF,MAAM,CAACE,OAAD,CAAhB,CAApB;;AAC9B,aAAO;AAACD;AAAD,OAAP;AACD,KARI;AASLI,cAAU,EAAE;AACVR,UAAI,EAAE,QADI;AAEVS,mBAAa,EAAE;AAACT,YAAI,EAAE,QAAP;AAAiBU,cAAM,EAAE;AAAzB,OAFL;AAGVC,0BAAoB,EAAE,2BAAcb,IAAd;AAHZ;AATP,GAAP;AAeD;;AAhBDc;;AAkBA,SAASL,SAAT,CAAmBM,WAAnB,EAAwCV,MAAxC,EAA4D;AAC1D,QAAMW,QAAQ,GAAGD,WAAW,CAACE,KAAZ,CAAkB,GAAlB,CAAjB;AACA,QAAMC,UAAU,GAAiB,EAAjC;AACA,MAAIC,aAAa,GAAiBD,UAAlC;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,QAAIE,OAAO,GAAWN,QAAQ,CAACI,CAAD,CAA9B;AACA,UAAMG,MAAM,GAAGH,CAAC,KAAKJ,QAAQ,CAACK,MAAT,GAAkB,CAAvC;AACAC,WAAO,GAAGE,mBAAmB,CAACF,OAAD,CAA7B;AACA,UAAMG,UAAU,GAA4BN,aAAa,CAACM,UAAd,GAA2B,EAAvE;AACA,QAAIC,KAAJ;;AACA,QAAI,SAASC,IAAT,CAAcL,OAAd,CAAJ,EAA4B;AAC1B,UAAIM,KAAK,GAAG,CAACN,OAAb;AACAI,WAAK,GAAGP,aAAa,CAACO,KAAd,GAAsB,EAA9B;AACAP,mBAAa,CAACjB,IAAd,GAAqB,CAAC,QAAD,EAAW,OAAX,CAArB;;AACA,aAAO0B,KAAK,EAAZ,EAAgBF,KAAK,CAAClB,IAAN,CAAW,EAAX;AACjB,KALD,MAKO;AACLW,mBAAa,CAACjB,IAAd,GAAqB,QAArB;AACD;;AACDiB,iBAAa,GAAGI,MAAM,GAAGlB,MAAH,GAAY,EAAlC;AACAoB,cAAU,CAACH,OAAD,CAAV,GAAsBH,aAAtB;AACA,QAAIO,KAAJ,EAAWA,KAAK,CAAClB,IAAN,CAAWW,aAAX;AACZ;;AACD,SAAOD,UAAP;AACD;;AAED,SAASM,mBAAT,CAA6BK,GAA7B,EAAwC;AACtC,SAAOA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,EAAwBA,OAAxB,CAAgC,KAAhC,EAAuC,GAAvC,CAAP;AACD;;AAEDC,MAAM,CAACjB,OAAP,GAAiBf,MAAjB","names":["getDef","opts","keyword","type","schemaType","macro","schema","allOf","pointer","push","getSchema","metaSchema","propertyNames","format","additionalProperties","exports","jsonPointer","segments","split","rootSchema","pointerSchema","i","length","segment","isLast","unescapeJsonPointer","properties","items","test","count","str","replace","module"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/css-minimizer-webpack-plugin/node_modules/ajv-keywords/src/definitions/deepProperties.ts"],"sourcesContent":["import type {MacroKeywordDefinition, SchemaObject, Schema} from \"ajv\"\nimport type {DefinitionOptions} from \"./_types\"\nimport {metaSchemaRef} from \"./_util\"\n\nexport default function getDef(opts?: DefinitionOptions): MacroKeywordDefinition {\n  return {\n    keyword: \"deepProperties\",\n    type: \"object\",\n    schemaType: \"object\",\n    macro: function (schema: Record<string, SchemaObject>) {\n      const allOf = []\n      for (const pointer in schema) allOf.push(getSchema(pointer, schema[pointer]))\n      return {allOf}\n    },\n    metaSchema: {\n      type: \"object\",\n      propertyNames: {type: \"string\", format: \"json-pointer\"},\n      additionalProperties: metaSchemaRef(opts),\n    },\n  }\n}\n\nfunction getSchema(jsonPointer: string, schema: SchemaObject): SchemaObject {\n  const segments = jsonPointer.split(\"/\")\n  const rootSchema: SchemaObject = {}\n  let pointerSchema: SchemaObject = rootSchema\n  for (let i = 1; i < segments.length; i++) {\n    let segment: string = segments[i]\n    const isLast = i === segments.length - 1\n    segment = unescapeJsonPointer(segment)\n    const properties: Record<string, Schema> = (pointerSchema.properties = {})\n    let items: SchemaObject[] | undefined\n    if (/[0-9]+/.test(segment)) {\n      let count = +segment\n      items = pointerSchema.items = []\n      pointerSchema.type = [\"object\", \"array\"]\n      while (count--) items.push({})\n    } else {\n      pointerSchema.type = \"object\"\n    }\n    pointerSchema = isLast ? schema : {}\n    properties[segment] = pointerSchema\n    if (items) items.push(pointerSchema)\n  }\n  return rootSchema\n}\n\nfunction unescapeJsonPointer(str: string): string {\n  return str.replace(/~1/g, \"/\").replace(/~0/g, \"~\")\n}\n\nmodule.exports = getDef\n"]},"metadata":{},"sourceType":"script"}