{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"../../compile/util\");\n\nconst def = {\n  keyword: \"allOf\",\n  schemaType: \"array\",\n\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      it\n    } = cxt;\n    /* istanbul ignore if */\n\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n    const valid = gen.name(\"valid\");\n    schema.forEach((sch, i) => {\n      if ((0, util_1.alwaysValidSchema)(it, sch)) return;\n      const schCxt = cxt.subschema({\n        keyword: \"allOf\",\n        schemaProp: i\n      }, valid);\n      cxt.ok(valid);\n      cxt.mergeEvaluated(schCxt);\n    });\n  }\n\n};\nexports.default = def;","map":{"version":3,"mappings":";;;;;;AAEA;;AAEA,MAAMA,GAAG,GAA0B;AACjCC,SAAO,EAAE,OADwB;AAEjCC,YAAU,EAAE,OAFqB;;AAGjCC,MAAI,CAACC,GAAD,EAAgB;AAClB,UAAM;AAACC,SAAD;AAAMC,YAAN;AAAcC;AAAd,QAAoBH,GAA1B;AACA;;AACA,QAAI,CAACI,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAL,EAA4B,MAAM,IAAII,KAAJ,CAAU,0BAAV,CAAN;AAC5B,UAAMC,KAAK,GAAGN,GAAG,CAACO,IAAJ,CAAS,OAAT,CAAd;AACAN,UAAM,CAACO,OAAP,CAAe,CAACC,GAAD,EAAiBC,CAAjB,KAA8B;AAC3C,UAAI,8BAAkBR,EAAlB,EAAsBO,GAAtB,CAAJ,EAAgC;AAChC,YAAME,MAAM,GAAGZ,GAAG,CAACa,SAAJ,CAAc;AAAChB,eAAO,EAAE,OAAV;AAAmBiB,kBAAU,EAAEH;AAA/B,OAAd,EAAiDJ,KAAjD,CAAf;AACAP,SAAG,CAACe,EAAJ,CAAOR,KAAP;AACAP,SAAG,CAACgB,cAAJ,CAAmBJ,MAAnB;AACD,KALD;AAMD;;AAdgC,CAAnC;AAiBAK,kBAAerB,GAAf","names":["def","keyword","schemaType","code","cxt","gen","schema","it","Array","isArray","Error","valid","name","forEach","sch","i","schCxt","subschema","schemaProp","ok","mergeEvaluated","exports"],"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/ajv-formats/node_modules/ajv/lib/vocabularies/applicator/allOf.ts"],"sourcesContent":["import type {CodeKeywordDefinition, AnySchema} from \"../../types\"\nimport type {KeywordCxt} from \"../../compile/validate\"\nimport {alwaysValidSchema} from \"../../compile/util\"\n\nconst def: CodeKeywordDefinition = {\n  keyword: \"allOf\",\n  schemaType: \"array\",\n  code(cxt: KeywordCxt) {\n    const {gen, schema, it} = cxt\n    /* istanbul ignore if */\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\")\n    const valid = gen.name(\"valid\")\n    schema.forEach((sch: AnySchema, i: number) => {\n      if (alwaysValidSchema(it, sch)) return\n      const schCxt = cxt.subschema({keyword: \"allOf\", schemaProp: i}, valid)\n      cxt.ok(valid)\n      cxt.mergeEvaluated(schCxt)\n    })\n  },\n}\n\nexport default def\n"]},"metadata":{},"sourceType":"script"}