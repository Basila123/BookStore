{"ast":null,"code":"'use strict';\n\nconst valueParser = require('postcss-value-parser');\n\nconst mappings = require('./lib/map');\n\nfunction transform(value) {\n  const {\n    nodes\n  } = valueParser(value);\n\n  if (nodes.length === 1) {\n    return value;\n  }\n\n  const values = nodes.filter((list, index) => index % 2 === 0).filter(node => node.type === 'word').map(n => n.value.toLowerCase());\n\n  if (values.length === 0) {\n    return value;\n  }\n\n  const match = mappings.get(values.toString());\n\n  if (!match) {\n    return value;\n  }\n\n  return match;\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-display-values',\n\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/^display$/i, decl => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            if (cache.has(value)) {\n              decl.value = cache.get(value);\n              return;\n            }\n\n            const result = transform(value);\n            decl.value = result;\n            cache.set(value, result);\n          });\n        }\n\n      };\n    }\n\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;","map":{"version":3,"sources":["/home/hp/Js/React_practise/BookStore/books/node_modules/postcss-normalize-display-values/src/index.js"],"names":["valueParser","require","mappings","transform","value","nodes","length","values","filter","list","index","node","type","map","n","toLowerCase","match","get","toString","pluginCreator","postcssPlugin","prepare","cache","Map","OnceExit","css","walkDecls","decl","has","result","set","postcss","module","exports"],"mappings":"AAAA;;AACA,MAAMA,WAAW,GAAGC,OAAO,CAAC,sBAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AAEA,SAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAYL,WAAW,CAACI,KAAD,CAA7B;;AAEA,MAAIC,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAOF,KAAP;AACD;;AAED,QAAMG,MAAM,GAAGF,KAAK,CACjBG,MADY,CACL,CAACC,IAAD,EAAOC,KAAP,KAAiBA,KAAK,GAAG,CAAR,KAAc,CAD1B,EAEZF,MAFY,CAEJG,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAc,MAFnB,EAGZC,GAHY,CAGPC,CAAD,IAAOA,CAAC,CAACV,KAAF,CAAQW,WAAR,EAHC,CAAf;;AAKA,MAAIR,MAAM,CAACD,MAAP,KAAkB,CAAtB,EAAyB;AACvB,WAAOF,KAAP;AACD;;AAED,QAAMY,KAAK,GAAGd,QAAQ,CAACe,GAAT,CAAaV,MAAM,CAACW,QAAP,EAAb,CAAd;;AAEA,MAAI,CAACF,KAAL,EAAY;AACV,WAAOZ,KAAP;AACD;;AAED,SAAOY,KAAP;AACD;;AAED,SAASG,aAAT,GAAyB;AACvB,SAAO;AACLC,IAAAA,aAAa,EAAE,kCADV;;AAGLC,IAAAA,OAAO,GAAG;AACR,YAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,aAAO;AACLC,QAAAA,QAAQ,CAACC,GAAD,EAAM;AACZA,UAAAA,GAAG,CAACC,SAAJ,CAAc,YAAd,EAA6BC,IAAD,IAAU;AACpC,kBAAMvB,KAAK,GAAGuB,IAAI,CAACvB,KAAnB;;AAEA,gBAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,gBAAIkB,KAAK,CAACM,GAAN,CAAUxB,KAAV,CAAJ,EAAsB;AACpBuB,cAAAA,IAAI,CAACvB,KAAL,GAAakB,KAAK,CAACL,GAAN,CAAUb,KAAV,CAAb;AAEA;AACD;;AAED,kBAAMyB,MAAM,GAAG1B,SAAS,CAACC,KAAD,CAAxB;AAEAuB,YAAAA,IAAI,CAACvB,KAAL,GAAayB,MAAb;AACAP,YAAAA,KAAK,CAACQ,GAAN,CAAU1B,KAAV,EAAiByB,MAAjB;AACD,WAjBD;AAkBD;;AApBI,OAAP;AAsBD;;AA3BI,GAAP;AA6BD;;AAEDV,aAAa,CAACY,OAAd,GAAwB,IAAxB;AACAC,MAAM,CAACC,OAAP,GAAiBd,aAAjB","sourcesContent":["'use strict';\nconst valueParser = require('postcss-value-parser');\nconst mappings = require('./lib/map');\n\nfunction transform(value) {\n  const { nodes } = valueParser(value);\n\n  if (nodes.length === 1) {\n    return value;\n  }\n\n  const values = nodes\n    .filter((list, index) => index % 2 === 0)\n    .filter((node) => node.type === 'word')\n    .map((n) => n.value.toLowerCase());\n\n  if (values.length === 0) {\n    return value;\n  }\n\n  const match = mappings.get(values.toString());\n\n  if (!match) {\n    return value;\n  }\n\n  return match;\n}\n\nfunction pluginCreator() {\n  return {\n    postcssPlugin: 'postcss-normalize-display-values',\n\n    prepare() {\n      const cache = new Map();\n      return {\n        OnceExit(css) {\n          css.walkDecls(/^display$/i, (decl) => {\n            const value = decl.value;\n\n            if (!value) {\n              return;\n            }\n\n            if (cache.has(value)) {\n              decl.value = cache.get(value);\n\n              return;\n            }\n\n            const result = transform(value);\n\n            decl.value = result;\n            cache.set(value, result);\n          });\n        },\n      };\n    },\n  };\n}\n\npluginCreator.postcss = true;\nmodule.exports = pluginCreator;\n"]},"metadata":{},"sourceType":"script"}